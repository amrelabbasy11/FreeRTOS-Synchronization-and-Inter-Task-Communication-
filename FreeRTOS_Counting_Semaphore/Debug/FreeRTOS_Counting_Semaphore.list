
FreeRTOS_Counting_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006338  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080064d8  080064d8  000074d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800668c  0800668c  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  0800668c  0800668c  0000768c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006694  08006694  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006694  08006694  00007694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006698  08006698  00007698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800669c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b1c  2000006c  08006708  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b88  08006708  00008b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013608  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d5  00000000  00000000  0001b6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0001e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e39  00000000  00000000  0001fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001918d  00000000  00000000  00020951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014948  00000000  00000000  00039ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096b98  00000000  00000000  0004e426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4fbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005494  00000000  00000000  000e5004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ea498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064c0 	.word	0x080064c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080064c0 	.word	0x080064c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(3, 0, &myCountingSem01_attributes);
 8000574:	4a14      	ldr	r2, [pc, #80]	@ (80005c8 <MX_FREERTOS_Init+0x58>)
 8000576:	2100      	movs	r1, #0
 8000578:	2003      	movs	r0, #3
 800057a:	f001 fe2c 	bl	80021d6 <osSemaphoreNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a12      	ldr	r2, [pc, #72]	@ (80005cc <MX_FREERTOS_Init+0x5c>)
 8000582:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_one */
  Task_oneHandle = osThreadNew(TaskOne, NULL, &Task_one_attributes);
 8000584:	4a12      	ldr	r2, [pc, #72]	@ (80005d0 <MX_FREERTOS_Init+0x60>)
 8000586:	2100      	movs	r1, #0
 8000588:	4812      	ldr	r0, [pc, #72]	@ (80005d4 <MX_FREERTOS_Init+0x64>)
 800058a:	f001 fd77 	bl	800207c <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a11      	ldr	r2, [pc, #68]	@ (80005d8 <MX_FREERTOS_Init+0x68>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of Task_two */
  Task_twoHandle = osThreadNew(Tasktwo, NULL, &Task_two_attributes);
 8000594:	4a11      	ldr	r2, [pc, #68]	@ (80005dc <MX_FREERTOS_Init+0x6c>)
 8000596:	2100      	movs	r1, #0
 8000598:	4811      	ldr	r0, [pc, #68]	@ (80005e0 <MX_FREERTOS_Init+0x70>)
 800059a:	f001 fd6f 	bl	800207c <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a10      	ldr	r2, [pc, #64]	@ (80005e4 <MX_FREERTOS_Init+0x74>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* creation of Task_three */
  Task_threeHandle = osThreadNew(TaskThree, NULL, &Task_three_attributes);
 80005a4:	4a10      	ldr	r2, [pc, #64]	@ (80005e8 <MX_FREERTOS_Init+0x78>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4810      	ldr	r0, [pc, #64]	@ (80005ec <MX_FREERTOS_Init+0x7c>)
 80005aa:	f001 fd67 	bl	800207c <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a0f      	ldr	r2, [pc, #60]	@ (80005f0 <MX_FREERTOS_Init+0x80>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of Task_Four */
  Task_FourHandle = osThreadNew(TaskFour, NULL, &Task_Four_attributes);
 80005b4:	4a0f      	ldr	r2, [pc, #60]	@ (80005f4 <MX_FREERTOS_Init+0x84>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480f      	ldr	r0, [pc, #60]	@ (80005f8 <MX_FREERTOS_Init+0x88>)
 80005ba:	f001 fd5f 	bl	800207c <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <MX_FREERTOS_Init+0x8c>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	08006630 	.word	0x08006630
 80005cc:	20000098 	.word	0x20000098
 80005d0:	080065a0 	.word	0x080065a0
 80005d4:	08000601 	.word	0x08000601
 80005d8:	20000088 	.word	0x20000088
 80005dc:	080065c4 	.word	0x080065c4
 80005e0:	0800063d 	.word	0x0800063d
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	080065e8 	.word	0x080065e8
 80005ec:	08000679 	.word	0x08000679
 80005f0:	20000090 	.word	0x20000090
 80005f4:	0800660c 	.word	0x0800660c
 80005f8:	080006b5 	.word	0x080006b5
 80005fc:	20000094 	.word	0x20000094

08000600 <TaskOne>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskOne */
void TaskOne(void *argument)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskOne */
	uint32_t Task_Counter = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
     osSemaphoreRelease(myCountingSem01Handle);
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <TaskOne+0x34>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f001 febb 	bl	800238c <osSemaphoreRelease>
     Task_Counter++;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3301      	adds	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
     printf("TaskOne is running : %i",(signed int)Task_Counter);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <TaskOne+0x38>)
 8000622:	f005 f873 	bl	800570c <iprintf>
     osDelay(500);
 8000626:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800062a:	f001 fdb9 	bl	80021a0 <osDelay>
     osSemaphoreRelease(myCountingSem01Handle);
 800062e:	bf00      	nop
 8000630:	e7ec      	b.n	800060c <TaskOne+0xc>
 8000632:	bf00      	nop
 8000634:	20000098 	.word	0x20000098
 8000638:	08006518 	.word	0x08006518

0800063c <Tasktwo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tasktwo */
void Tasktwo(void *argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TaskOne */
		uint32_t Task_Counter = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
	  /* Infinite loop */
	  for(;;)
	  {
	     osSemaphoreRelease(myCountingSem01Handle);
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <Tasktwo+0x34>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fe9d 	bl	800238c <osSemaphoreRelease>
	     Task_Counter++;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
	     printf("Tasktwo is running : %i",(signed int)Task_Counter);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <Tasktwo+0x38>)
 800065e:	f005 f855 	bl	800570c <iprintf>
	     osDelay(1500);
 8000662:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000666:	f001 fd9b 	bl	80021a0 <osDelay>
	     osSemaphoreRelease(myCountingSem01Handle);
 800066a:	bf00      	nop
 800066c:	e7ec      	b.n	8000648 <Tasktwo+0xc>
 800066e:	bf00      	nop
 8000670:	20000098 	.word	0x20000098
 8000674:	08006530 	.word	0x08006530

08000678 <TaskThree>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskThree */
void TaskThree(void *argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TaskOne */
		uint32_t Task_Counter = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
	  /* Infinite loop */
	  for(;;)
	  {
	     osSemaphoreRelease(myCountingSem01Handle);
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <TaskThree+0x34>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fe7f 	bl	800238c <osSemaphoreRelease>
	     Task_Counter++;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
	     printf("TaskThree is running : %i",(signed int)Task_Counter);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <TaskThree+0x38>)
 800069a:	f005 f837 	bl	800570c <iprintf>
	     osDelay(1500);
 800069e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006a2:	f001 fd7d 	bl	80021a0 <osDelay>
	     osSemaphoreRelease(myCountingSem01Handle);
 80006a6:	bf00      	nop
 80006a8:	e7ec      	b.n	8000684 <TaskThree+0xc>
 80006aa:	bf00      	nop
 80006ac:	20000098 	.word	0x20000098
 80006b0:	08006548 	.word	0x08006548

080006b4 <TaskFour>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskFour */
void TaskFour(void *argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TaskOne */
		uint32_t Task_Counter = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
	  /* Infinite loop */
	  for(;;)
	  {
	     osSemaphoreAcquire(myCountingSem01Handle,5000);
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <TaskFour+0x4c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fe0d 	bl	80022e8 <osSemaphoreAcquire>
	     osSemaphoreAcquire(myCountingSem01Handle,5000);
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <TaskFour+0x4c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fe06 	bl	80022e8 <osSemaphoreAcquire>
	     osSemaphoreAcquire(myCountingSem01Handle,5000);
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <TaskFour+0x4c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fdff 	bl	80022e8 <osSemaphoreAcquire>
	     Task_Counter++;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
	     printf("TaskOne is running : %i",(signed int)Task_Counter);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4803      	ldr	r0, [pc, #12]	@ (8000704 <TaskFour+0x50>)
 80006f6:	f005 f809 	bl	800570c <iprintf>
	     osSemaphoreAcquire(myCountingSem01Handle,5000);
 80006fa:	bf00      	nop
 80006fc:	e7e0      	b.n	80006c0 <TaskFour+0xc>
 80006fe:	bf00      	nop
 8000700:	20000098 	.word	0x20000098
 8000704:	08006518 	.word	0x08006518

08000708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_GPIO_Init+0x84>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a19      	ldr	r2, [pc, #100]	@ (800078c <MX_GPIO_Init+0x84>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_GPIO_Init+0x84>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_GPIO_Init+0x84>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a12      	ldr	r2, [pc, #72]	@ (800078c <MX_GPIO_Init+0x84>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_GPIO_Init+0x84>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800075a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	4808      	ldr	r0, [pc, #32]	@ (8000790 <MX_GPIO_Init+0x88>)
 800076e:	f000 fb65 	bl	8000e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2105      	movs	r1, #5
 8000776:	2028      	movs	r0, #40	@ 0x28
 8000778:	f000 fb36 	bl	8000de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800077c:	2028      	movs	r0, #40	@ 0x28
 800077e:	f000 fb4f 	bl	8000e20 <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020400 	.word	0x40020400

08000794 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file */
  /* release counting semaphore */
  osSemaphoreRelease(myCountingSem01Handle);
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_GPIO_EXTI_Callback+0x24>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fdf2 	bl	800238c <osSemaphoreRelease>
  printf("HAL_GPIO_EXTI_Callback is running \n");
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <HAL_GPIO_EXTI_Callback+0x28>)
 80007aa:	f005 f817 	bl	80057dc <puts>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000098 	.word	0x20000098
 80007bc:	08006564 	.word	0x08006564

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f000 fa16 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f80a 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f7ff ff9c 	bl	8000708 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80007d0:	f001 fc0a 	bl	8001fe8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80007d4:	f7ff fecc 	bl	8000570 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80007d8:	f001 fc2a 	bl	8002030 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <main+0x1c>

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	@ 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2230      	movs	r2, #48	@ 0x30
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 f8d4 	bl	800599c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <SystemClock_Config+0xb8>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080c:	4a22      	ldr	r2, [pc, #136]	@ (8000898 <SystemClock_Config+0xb8>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	@ 0x40
 8000814:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <SystemClock_Config+0xb8>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <SystemClock_Config+0xbc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800082c:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <SystemClock_Config+0xbc>)
 800082e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <SystemClock_Config+0xbc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	2310      	movs	r3, #16
 800084a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800084c:	2300      	movs	r3, #0
 800084e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fc8d 	bl	8001174 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000860:	f000 f830 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fef0 	bl	8001664 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800088a:	f000 f81b 	bl	80008c4 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3750      	adds	r7, #80	@ 0x50
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40007000 	.word	0x40007000

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 f9c1 	bl	8000c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40000800 	.word	0x40000800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <HAL_MspInit+0x54>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x54>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_MspInit+0x54>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_MspInit+0x54>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 fa67 	bl	8000de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	@ 0x30
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	201e      	movs	r0, #30
 800093e:	f000 fa53 	bl	8000de8 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000942:	201e      	movs	r0, #30
 8000944:	f000 fa6c 	bl	8000e20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <HAL_InitTick+0xa0>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	4a1d      	ldr	r2, [pc, #116]	@ (80009c8 <HAL_InitTick+0xa0>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	6413      	str	r3, [r2, #64]	@ 0x40
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <HAL_InitTick+0xa0>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000964:	f107 0210 	add.w	r2, r7, #16
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f844 	bl	80019fc <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000974:	f001 f82e 	bl	80019d4 <HAL_RCC_GetPCLK1Freq>
 8000978:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800097c:	4a13      	ldr	r2, [pc, #76]	@ (80009cc <HAL_InitTick+0xa4>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	0c9b      	lsrs	r3, r3, #18
 8000984:	3b01      	subs	r3, #1
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_InitTick+0xa8>)
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <HAL_InitTick+0xac>)
 800098c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <HAL_InitTick+0xa8>)
 8000990:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000994:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000996:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <HAL_InitTick+0xa8>)
 8000998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800099a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <HAL_InitTick+0xa8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <HAL_InitTick+0xa8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80009a8:	4809      	ldr	r0, [pc, #36]	@ (80009d0 <HAL_InitTick+0xa8>)
 80009aa:	f001 f859 	bl	8001a60 <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d104      	bne.n	80009be <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80009b4:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <HAL_InitTick+0xa8>)
 80009b6:	f001 f8ad 	bl	8001b14 <HAL_TIM_Base_Start_IT>
 80009ba:	4603      	mov	r3, r0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3730      	adds	r7, #48	@ 0x30
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	431bde83 	.word	0x431bde83
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	40000800 	.word	0x40000800

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <NMI_Handler+0x4>

080009e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <MemManage_Handler+0x4>

080009f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <UsageFault_Handler+0x4>

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <TIM4_IRQHandler+0x10>)
 8000a16:	f001 f8df 	bl	8001bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000009c 	.word	0x2000009c

08000a24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a28:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a2c:	f000 fb8a 	bl	8001144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00a      	b.n	8000a5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a46:	f3af 8000 	nop.w
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf0      	blt.n	8000a46 <_read+0x12>
	}

return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e009      	b.n	8000a94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf1      	blt.n	8000a80 <_write+0x12>
	}
	return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f004 ff7a 	bl	8005a38 <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20010000 	.word	0x20010000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	200000e4 	.word	0x200000e4
 8000b78:	20004b88 	.word	0x20004b88

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba4:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba6:	490e      	ldr	r1, [pc, #56]	@ (8000be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	@ (8000be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	@ (8000bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd7 	bl	8000b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f004 ff39 	bl	8005a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fdf5 	bl	80007c0 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000be4:	0800669c 	.word	0x0800669c
  ldr r2, =_sbss
 8000be8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000bec:	20004b88 	.word	0x20004b88

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f8d8 	bl	8000dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	200f      	movs	r0, #15
 8000c24:	f7ff fe80 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fe52 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	200000e8 	.word	0x200000e8

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	@ (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200000e8 	.word	0x200000e8

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4907      	ldr	r1, [pc, #28]	@ (8000d14 <__NVIC_EnableIRQ+0x38>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	@ (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	@ (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	@ 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	@ 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ff4c 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfa:	f7ff ff61 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	6978      	ldr	r0, [r7, #20]
 8000e06:	f7ff ffb1 	bl	8000d6c <NVIC_EncodePriority>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff80 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff54 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	@ 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e159      	b.n	800110c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8148 	bne.w	8001106 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d005      	beq.n	8000e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d130      	bne.n	8000ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 0201 	and.w	r2, r3, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d017      	beq.n	8000f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80a2 	beq.w	8001106 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b57      	ldr	r3, [pc, #348]	@ (8001124 <HAL_GPIO_Init+0x2e8>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	4a56      	ldr	r2, [pc, #344]	@ (8001124 <HAL_GPIO_Init+0x2e8>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd2:	4b54      	ldr	r3, [pc, #336]	@ (8001124 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a52      	ldr	r2, [pc, #328]	@ (8001128 <HAL_GPIO_Init+0x2ec>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a49      	ldr	r2, [pc, #292]	@ (800112c <HAL_GPIO_Init+0x2f0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x202>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a48      	ldr	r2, [pc, #288]	@ (8001130 <HAL_GPIO_Init+0x2f4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x1fe>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a47      	ldr	r2, [pc, #284]	@ (8001134 <HAL_GPIO_Init+0x2f8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x1fa>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a46      	ldr	r2, [pc, #280]	@ (8001138 <HAL_GPIO_Init+0x2fc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x1f6>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a45      	ldr	r2, [pc, #276]	@ (800113c <HAL_GPIO_Init+0x300>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x1f2>
 800102a:	2304      	movs	r3, #4
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800102e:	2307      	movs	r3, #7
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x204>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x204>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4935      	ldr	r1, [pc, #212]	@ (8001128 <HAL_GPIO_Init+0x2ec>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105e:	4b38      	ldr	r3, [pc, #224]	@ (8001140 <HAL_GPIO_Init+0x304>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001082:	4a2f      	ldr	r2, [pc, #188]	@ (8001140 <HAL_GPIO_Init+0x304>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <HAL_GPIO_Init+0x304>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ac:	4a24      	ldr	r2, [pc, #144]	@ (8001140 <HAL_GPIO_Init+0x304>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <HAL_GPIO_Init+0x304>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001140 <HAL_GPIO_Init+0x304>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <HAL_GPIO_Init+0x304>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a0f      	ldr	r2, [pc, #60]	@ (8001140 <HAL_GPIO_Init+0x304>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f aea2 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	@ 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001150:	695a      	ldr	r2, [r3, #20]
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fb16 	bl	8000794 <HAL_GPIO_EXTI_Callback>
  }
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40013c00 	.word	0x40013c00

08001174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e267      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d075      	beq.n	800127e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001192:	4b88      	ldr	r3, [pc, #544]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b04      	cmp	r3, #4
 800119c:	d00c      	beq.n	80011b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119e:	4b85      	ldr	r3, [pc, #532]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d112      	bne.n	80011d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011aa:	4b82      	ldr	r3, [pc, #520]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011b6:	d10b      	bne.n	80011d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	4b7e      	ldr	r3, [pc, #504]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d05b      	beq.n	800127c <HAL_RCC_OscConfig+0x108>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d157      	bne.n	800127c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e242      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d8:	d106      	bne.n	80011e8 <HAL_RCC_OscConfig+0x74>
 80011da:	4b76      	ldr	r3, [pc, #472]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a75      	ldr	r2, [pc, #468]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e01d      	b.n	8001224 <HAL_RCC_OscConfig+0xb0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x98>
 80011f2:	4b70      	ldr	r3, [pc, #448]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a6f      	ldr	r2, [pc, #444]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b6d      	ldr	r3, [pc, #436]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6c      	ldr	r2, [pc, #432]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e00b      	b.n	8001224 <HAL_RCC_OscConfig+0xb0>
 800120c:	4b69      	ldr	r3, [pc, #420]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a68      	ldr	r2, [pc, #416]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b66      	ldr	r3, [pc, #408]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a65      	ldr	r2, [pc, #404]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 800121e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d013      	beq.n	8001254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fd18 	bl	8000c60 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fd14 	bl	8000c60 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	@ 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e207      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	4b5b      	ldr	r3, [pc, #364]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0xc0>
 8001252:	e014      	b.n	800127e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fd04 	bl	8000c60 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fd00 	bl	8000c60 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	@ 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e1f3      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	4b51      	ldr	r3, [pc, #324]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0xe8>
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d063      	beq.n	8001352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128a:	4b4a      	ldr	r3, [pc, #296]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001296:	4b47      	ldr	r3, [pc, #284]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d11c      	bne.n	80012dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a2:	4b44      	ldr	r3, [pc, #272]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d116      	bne.n	80012dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ae:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <HAL_RCC_OscConfig+0x152>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d001      	beq.n	80012c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e1c7      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c6:	4b3b      	ldr	r3, [pc, #236]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4937      	ldr	r1, [pc, #220]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	e03a      	b.n	8001352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e4:	4b34      	ldr	r3, [pc, #208]	@ (80013b8 <HAL_RCC_OscConfig+0x244>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	f7ff fcb9 	bl	8000c60 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fcb5 	bl	8000c60 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e1a8      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001310:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4925      	ldr	r1, [pc, #148]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
 8001324:	e015      	b.n	8001352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <HAL_RCC_OscConfig+0x244>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff fc98 	bl	8000c60 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff fc94 	bl	8000c60 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e187      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d036      	beq.n	80013cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d016      	beq.n	8001394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_RCC_OscConfig+0x248>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136c:	f7ff fc78 	bl	8000c60 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff fc74 	bl	8000c60 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e167      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x200>
 8001392:	e01b      	b.n	80013cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <HAL_RCC_OscConfig+0x248>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fc61 	bl	8000c60 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	e00e      	b.n	80013c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc5d 	bl	8000c60 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d907      	bls.n	80013c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e150      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
 80013b4:	40023800 	.word	0x40023800
 80013b8:	42470000 	.word	0x42470000
 80013bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	4b88      	ldr	r3, [pc, #544]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1ea      	bne.n	80013a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8097 	beq.w	8001508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013de:	4b81      	ldr	r3, [pc, #516]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10f      	bne.n	800140a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b7d      	ldr	r3, [pc, #500]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a7c      	ldr	r2, [pc, #496]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b7a      	ldr	r3, [pc, #488]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b77      	ldr	r3, [pc, #476]	@ (80015e8 <HAL_RCC_OscConfig+0x474>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001416:	4b74      	ldr	r3, [pc, #464]	@ (80015e8 <HAL_RCC_OscConfig+0x474>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a73      	ldr	r2, [pc, #460]	@ (80015e8 <HAL_RCC_OscConfig+0x474>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001422:	f7ff fc1d 	bl	8000c60 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142a:	f7ff fc19 	bl	8000c60 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e10c      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	4b6a      	ldr	r3, [pc, #424]	@ (80015e8 <HAL_RCC_OscConfig+0x474>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x2ea>
 8001450:	4b64      	ldr	r3, [pc, #400]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001454:	4a63      	ldr	r2, [pc, #396]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6713      	str	r3, [r2, #112]	@ 0x70
 800145c:	e01c      	b.n	8001498 <HAL_RCC_OscConfig+0x324>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b05      	cmp	r3, #5
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x30c>
 8001466:	4b5f      	ldr	r3, [pc, #380]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146a:	4a5e      	ldr	r2, [pc, #376]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6713      	str	r3, [r2, #112]	@ 0x70
 8001472:	4b5c      	ldr	r3, [pc, #368]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001476:	4a5b      	ldr	r2, [pc, #364]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6713      	str	r3, [r2, #112]	@ 0x70
 800147e:	e00b      	b.n	8001498 <HAL_RCC_OscConfig+0x324>
 8001480:	4b58      	ldr	r3, [pc, #352]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001484:	4a57      	ldr	r2, [pc, #348]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	6713      	str	r3, [r2, #112]	@ 0x70
 800148c:	4b55      	ldr	r3, [pc, #340]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001490:	4a54      	ldr	r2, [pc, #336]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001492:	f023 0304 	bic.w	r3, r3, #4
 8001496:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d015      	beq.n	80014cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fbde 	bl	8000c60 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff fbda 	bl	8000c60 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0cb      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	4b49      	ldr	r3, [pc, #292]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0ee      	beq.n	80014a8 <HAL_RCC_OscConfig+0x334>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014cc:	f7ff fbc8 	bl	8000c60 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d4:	f7ff fbc4 	bl	8000c60 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e0b5      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ea:	4b3e      	ldr	r3, [pc, #248]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ee      	bne.n	80014d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d105      	bne.n	8001508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fc:	4b39      	ldr	r3, [pc, #228]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	4a38      	ldr	r2, [pc, #224]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a1 	beq.w	8001654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001512:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d05c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d141      	bne.n	80015aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <HAL_RCC_OscConfig+0x478>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fb98 	bl	8000c60 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff fb94 	bl	8000c60 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e087      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001560:	019b      	lsls	r3, r3, #6
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	3b01      	subs	r3, #1
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	491b      	ldr	r1, [pc, #108]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_RCC_OscConfig+0x478>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fb6d 	bl	8000c60 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fb69 	bl	8000c60 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e05c      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x416>
 80015a8:	e054      	b.n	8001654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_RCC_OscConfig+0x478>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb56 	bl	8000c60 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff fb52 	bl	8000c60 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e045      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x444>
 80015d6:	e03d      	b.n	8001654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e038      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40007000 	.word	0x40007000
 80015ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <HAL_RCC_OscConfig+0x4ec>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d028      	beq.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d121      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d11a      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001620:	4013      	ands	r3, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001628:	4293      	cmp	r3, r2
 800162a:	d111      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	3b01      	subs	r3, #1
 800163a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d107      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0cc      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b68      	ldr	r3, [pc, #416]	@ (800181c <HAL_RCC_ClockConfig+0x1b8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d90c      	bls.n	80016a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b65      	ldr	r3, [pc, #404]	@ (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b63      	ldr	r3, [pc, #396]	@ (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0b8      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b8:	4b59      	ldr	r3, [pc, #356]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4a58      	ldr	r2, [pc, #352]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d0:	4b53      	ldr	r3, [pc, #332]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a52      	ldr	r2, [pc, #328]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016dc:	4b50      	ldr	r3, [pc, #320]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	494d      	ldr	r1, [pc, #308]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d044      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	4b47      	ldr	r3, [pc, #284]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d119      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e07f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d003      	beq.n	8001722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171e:	2b03      	cmp	r3, #3
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b3f      	ldr	r3, [pc, #252]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e06f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3b      	ldr	r3, [pc, #236]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e067      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b37      	ldr	r3, [pc, #220]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4934      	ldr	r1, [pc, #208]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff fa84 	bl	8000c60 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff fa80 	bl	8000c60 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e04f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b25      	ldr	r3, [pc, #148]	@ (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d20c      	bcs.n	80017ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b22      	ldr	r3, [pc, #136]	@ (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e032      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4916      	ldr	r1, [pc, #88]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d6:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	490e      	ldr	r1, [pc, #56]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ea:	f000 f821 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	490a      	ldr	r1, [pc, #40]	@ (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	5ccb      	ldrb	r3, [r1, r3]
 80017fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001802:	4a09      	ldr	r2, [pc, #36]	@ (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f88c 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023c00 	.word	0x40023c00
 8001820:	40023800 	.word	0x40023800
 8001824:	08006640 	.word	0x08006640
 8001828:	20000000 	.word	0x20000000
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001834:	b090      	sub	sp, #64	@ 0x40
 8001836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	@ 0x34
 800183c:	2300      	movs	r3, #0
 800183e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001840:	2300      	movs	r3, #0
 8001842:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001848:	4b59      	ldr	r3, [pc, #356]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d00d      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x40>
 8001854:	2b08      	cmp	r3, #8
 8001856:	f200 80a1 	bhi.w	800199c <HAL_RCC_GetSysClockFreq+0x16c>
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x34>
 800185e:	2b04      	cmp	r3, #4
 8001860:	d003      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0x3a>
 8001862:	e09b      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b53      	ldr	r3, [pc, #332]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001866:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001868:	e09b      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800186a:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800186c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800186e:	e098      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001870:	4b4f      	ldr	r3, [pc, #316]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001878:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800187a:	4b4d      	ldr	r3, [pc, #308]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d028      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001886:	4b4a      	ldr	r3, [pc, #296]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	2200      	movs	r2, #0
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	627a      	str	r2, [r7, #36]	@ 0x24
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001898:	2100      	movs	r1, #0
 800189a:	4b47      	ldr	r3, [pc, #284]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800189c:	fb03 f201 	mul.w	r2, r3, r1
 80018a0:	2300      	movs	r3, #0
 80018a2:	fb00 f303 	mul.w	r3, r0, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	4a43      	ldr	r2, [pc, #268]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018aa:	fba0 1202 	umull	r1, r2, r0, r2
 80018ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018b0:	460a      	mov	r2, r1
 80018b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80018b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b6:	4413      	add	r3, r2
 80018b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018bc:	2200      	movs	r2, #0
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	61fa      	str	r2, [r7, #28]
 80018c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018ca:	f7fe fcd9 	bl	8000280 <__aeabi_uldivmod>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4613      	mov	r3, r2
 80018d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018d6:	e053      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d8:	4b35      	ldr	r3, [pc, #212]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	2200      	movs	r2, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	617a      	str	r2, [r7, #20]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ea:	f04f 0b00 	mov.w	fp, #0
 80018ee:	4652      	mov	r2, sl
 80018f0:	465b      	mov	r3, fp
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	0159      	lsls	r1, r3, #5
 80018fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001900:	0150      	lsls	r0, r2, #5
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	ebb2 080a 	subs.w	r8, r2, sl
 800190a:	eb63 090b 	sbc.w	r9, r3, fp
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800191a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800191e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001922:	ebb2 0408 	subs.w	r4, r2, r8
 8001926:	eb63 0509 	sbc.w	r5, r3, r9
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	00eb      	lsls	r3, r5, #3
 8001934:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001938:	00e2      	lsls	r2, r4, #3
 800193a:	4614      	mov	r4, r2
 800193c:	461d      	mov	r5, r3
 800193e:	eb14 030a 	adds.w	r3, r4, sl
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	eb45 030b 	adc.w	r3, r5, fp
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001956:	4629      	mov	r1, r5
 8001958:	028b      	lsls	r3, r1, #10
 800195a:	4621      	mov	r1, r4
 800195c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001960:	4621      	mov	r1, r4
 8001962:	028a      	lsls	r2, r1, #10
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196a:	2200      	movs	r2, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	60fa      	str	r2, [r7, #12]
 8001970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001974:	f7fe fc84 	bl	8000280 <__aeabi_uldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4613      	mov	r3, r2
 800197e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	0c1b      	lsrs	r3, r3, #16
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	3301      	adds	r3, #1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001990:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800199a:	e002      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800199e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3740      	adds	r7, #64	@ 0x40
 80019a8:	46bd      	mov	sp, r7
 80019aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	00f42400 	.word	0x00f42400
 80019b8:	017d7840 	.word	0x017d7840

080019bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000000 	.word	0x20000000

080019d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019d8:	f7ff fff0 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	0a9b      	lsrs	r3, r3, #10
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	4903      	ldr	r1, [pc, #12]	@ (80019f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	08006650 	.word	0x08006650

080019fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	220f      	movs	r2, #15
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_RCC_GetClockConfig+0x5c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a18:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	08db      	lsrs	r3, r3, #3
 8001a36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a3e:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <HAL_RCC_GetClockConfig+0x60>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0207 	and.w	r2, r3, #7
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	601a      	str	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e041      	b.n	8001af6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f839 	bl	8001afe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f000 f9ca 	bl	8001e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d001      	beq.n	8001b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e044      	b.n	8001bb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d018      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x6c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b56:	d013      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x6c>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00e      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x6c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a19      	ldr	r2, [pc, #100]	@ (8001bcc <HAL_TIM_Base_Start_IT+0xb8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d009      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x6c>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d004      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x6c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a16      	ldr	r2, [pc, #88]	@ (8001bd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d111      	bne.n	8001ba4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d010      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba2:	e007      	b.n	8001bb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	40000c00 	.word	0x40000c00
 8001bd4:	40014000 	.word	0x40014000

08001bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d122      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d11b      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0202 	mvn.w	r2, #2
 8001c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8ee 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8e0 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8f1 	bl	8001e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0204 	mvn.w	r2, #4
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8c4 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8b6 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f8c7 	bl	8001e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d122      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d11b      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0208 	mvn.w	r2, #8
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f89a 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f88c 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f89d 	bl	8001e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d122      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d11b      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0210 	mvn.w	r2, #16
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2208      	movs	r2, #8
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f870 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f862 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f873 	bl	8001e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10e      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0201 	mvn.w	r2, #1
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fda2 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d66:	2b80      	cmp	r3, #128	@ 0x80
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d74:	2b80      	cmp	r3, #128	@ 0x80
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8e2 	bl	8001f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d92:	2b40      	cmp	r3, #64	@ 0x40
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da0:	2b40      	cmp	r3, #64	@ 0x40
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f838 	bl	8001e24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0220 	mvn.w	r2, #32
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8ac 	bl	8001f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a34      	ldr	r2, [pc, #208]	@ (8001f1c <TIM_Base_SetConfig+0xe4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d00f      	beq.n	8001e70 <TIM_Base_SetConfig+0x38>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e56:	d00b      	beq.n	8001e70 <TIM_Base_SetConfig+0x38>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a31      	ldr	r2, [pc, #196]	@ (8001f20 <TIM_Base_SetConfig+0xe8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d007      	beq.n	8001e70 <TIM_Base_SetConfig+0x38>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a30      	ldr	r2, [pc, #192]	@ (8001f24 <TIM_Base_SetConfig+0xec>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d003      	beq.n	8001e70 <TIM_Base_SetConfig+0x38>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f28 <TIM_Base_SetConfig+0xf0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d108      	bne.n	8001e82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a25      	ldr	r2, [pc, #148]	@ (8001f1c <TIM_Base_SetConfig+0xe4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01b      	beq.n	8001ec2 <TIM_Base_SetConfig+0x8a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e90:	d017      	beq.n	8001ec2 <TIM_Base_SetConfig+0x8a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a22      	ldr	r2, [pc, #136]	@ (8001f20 <TIM_Base_SetConfig+0xe8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <TIM_Base_SetConfig+0x8a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a21      	ldr	r2, [pc, #132]	@ (8001f24 <TIM_Base_SetConfig+0xec>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00f      	beq.n	8001ec2 <TIM_Base_SetConfig+0x8a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a20      	ldr	r2, [pc, #128]	@ (8001f28 <TIM_Base_SetConfig+0xf0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00b      	beq.n	8001ec2 <TIM_Base_SetConfig+0x8a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a1f      	ldr	r2, [pc, #124]	@ (8001f2c <TIM_Base_SetConfig+0xf4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <TIM_Base_SetConfig+0x8a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f30 <TIM_Base_SetConfig+0xf8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d003      	beq.n	8001ec2 <TIM_Base_SetConfig+0x8a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <TIM_Base_SetConfig+0xfc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d108      	bne.n	8001ed4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a08      	ldr	r2, [pc, #32]	@ (8001f1c <TIM_Base_SetConfig+0xe4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d103      	bne.n	8001f08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40014000 	.word	0x40014000
 8001f30:	40014400 	.word	0x40014400
 8001f34:	40014800 	.word	0x40014800

08001f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <__NVIC_SetPriority>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	@ (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	@ (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <SysTick_Handler+0x1c>)
 8001fba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001fbc:	f002 f968 	bl	8004290 <xTaskGetSchedulerState>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001fc6:	f003 f85f 	bl	8005088 <xPortSysTickHandler>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f06f 0004 	mvn.w	r0, #4
 8001fde:	f7ff ffbf 	bl	8001f60 <__NVIC_SetPriority>
#endif
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fee:	f3ef 8305 	mrs	r3, IPSR
 8001ff2:	603b      	str	r3, [r7, #0]
  return(result);
 8001ff4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ffa:	f06f 0305 	mvn.w	r3, #5
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	e00c      	b.n	800201c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <osKernelInitialize+0x44>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d105      	bne.n	8002016 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800200a:	4b08      	ldr	r3, [pc, #32]	@ (800202c <osKernelInitialize+0x44>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002010:	2300      	movs	r3, #0
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	e002      	b.n	800201c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200000ec 	.word	0x200000ec

08002030 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002036:	f3ef 8305 	mrs	r3, IPSR
 800203a:	603b      	str	r3, [r7, #0]
  return(result);
 800203c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002042:	f06f 0305 	mvn.w	r3, #5
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	e010      	b.n	800206c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <osKernelStart+0x48>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d109      	bne.n	8002066 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002052:	f7ff ffbf 	bl	8001fd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <osKernelStart+0x48>)
 8002058:	2202      	movs	r2, #2
 800205a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800205c:	f001 fcca 	bl	80039f4 <vTaskStartScheduler>
      stat = osOK;
 8002060:	2300      	movs	r3, #0
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	e002      	b.n	800206c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800206c:	687b      	ldr	r3, [r7, #4]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200000ec 	.word	0x200000ec

0800207c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	@ 0x38
 8002080:	af04      	add	r7, sp, #16
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800208c:	f3ef 8305 	mrs	r3, IPSR
 8002090:	617b      	str	r3, [r7, #20]
  return(result);
 8002092:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002094:	2b00      	cmp	r3, #0
 8002096:	d17e      	bne.n	8002196 <osThreadNew+0x11a>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d07b      	beq.n	8002196 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80020a2:	2318      	movs	r3, #24
 80020a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d045      	beq.n	8002142 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <osThreadNew+0x48>
        name = attr->name;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <osThreadNew+0x6e>
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b38      	cmp	r3, #56	@ 0x38
 80020dc:	d805      	bhi.n	80020ea <osThreadNew+0x6e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <osThreadNew+0x72>
        return (NULL);
 80020ea:	2300      	movs	r3, #0
 80020ec:	e054      	b.n	8002198 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00e      	beq.n	8002124 <osThreadNew+0xa8>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b5b      	cmp	r3, #91	@ 0x5b
 800210c:	d90a      	bls.n	8002124 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <osThreadNew+0xa8>
        mem = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e010      	b.n	8002146 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10c      	bne.n	8002146 <osThreadNew+0xca>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d108      	bne.n	8002146 <osThreadNew+0xca>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d104      	bne.n	8002146 <osThreadNew+0xca>
          mem = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	e001      	b.n	8002146 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d110      	bne.n	800216e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002154:	9202      	str	r2, [sp, #8]
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	6a3a      	ldr	r2, [r7, #32]
 8002160:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f001 fa6a 	bl	800363c <xTaskCreateStatic>
 8002168:	4603      	mov	r3, r0
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e013      	b.n	8002196 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d110      	bne.n	8002196 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	b29a      	uxth	r2, r3
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f001 fab8 	bl	80036fc <xTaskCreate>
 800218c:	4603      	mov	r3, r0
 800218e:	2b01      	cmp	r3, #1
 8002190:	d001      	beq.n	8002196 <osThreadNew+0x11a>
            hTask = NULL;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002196:	693b      	ldr	r3, [r7, #16]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3728      	adds	r7, #40	@ 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021a8:	f3ef 8305 	mrs	r3, IPSR
 80021ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80021ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <osDelay+0x1c>
    stat = osErrorISR;
 80021b4:	f06f 0305 	mvn.w	r3, #5
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e007      	b.n	80021cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f001 fbde 	bl	8003988 <vTaskDelay>
    }
  }

  return (stat);
 80021cc:	68fb      	ldr	r3, [r7, #12]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b08a      	sub	sp, #40	@ 0x28
 80021da:	af02      	add	r7, sp, #8
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e6:	f3ef 8305 	mrs	r3, IPSR
 80021ea:	613b      	str	r3, [r7, #16]
  return(result);
 80021ec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d175      	bne.n	80022de <osSemaphoreNew+0x108>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d072      	beq.n	80022de <osSemaphoreNew+0x108>
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d86e      	bhi.n	80022de <osSemaphoreNew+0x108>
    mem = -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d015      	beq.n	8002238 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <osSemaphoreNew+0x4c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b4f      	cmp	r3, #79	@ 0x4f
 800221a:	d902      	bls.n	8002222 <osSemaphoreNew+0x4c>
        mem = 1;
 800221c:	2301      	movs	r3, #1
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	e00c      	b.n	800223c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <osSemaphoreNew+0x66>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d104      	bne.n	800223c <osSemaphoreNew+0x66>
          mem = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	e001      	b.n	800223c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002242:	d04c      	beq.n	80022de <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d128      	bne.n	800229c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d10a      	bne.n	8002266 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2203      	movs	r2, #3
 8002256:	9200      	str	r2, [sp, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	2001      	movs	r0, #1
 800225e:	f000 fa2b 	bl	80026b8 <xQueueGenericCreateStatic>
 8002262:	61f8      	str	r0, [r7, #28]
 8002264:	e005      	b.n	8002272 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002266:	2203      	movs	r2, #3
 8002268:	2100      	movs	r1, #0
 800226a:	2001      	movs	r0, #1
 800226c:	f000 faa1 	bl	80027b2 <xQueueGenericCreate>
 8002270:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d022      	beq.n	80022be <osSemaphoreNew+0xe8>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01f      	beq.n	80022be <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800227e:	2300      	movs	r3, #0
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	69f8      	ldr	r0, [r7, #28]
 8002286:	f000 fb61 	bl	800294c <xQueueGenericSend>
 800228a:	4603      	mov	r3, r0
 800228c:	2b01      	cmp	r3, #1
 800228e:	d016      	beq.n	80022be <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002290:	69f8      	ldr	r0, [r7, #28]
 8002292:	f000 ffff 	bl	8003294 <vQueueDelete>
            hSemaphore = NULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e010      	b.n	80022be <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d108      	bne.n	80022b4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fadf 	bl	800286e <xQueueCreateCountingSemaphoreStatic>
 80022b0:	61f8      	str	r0, [r7, #28]
 80022b2:	e004      	b.n	80022be <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fb12 	bl	80028e0 <xQueueCreateCountingSemaphore>
 80022bc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00c      	beq.n	80022de <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e001      	b.n	80022d6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80022d6:	6979      	ldr	r1, [r7, #20]
 80022d8:	69f8      	ldr	r0, [r7, #28]
 80022da:	f001 f927 	bl	800352c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80022de:	69fb      	ldr	r3, [r7, #28]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002300:	f06f 0303 	mvn.w	r3, #3
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	e039      	b.n	800237c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002308:	f3ef 8305 	mrs	r3, IPSR
 800230c:	60fb      	str	r3, [r7, #12]
  return(result);
 800230e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002310:	2b00      	cmp	r3, #0
 8002312:	d022      	beq.n	800235a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800231a:	f06f 0303 	mvn.w	r3, #3
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	e02c      	b.n	800237c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	461a      	mov	r2, r3
 800232c:	2100      	movs	r1, #0
 800232e:	6938      	ldr	r0, [r7, #16]
 8002330:	f000 ff2e 	bl	8003190 <xQueueReceiveFromISR>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d003      	beq.n	8002342 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800233a:	f06f 0302 	mvn.w	r3, #2
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e01c      	b.n	800237c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d019      	beq.n	800237c <osSemaphoreAcquire+0x94>
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <osSemaphoreAcquire+0xa0>)
 800234a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	e010      	b.n	800237c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800235a:	6839      	ldr	r1, [r7, #0]
 800235c:	6938      	ldr	r0, [r7, #16]
 800235e:	f000 fe07 	bl	8002f70 <xQueueSemaphoreTake>
 8002362:	4603      	mov	r3, r0
 8002364:	2b01      	cmp	r3, #1
 8002366:	d009      	beq.n	800237c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800236e:	f06f 0301 	mvn.w	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e002      	b.n	800237c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002376:	f06f 0302 	mvn.w	r3, #2
 800237a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800237c:	697b      	ldr	r3, [r7, #20]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000ed04 	.word	0xe000ed04

0800238c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80023a2:	f06f 0303 	mvn.w	r3, #3
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	e02c      	b.n	8002404 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023aa:	f3ef 8305 	mrs	r3, IPSR
 80023ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80023b0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01a      	beq.n	80023ec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	4619      	mov	r1, r3
 80023c0:	6938      	ldr	r0, [r7, #16]
 80023c2:	f000 fc63 	bl	8002c8c <xQueueGiveFromISR>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d003      	beq.n	80023d4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80023cc:	f06f 0302 	mvn.w	r3, #2
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e017      	b.n	8002404 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d014      	beq.n	8002404 <osSemaphoreRelease+0x78>
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <osSemaphoreRelease+0x84>)
 80023dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	f3bf 8f6f 	isb	sy
 80023ea:	e00b      	b.n	8002404 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80023ec:	2300      	movs	r3, #0
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	6938      	ldr	r0, [r7, #16]
 80023f4:	f000 faaa 	bl	800294c <xQueueGenericSend>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d002      	beq.n	8002404 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80023fe:	f06f 0302 	mvn.w	r3, #2
 8002402:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002404:	697b      	ldr	r3, [r7, #20]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000ed04 	.word	0xe000ed04

08002414 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <vApplicationGetIdleTaskMemory+0x2c>)
 8002424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4a06      	ldr	r2, [pc, #24]	@ (8002444 <vApplicationGetIdleTaskMemory+0x30>)
 800242a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	601a      	str	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	200000f0 	.word	0x200000f0
 8002444:	2000014c 	.word	0x2000014c

08002448 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4a07      	ldr	r2, [pc, #28]	@ (8002474 <vApplicationGetTimerTaskMemory+0x2c>)
 8002458:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4a06      	ldr	r2, [pc, #24]	@ (8002478 <vApplicationGetTimerTaskMemory+0x30>)
 800245e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	2000034c 	.word	0x2000034c
 8002478:	200003a8 	.word	0x200003a8

0800247c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f103 0208 	add.w	r2, r3, #8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f103 0208 	add.w	r2, r3, #8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f103 0208 	add.w	r2, r3, #8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d103      	bne.n	800253e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e00c      	b.n	8002558 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3308      	adds	r3, #8
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e002      	b.n	800254c <vListInsert+0x2e>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	d2f6      	bcs.n	8002546 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6852      	ldr	r2, [r2, #4]
 80025b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d103      	bne.n	80025c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	1e5a      	subs	r2, r3, #1
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002610:	f002 fcaa 	bl	8004f68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261c:	68f9      	ldr	r1, [r7, #12]
 800261e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	441a      	add	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002640:	3b01      	subs	r3, #1
 8002642:	68f9      	ldr	r1, [r7, #12]
 8002644:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	441a      	add	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	22ff      	movs	r2, #255	@ 0xff
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	22ff      	movs	r2, #255	@ 0xff
 800265c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d114      	bne.n	8002690 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01a      	beq.n	80026a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3310      	adds	r3, #16
 8002672:	4618      	mov	r0, r3
 8002674:	f001 fc4c 	bl	8003f10 <xTaskRemoveFromEventList>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800267e:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <xQueueGenericReset+0xd0>)
 8002680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	e009      	b.n	80026a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3310      	adds	r3, #16
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fef1 	bl	800247c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3324      	adds	r3, #36	@ 0x24
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff feec 	bl	800247c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026a4:	f002 fc92 	bl	8004fcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026a8:	2301      	movs	r3, #1
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000ed04 	.word	0xe000ed04

080026b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08e      	sub	sp, #56	@ 0x38
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10b      	bne.n	8002702 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	e7fd      	b.n	80026fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <xQueueGenericCreateStatic+0x56>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <xQueueGenericCreateStatic+0x5a>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <xQueueGenericCreateStatic+0x5c>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	623b      	str	r3, [r7, #32]
}
 800272a:	bf00      	nop
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <xQueueGenericCreateStatic+0x84>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <xQueueGenericCreateStatic+0x88>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <xQueueGenericCreateStatic+0x8a>
 8002740:	2300      	movs	r3, #0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10b      	bne.n	800275e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	61fb      	str	r3, [r7, #28]
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	e7fd      	b.n	800275a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800275e:	2350      	movs	r3, #80	@ 0x50
 8002760:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b50      	cmp	r3, #80	@ 0x50
 8002766:	d00b      	beq.n	8002780 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	61bb      	str	r3, [r7, #24]
}
 800277a:	bf00      	nop
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002780:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800278c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002794:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f840 	bl	8002828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3730      	adds	r7, #48	@ 0x30
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b08a      	sub	sp, #40	@ 0x28
 80027b6:	af02      	add	r7, sp, #8
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	4613      	mov	r3, r2
 80027be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10b      	bne.n	80027de <xQueueGenericCreate+0x2c>
	__asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	613b      	str	r3, [r7, #16]
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	e7fd      	b.n	80027da <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	3350      	adds	r3, #80	@ 0x50
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 fcdd 	bl	80051ac <pvPortMalloc>
 80027f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d011      	beq.n	800281e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3350      	adds	r3, #80	@ 0x50
 8002802:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800280c:	79fa      	ldrb	r2, [r7, #7]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f805 	bl	8002828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800281e:	69bb      	ldr	r3, [r7, #24]
	}
 8002820:	4618      	mov	r0, r3
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e002      	b.n	800284a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002856:	2101      	movs	r1, #1
 8002858:	69b8      	ldr	r0, [r7, #24]
 800285a:	f7ff fec3 	bl	80025e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800286e:	b580      	push	{r7, lr}
 8002870:	b08a      	sub	sp, #40	@ 0x28
 8002872:	af02      	add	r7, sp, #8
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	61bb      	str	r3, [r7, #24]
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d90b      	bls.n	80028b8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	617b      	str	r3, [r7, #20]
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	e7fd      	b.n	80028b4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80028b8:	2302      	movs	r3, #2
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7ff fef8 	bl	80026b8 <xQueueGenericCreateStatic>
 80028c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80028d6:	69fb      	ldr	r3, [r7, #28]
	}
 80028d8:	4618      	mov	r0, r3
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	613b      	str	r3, [r7, #16]
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	d90b      	bls.n	8002928 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	60fb      	str	r3, [r7, #12]
}
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002928:	2202      	movs	r2, #2
 800292a:	2100      	movs	r1, #0
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff40 	bl	80027b2 <xQueueGenericCreate>
 8002932:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002940:	697b      	ldr	r3, [r7, #20]
	}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	@ 0x38
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800295a:	2300      	movs	r3, #0
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <xQueueGenericSend+0x34>
	__asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800297a:	bf00      	nop
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d103      	bne.n	800298e <xQueueGenericSend+0x42>
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <xQueueGenericSend+0x46>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <xQueueGenericSend+0x48>
 8002992:	2300      	movs	r3, #0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10b      	bne.n	80029b0 <xQueueGenericSend+0x64>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d103      	bne.n	80029be <xQueueGenericSend+0x72>
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <xQueueGenericSend+0x76>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <xQueueGenericSend+0x78>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <xQueueGenericSend+0x94>
	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	623b      	str	r3, [r7, #32]
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029e0:	f001 fc56 	bl	8004290 <xTaskGetSchedulerState>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <xQueueGenericSend+0xa4>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <xQueueGenericSend+0xa8>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <xQueueGenericSend+0xaa>
 80029f4:	2300      	movs	r3, #0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <xQueueGenericSend+0xc6>
	__asm volatile
 80029fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	61fb      	str	r3, [r7, #28]
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	e7fd      	b.n	8002a0e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a12:	f002 faa9 	bl	8004f68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <xQueueGenericSend+0xdc>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d129      	bne.n	8002a7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a2e:	f000 fc6d 	bl	800330c <prvCopyDataToQueue>
 8002a32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d010      	beq.n	8002a5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3e:	3324      	adds	r3, #36	@ 0x24
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 fa65 	bl	8003f10 <xTaskRemoveFromEventList>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b4c <xQueueGenericSend+0x200>)
 8002a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	e00a      	b.n	8002a74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a64:	4b39      	ldr	r3, [pc, #228]	@ (8002b4c <xQueueGenericSend+0x200>)
 8002a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a74:	f002 faaa 	bl	8004fcc <vPortExitCritical>
				return pdPASS;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e063      	b.n	8002b44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d103      	bne.n	8002a8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a82:	f002 faa3 	bl	8004fcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e05c      	b.n	8002b44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 fa9f 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a9e:	f002 fa95 	bl	8004fcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aa2:	f001 f80f 	bl	8003ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aa6:	f002 fa5f 	bl	8004f68 <vPortEnterCritical>
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d103      	bne.n	8002ac0 <xQueueGenericSend+0x174>
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d103      	bne.n	8002ad6 <xQueueGenericSend+0x18a>
 8002ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ad6:	f002 fa79 	bl	8004fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ada:	1d3a      	adds	r2, r7, #4
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 fa8e 	bl	8004004 <xTaskCheckForTimeOut>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d124      	bne.n	8002b38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002aee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002af0:	f000 fd04 	bl	80034fc <prvIsQueueFull>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d018      	beq.n	8002b2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	3310      	adds	r3, #16
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 f9b2 	bl	8003e6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b0a:	f000 fc8f 	bl	800342c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b0e:	f000 ffe7 	bl	8003ae0 <xTaskResumeAll>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f47f af7c 	bne.w	8002a12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <xQueueGenericSend+0x200>)
 8002b1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	e772      	b.n	8002a12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b2e:	f000 fc7d 	bl	800342c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b32:	f000 ffd5 	bl	8003ae0 <xTaskResumeAll>
 8002b36:	e76c      	b.n	8002a12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b3a:	f000 fc77 	bl	800342c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b3e:	f000 ffcf 	bl	8003ae0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3738      	adds	r7, #56	@ 0x38
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	e000ed04 	.word	0xe000ed04

08002b50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b090      	sub	sp, #64	@ 0x40
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b7a:	bf00      	nop
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <xQueueGenericSendFromISR+0x3e>
 8002b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <xQueueGenericSendFromISR+0x42>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <xQueueGenericSendFromISR+0x44>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d103      	bne.n	8002bbe <xQueueGenericSendFromISR+0x6e>
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <xQueueGenericSendFromISR+0x72>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <xQueueGenericSendFromISR+0x74>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	623b      	str	r3, [r7, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002be0:	f002 faa2 	bl	8005128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002be4:	f3ef 8211 	mrs	r2, BASEPRI
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	61fa      	str	r2, [r7, #28]
 8002bfa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bfe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d302      	bcc.n	8002c12 <xQueueGenericSendFromISR+0xc2>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d12f      	bne.n	8002c72 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002c28:	f000 fb70 	bl	800330c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d112      	bne.n	8002c5c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c40:	3324      	adds	r3, #36	@ 0x24
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 f964 	bl	8003f10 <xTaskRemoveFromEventList>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00e      	beq.n	8002c6c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e007      	b.n	8002c6c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c60:	3301      	adds	r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	b25a      	sxtb	r2, r3
 8002c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002c70:	e001      	b.n	8002c76 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c78:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3740      	adds	r7, #64	@ 0x40
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	@ 0x38
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	623b      	str	r3, [r7, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	61fb      	str	r3, [r7, #28]
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <xQueueGiveFromISR+0x5c>
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <xQueueGiveFromISR+0x60>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <xQueueGiveFromISR+0x62>
 8002cec:	2300      	movs	r3, #0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	61bb      	str	r3, [r7, #24]
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	e7fd      	b.n	8002d06 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d0a:	f002 fa0d 	bl	8005128 <vPortValidateInterruptPriority>
	__asm volatile
 8002d0e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	617a      	str	r2, [r7, #20]
 8002d24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002d26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d22b      	bcs.n	8002d92 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d112      	bne.n	8002d7c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	3324      	adds	r3, #36	@ 0x24
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 f8d4 	bl	8003f10 <xTaskRemoveFromEventList>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00e      	beq.n	8002d8c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e007      	b.n	8002d8c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	b25a      	sxtb	r2, r3
 8002d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d90:	e001      	b.n	8002d96 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f383 8811 	msr	BASEPRI, r3
}
 8002da0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3738      	adds	r7, #56	@ 0x38
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	@ 0x30
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <xQueueReceive+0x32>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	623b      	str	r3, [r7, #32]
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <xQueueReceive+0x40>
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <xQueueReceive+0x44>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <xQueueReceive+0x46>
 8002df0:	2300      	movs	r3, #0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <xQueueReceive+0x62>
	__asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	61fb      	str	r3, [r7, #28]
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	e7fd      	b.n	8002e0a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e0e:	f001 fa3f 	bl	8004290 <xTaskGetSchedulerState>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <xQueueReceive+0x72>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <xQueueReceive+0x76>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <xQueueReceive+0x78>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <xQueueReceive+0x94>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	61bb      	str	r3, [r7, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e40:	f002 f892 	bl	8004f68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01f      	beq.n	8002e90 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e54:	f000 fac4 	bl	80033e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	1e5a      	subs	r2, r3, #1
 8002e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00f      	beq.n	8002e88 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6a:	3310      	adds	r3, #16
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 f84f 	bl	8003f10 <xTaskRemoveFromEventList>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e78:	4b3c      	ldr	r3, [pc, #240]	@ (8002f6c <xQueueReceive+0x1c0>)
 8002e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e88:	f002 f8a0 	bl	8004fcc <vPortExitCritical>
				return pdPASS;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e069      	b.n	8002f64 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d103      	bne.n	8002e9e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e96:	f002 f899 	bl	8004fcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e062      	b.n	8002f64 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d106      	bne.n	8002eb2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 f895 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eb2:	f002 f88b 	bl	8004fcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002eb6:	f000 fe05 	bl	8003ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eba:	f002 f855 	bl	8004f68 <vPortEnterCritical>
 8002ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eca:	d103      	bne.n	8002ed4 <xQueueReceive+0x128>
 8002ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d103      	bne.n	8002eea <xQueueReceive+0x13e>
 8002ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002eea:	f002 f86f 	bl	8004fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eee:	1d3a      	adds	r2, r7, #4
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 f884 	bl	8004004 <xTaskCheckForTimeOut>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d123      	bne.n	8002f4a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f04:	f000 fae4 	bl	80034d0 <prvIsQueueEmpty>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d017      	beq.n	8002f3e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	3324      	adds	r3, #36	@ 0x24
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 ffa8 	bl	8003e6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f1e:	f000 fa85 	bl	800342c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f22:	f000 fddd 	bl	8003ae0 <xTaskResumeAll>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d189      	bne.n	8002e40 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <xQueueReceive+0x1c0>)
 8002f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	e780      	b.n	8002e40 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f40:	f000 fa74 	bl	800342c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f44:	f000 fdcc 	bl	8003ae0 <xTaskResumeAll>
 8002f48:	e77a      	b.n	8002e40 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f4c:	f000 fa6e 	bl	800342c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f50:	f000 fdc6 	bl	8003ae0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f56:	f000 fabb 	bl	80034d0 <prvIsQueueEmpty>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f43f af6f 	beq.w	8002e40 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3730      	adds	r7, #48	@ 0x30
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	e000ed04 	.word	0xe000ed04

08002f70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08e      	sub	sp, #56	@ 0x38
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	623b      	str	r3, [r7, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	61fb      	str	r3, [r7, #28]
}
 8002fbe:	bf00      	nop
 8002fc0:	bf00      	nop
 8002fc2:	e7fd      	b.n	8002fc0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fc4:	f001 f964 	bl	8004290 <xTaskGetSchedulerState>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <xQueueSemaphoreTake+0x64>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <xQueueSemaphoreTake+0x68>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <xQueueSemaphoreTake+0x6a>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10b      	bne.n	8002ff6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	61bb      	str	r3, [r7, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	e7fd      	b.n	8002ff2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ff6:	f001 ffb7 	bl	8004f68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003002:	2b00      	cmp	r3, #0
 8003004:	d024      	beq.n	8003050 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003008:	1e5a      	subs	r2, r3, #1
 800300a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800300e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d104      	bne.n	8003020 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003016:	f001 fab5 	bl	8004584 <pvTaskIncrementMutexHeldCount>
 800301a:	4602      	mov	r2, r0
 800301c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00f      	beq.n	8003048 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302a:	3310      	adds	r3, #16
 800302c:	4618      	mov	r0, r3
 800302e:	f000 ff6f 	bl	8003f10 <xTaskRemoveFromEventList>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003038:	4b54      	ldr	r3, [pc, #336]	@ (800318c <xQueueSemaphoreTake+0x21c>)
 800303a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003048:	f001 ffc0 	bl	8004fcc <vPortExitCritical>
				return pdPASS;
 800304c:	2301      	movs	r3, #1
 800304e:	e098      	b.n	8003182 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d112      	bne.n	800307c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	617b      	str	r3, [r7, #20]
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003074:	f001 ffaa 	bl	8004fcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003078:	2300      	movs	r3, #0
 800307a:	e082      	b.n	8003182 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800307c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	4618      	mov	r0, r3
 8003088:	f000 ffa6 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800308c:	2301      	movs	r3, #1
 800308e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003090:	f001 ff9c 	bl	8004fcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003094:	f000 fd16 	bl	8003ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003098:	f001 ff66 	bl	8004f68 <vPortEnterCritical>
 800309c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800309e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d103      	bne.n	80030b2 <xQueueSemaphoreTake+0x142>
 80030aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030b8:	b25b      	sxtb	r3, r3
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d103      	bne.n	80030c8 <xQueueSemaphoreTake+0x158>
 80030c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030c8:	f001 ff80 	bl	8004fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030cc:	463a      	mov	r2, r7
 80030ce:	f107 030c 	add.w	r3, r7, #12
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 ff95 	bl	8004004 <xTaskCheckForTimeOut>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d132      	bne.n	8003146 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030e2:	f000 f9f5 	bl	80034d0 <prvIsQueueEmpty>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d026      	beq.n	800313a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80030f4:	f001 ff38 	bl	8004f68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 f8e5 	bl	80042cc <xTaskPriorityInherit>
 8003102:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003104:	f001 ff62 	bl	8004fcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800310a:	3324      	adds	r3, #36	@ 0x24
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f000 feab 	bl	8003e6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003116:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003118:	f000 f988 	bl	800342c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800311c:	f000 fce0 	bl	8003ae0 <xTaskResumeAll>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	f47f af67 	bne.w	8002ff6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003128:	4b18      	ldr	r3, [pc, #96]	@ (800318c <xQueueSemaphoreTake+0x21c>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	e75d      	b.n	8002ff6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800313a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800313c:	f000 f976 	bl	800342c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003140:	f000 fcce 	bl	8003ae0 <xTaskResumeAll>
 8003144:	e757      	b.n	8002ff6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003146:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003148:	f000 f970 	bl	800342c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800314c:	f000 fcc8 	bl	8003ae0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003150:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003152:	f000 f9bd 	bl	80034d0 <prvIsQueueEmpty>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	f43f af4c 	beq.w	8002ff6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800315e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003164:	f001 ff00 	bl	8004f68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003168:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800316a:	f000 f8b7 	bl	80032dc <prvGetDisinheritPriorityAfterTimeout>
 800316e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003176:	4618      	mov	r0, r3
 8003178:	f001 f980 	bl	800447c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800317c:	f001 ff26 	bl	8004fcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003180:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003182:	4618      	mov	r0, r3
 8003184:	3738      	adds	r7, #56	@ 0x38
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000ed04 	.word	0xe000ed04

08003190 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08e      	sub	sp, #56	@ 0x38
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80031a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10b      	bne.n	80031be <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	623b      	str	r3, [r7, #32]
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	e7fd      	b.n	80031ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <xQueueReceiveFromISR+0x3c>
 80031c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <xQueueReceiveFromISR+0x40>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <xQueueReceiveFromISR+0x42>
 80031d0:	2300      	movs	r3, #0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	61fb      	str	r3, [r7, #28]
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	e7fd      	b.n	80031ea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031ee:	f001 ff9b 	bl	8005128 <vPortValidateInterruptPriority>
	__asm volatile
 80031f2:	f3ef 8211 	mrs	r2, BASEPRI
 80031f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	61ba      	str	r2, [r7, #24]
 8003208:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800320a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800320e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d02f      	beq.n	800327a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800321a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003228:	f000 f8da 	bl	80033e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322e:	1e5a      	subs	r2, r3, #1
 8003230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003232:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003234:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d112      	bne.n	8003264 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	3310      	adds	r3, #16
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fe60 	bl	8003f10 <xTaskRemoveFromEventList>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e007      	b.n	8003274 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003268:	3301      	adds	r3, #1
 800326a:	b2db      	uxtb	r3, r3
 800326c:	b25a      	sxtb	r2, r3
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003274:	2301      	movs	r3, #1
 8003276:	637b      	str	r3, [r7, #52]	@ 0x34
 8003278:	e001      	b.n	800327e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800327a:	2300      	movs	r3, #0
 800327c:	637b      	str	r3, [r7, #52]	@ 0x34
 800327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003280:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f383 8811 	msr	BASEPRI, r3
}
 8003288:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800328a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800328c:	4618      	mov	r0, r3
 800328e:	3738      	adds	r7, #56	@ 0x38
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10b      	bne.n	80032be <vQueueDelete+0x2a>
	__asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	60bb      	str	r3, [r7, #8]
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	e7fd      	b.n	80032ba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f95e 	bl	8003580 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f002 f83a 	bl	8005348 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e001      	b.n	80032fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80032fe:	68fb      	ldr	r3, [r7, #12]
	}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d14d      	bne.n	80033ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f001 f830 	bl	800439c <xTaskPriorityDisinherit>
 800333c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	e043      	b.n	80033ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d119      	bne.n	8003380 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6858      	ldr	r0, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	461a      	mov	r2, r3
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	f002 fb9b 	bl	8005a92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	441a      	add	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d32b      	bcc.n	80033ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	e026      	b.n	80033ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68d8      	ldr	r0, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	461a      	mov	r2, r3
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	f002 fb81 	bl	8005a92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	425b      	negs	r3, r3
 800339a:	441a      	add	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d207      	bcs.n	80033bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	425b      	negs	r3, r3
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d105      	bne.n	80033ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80033d6:	697b      	ldr	r3, [r7, #20]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d018      	beq.n	8003424 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	441a      	add	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d303      	bcc.n	8003414 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68d9      	ldr	r1, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	461a      	mov	r2, r3
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	f002 fb37 	bl	8005a92 <memcpy>
	}
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003434:	f001 fd98 	bl	8004f68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800343e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003440:	e011      	b.n	8003466 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d012      	beq.n	8003470 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3324      	adds	r3, #36	@ 0x24
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fd5e 	bl	8003f10 <xTaskRemoveFromEventList>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800345a:	f000 fe37 	bl	80040cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	3b01      	subs	r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	dce9      	bgt.n	8003442 <prvUnlockQueue+0x16>
 800346e:	e000      	b.n	8003472 <prvUnlockQueue+0x46>
					break;
 8003470:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	22ff      	movs	r2, #255	@ 0xff
 8003476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800347a:	f001 fda7 	bl	8004fcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800347e:	f001 fd73 	bl	8004f68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003488:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800348a:	e011      	b.n	80034b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d012      	beq.n	80034ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3310      	adds	r3, #16
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fd39 	bl	8003f10 <xTaskRemoveFromEventList>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034a4:	f000 fe12 	bl	80040cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	dce9      	bgt.n	800348c <prvUnlockQueue+0x60>
 80034b8:	e000      	b.n	80034bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	22ff      	movs	r2, #255	@ 0xff
 80034c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80034c4:	f001 fd82 	bl	8004fcc <vPortExitCritical>
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034d8:	f001 fd46 	bl	8004f68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e001      	b.n	80034ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ee:	f001 fd6d 	bl	8004fcc <vPortExitCritical>

	return xReturn;
 80034f2:	68fb      	ldr	r3, [r7, #12]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003504:	f001 fd30 	bl	8004f68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003510:	429a      	cmp	r2, r3
 8003512:	d102      	bne.n	800351a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e001      	b.n	800351e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800351e:	f001 fd55 	bl	8004fcc <vPortExitCritical>

	return xReturn;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e014      	b.n	8003566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800353c:	4a0f      	ldr	r2, [pc, #60]	@ (800357c <vQueueAddToRegistry+0x50>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003548:	490c      	ldr	r1, [pc, #48]	@ (800357c <vQueueAddToRegistry+0x50>)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003552:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <vQueueAddToRegistry+0x50>)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800355e:	e006      	b.n	800356e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3301      	adds	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b07      	cmp	r3, #7
 800356a:	d9e7      	bls.n	800353c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	200007a8 	.word	0x200007a8

08003580 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e016      	b.n	80035bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800358e:	4a10      	ldr	r2, [pc, #64]	@ (80035d0 <vQueueUnregisterQueue+0x50>)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	d10b      	bne.n	80035b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800359e:	4a0c      	ldr	r2, [pc, #48]	@ (80035d0 <vQueueUnregisterQueue+0x50>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2100      	movs	r1, #0
 80035a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80035a8:	4a09      	ldr	r2, [pc, #36]	@ (80035d0 <vQueueUnregisterQueue+0x50>)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	2200      	movs	r2, #0
 80035b2:	605a      	str	r2, [r3, #4]
				break;
 80035b4:	e006      	b.n	80035c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3301      	adds	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b07      	cmp	r3, #7
 80035c0:	d9e5      	bls.n	800358e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	200007a8 	.word	0x200007a8

080035d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035e4:	f001 fcc0 	bl	8004f68 <vPortEnterCritical>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d103      	bne.n	80035fe <vQueueWaitForMessageRestricted+0x2a>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003604:	b25b      	sxtb	r3, r3
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d103      	bne.n	8003614 <vQueueWaitForMessageRestricted+0x40>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003614:	f001 fcda 	bl	8004fcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3324      	adds	r3, #36	@ 0x24
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fc45 	bl	8003eb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800362e:	6978      	ldr	r0, [r7, #20]
 8003630:	f7ff fefc 	bl	800342c <prvUnlockQueue>
	}
 8003634:	bf00      	nop
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08e      	sub	sp, #56	@ 0x38
 8003640:	af04      	add	r7, sp, #16
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800364a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	623b      	str	r3, [r7, #32]
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <xTaskCreateStatic+0x4a>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	61fb      	str	r3, [r7, #28]
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003686:	235c      	movs	r3, #92	@ 0x5c
 8003688:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b5c      	cmp	r3, #92	@ 0x5c
 800368e:	d00b      	beq.n	80036a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61bb      	str	r3, [r7, #24]
}
 80036a2:	bf00      	nop
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01e      	beq.n	80036ee <xTaskCreateStatic+0xb2>
 80036b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01b      	beq.n	80036ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036c8:	2300      	movs	r3, #0
 80036ca:	9303      	str	r3, [sp, #12]
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f850 	bl	8003786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036e8:	f000 f8de 	bl	80038a8 <prvAddNewTaskToReadyList>
 80036ec:	e001      	b.n	80036f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036f2:	697b      	ldr	r3, [r7, #20]
	}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3728      	adds	r7, #40	@ 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	@ 0x30
 8003700:	af04      	add	r7, sp, #16
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f001 fd4b 	bl	80051ac <pvPortMalloc>
 8003716:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800371e:	205c      	movs	r0, #92	@ 0x5c
 8003720:	f001 fd44 	bl	80051ac <pvPortMalloc>
 8003724:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	631a      	str	r2, [r3, #48]	@ 0x30
 8003732:	e005      	b.n	8003740 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003734:	6978      	ldr	r0, [r7, #20]
 8003736:	f001 fe07 	bl	8005348 <vPortFree>
 800373a:	e001      	b.n	8003740 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d017      	beq.n	8003776 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	2300      	movs	r3, #0
 8003752:	9303      	str	r3, [sp, #12]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f80e 	bl	8003786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800376a:	69f8      	ldr	r0, [r7, #28]
 800376c:	f000 f89c 	bl	80038a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003770:	2301      	movs	r3, #1
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e002      	b.n	800377c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295
 800377a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800377c:	69bb      	ldr	r3, [r7, #24]
	}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b088      	sub	sp, #32
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003796:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	461a      	mov	r2, r3
 800379e:	21a5      	movs	r1, #165	@ 0xa5
 80037a0:	f002 f8fc 	bl	800599c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037ae:	3b01      	subs	r3, #1
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f023 0307 	bic.w	r3, r3, #7
 80037bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	617b      	str	r3, [r7, #20]
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01f      	beq.n	8003826 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	e012      	b.n	8003812 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	7819      	ldrb	r1, [r3, #0]
 80037f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	4413      	add	r3, r2
 80037fa:	3334      	adds	r3, #52	@ 0x34
 80037fc:	460a      	mov	r2, r1
 80037fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	3301      	adds	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d9e9      	bls.n	80037ec <prvInitialiseNewTask+0x66>
 8003818:	e000      	b.n	800381c <prvInitialiseNewTask+0x96>
			{
				break;
 800381a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800381c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003824:	e003      	b.n	800382e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003830:	2b37      	cmp	r3, #55	@ 0x37
 8003832:	d901      	bls.n	8003838 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003834:	2337      	movs	r3, #55	@ 0x37
 8003836:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800383c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003842:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	2200      	movs	r2, #0
 8003848:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800384a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384c:	3304      	adds	r3, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fe34 	bl	80024bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	3318      	adds	r3, #24
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fe2f 	bl	80024bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003862:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003866:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800386a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003872:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	2200      	movs	r2, #0
 8003878:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	68f9      	ldr	r1, [r7, #12]
 8003886:	69b8      	ldr	r0, [r7, #24]
 8003888:	f001 fa3e 	bl	8004d08 <pxPortInitialiseStack>
 800388c:	4602      	mov	r2, r0
 800388e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003890:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800389c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800389e:	bf00      	nop
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038b0:	f001 fb5a 	bl	8004f68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038b4:	4b2d      	ldr	r3, [pc, #180]	@ (800396c <prvAddNewTaskToReadyList+0xc4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	4a2c      	ldr	r2, [pc, #176]	@ (800396c <prvAddNewTaskToReadyList+0xc4>)
 80038bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038be:	4b2c      	ldr	r3, [pc, #176]	@ (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038cc:	4b27      	ldr	r3, [pc, #156]	@ (800396c <prvAddNewTaskToReadyList+0xc4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d110      	bne.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038d4:	f000 fc1e 	bl	8004114 <prvInitialiseTaskLists>
 80038d8:	e00d      	b.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038da:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <prvAddNewTaskToReadyList+0xcc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038e2:	4b23      	ldr	r3, [pc, #140]	@ (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d802      	bhi.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038f6:	4b20      	ldr	r3, [pc, #128]	@ (8003978 <prvAddNewTaskToReadyList+0xd0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3301      	adds	r3, #1
 80038fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003978 <prvAddNewTaskToReadyList+0xd0>)
 80038fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <prvAddNewTaskToReadyList+0xd0>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390c:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <prvAddNewTaskToReadyList+0xd4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d903      	bls.n	800391c <prvAddNewTaskToReadyList+0x74>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	4a18      	ldr	r2, [pc, #96]	@ (800397c <prvAddNewTaskToReadyList+0xd4>)
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4a15      	ldr	r2, [pc, #84]	@ (8003980 <prvAddNewTaskToReadyList+0xd8>)
 800392a:	441a      	add	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	4619      	mov	r1, r3
 8003932:	4610      	mov	r0, r2
 8003934:	f7fe fdcf 	bl	80024d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003938:	f001 fb48 	bl	8004fcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800393c:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <prvAddNewTaskToReadyList+0xcc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <prvAddNewTaskToReadyList+0xc8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	429a      	cmp	r2, r3
 8003950:	d207      	bcs.n	8003962 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003952:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <prvAddNewTaskToReadyList+0xdc>)
 8003954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000cbc 	.word	0x20000cbc
 8003970:	200007e8 	.word	0x200007e8
 8003974:	20000cc8 	.word	0x20000cc8
 8003978:	20000cd8 	.word	0x20000cd8
 800397c:	20000cc4 	.word	0x20000cc4
 8003980:	200007ec 	.word	0x200007ec
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800399a:	4b14      	ldr	r3, [pc, #80]	@ (80039ec <vTaskDelay+0x64>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <vTaskDelay+0x32>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	60bb      	str	r3, [r7, #8]
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	e7fd      	b.n	80039b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039ba:	f000 f883 	bl	8003ac4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039be:	2100      	movs	r1, #0
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fdf3 	bl	80045ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039c6:	f000 f88b 	bl	8003ae0 <xTaskResumeAll>
 80039ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d107      	bne.n	80039e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80039d2:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <vTaskDelay+0x68>)
 80039d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000ce4 	.word	0x20000ce4
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	@ 0x28
 80039f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a02:	463a      	mov	r2, r7
 8003a04:	1d39      	adds	r1, r7, #4
 8003a06:	f107 0308 	add.w	r3, r7, #8
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fd02 	bl	8002414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a10:	6839      	ldr	r1, [r7, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	9202      	str	r2, [sp, #8]
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	460a      	mov	r2, r1
 8003a22:	4922      	ldr	r1, [pc, #136]	@ (8003aac <vTaskStartScheduler+0xb8>)
 8003a24:	4822      	ldr	r0, [pc, #136]	@ (8003ab0 <vTaskStartScheduler+0xbc>)
 8003a26:	f7ff fe09 	bl	800363c <xTaskCreateStatic>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4a21      	ldr	r2, [pc, #132]	@ (8003ab4 <vTaskStartScheduler+0xc0>)
 8003a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a30:	4b20      	ldr	r3, [pc, #128]	@ (8003ab4 <vTaskStartScheduler+0xc0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e001      	b.n	8003a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d102      	bne.n	8003a4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a48:	f000 fe04 	bl	8004654 <xTimerCreateTimerTask>
 8003a4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d116      	bne.n	8003a82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	613b      	str	r3, [r7, #16]
}
 8003a66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a68:	4b13      	ldr	r3, [pc, #76]	@ (8003ab8 <vTaskStartScheduler+0xc4>)
 8003a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a70:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <vTaskStartScheduler+0xc8>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a76:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <vTaskStartScheduler+0xcc>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a7c:	f001 f9d0 	bl	8004e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a80:	e00f      	b.n	8003aa2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d10b      	bne.n	8003aa2 <vTaskStartScheduler+0xae>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	60fb      	str	r3, [r7, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	e7fd      	b.n	8003a9e <vTaskStartScheduler+0xaa>
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	08006588 	.word	0x08006588
 8003ab0:	080040e5 	.word	0x080040e5
 8003ab4:	20000ce0 	.word	0x20000ce0
 8003ab8:	20000cdc 	.word	0x20000cdc
 8003abc:	20000cc8 	.word	0x20000cc8
 8003ac0:	20000cc0 	.word	0x20000cc0

08003ac4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ac8:	4b04      	ldr	r3, [pc, #16]	@ (8003adc <vTaskSuspendAll+0x18>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	4a03      	ldr	r2, [pc, #12]	@ (8003adc <vTaskSuspendAll+0x18>)
 8003ad0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ad2:	bf00      	nop
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	20000ce4 	.word	0x20000ce4

08003ae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003aee:	4b42      	ldr	r3, [pc, #264]	@ (8003bf8 <xTaskResumeAll+0x118>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <xTaskResumeAll+0x2e>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	603b      	str	r3, [r7, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	e7fd      	b.n	8003b0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b0e:	f001 fa2b 	bl	8004f68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b12:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <xTaskResumeAll+0x118>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	4a37      	ldr	r2, [pc, #220]	@ (8003bf8 <xTaskResumeAll+0x118>)
 8003b1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1c:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <xTaskResumeAll+0x118>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d162      	bne.n	8003bea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b24:	4b35      	ldr	r3, [pc, #212]	@ (8003bfc <xTaskResumeAll+0x11c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d05e      	beq.n	8003bea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b2c:	e02f      	b.n	8003b8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2e:	4b34      	ldr	r3, [pc, #208]	@ (8003c00 <xTaskResumeAll+0x120>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3318      	adds	r3, #24
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fd28 	bl	8002590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fd23 	bl	8002590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c04 <xTaskResumeAll+0x124>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d903      	bls.n	8003b5e <xTaskResumeAll+0x7e>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c04 <xTaskResumeAll+0x124>)
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4a27      	ldr	r2, [pc, #156]	@ (8003c08 <xTaskResumeAll+0x128>)
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4619      	mov	r1, r3
 8003b74:	4610      	mov	r0, r2
 8003b76:	f7fe fcae 	bl	80024d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7e:	4b23      	ldr	r3, [pc, #140]	@ (8003c0c <xTaskResumeAll+0x12c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d302      	bcc.n	8003b8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b88:	4b21      	ldr	r3, [pc, #132]	@ (8003c10 <xTaskResumeAll+0x130>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c00 <xTaskResumeAll+0x120>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1cb      	bne.n	8003b2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b9c:	f000 fb58 	bl	8004250 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c14 <xTaskResumeAll+0x134>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d010      	beq.n	8003bce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bac:	f000 f846 	bl	8003c3c <xTaskIncrementTick>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003bb6:	4b16      	ldr	r3, [pc, #88]	@ (8003c10 <xTaskResumeAll+0x130>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f1      	bne.n	8003bac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <xTaskResumeAll+0x134>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bce:	4b10      	ldr	r3, [pc, #64]	@ (8003c10 <xTaskResumeAll+0x130>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bda:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <xTaskResumeAll+0x138>)
 8003bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bea:	f001 f9ef 	bl	8004fcc <vPortExitCritical>

	return xAlreadyYielded;
 8003bee:	68bb      	ldr	r3, [r7, #8]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000ce4 	.word	0x20000ce4
 8003bfc:	20000cbc 	.word	0x20000cbc
 8003c00:	20000c7c 	.word	0x20000c7c
 8003c04:	20000cc4 	.word	0x20000cc4
 8003c08:	200007ec 	.word	0x200007ec
 8003c0c:	200007e8 	.word	0x200007e8
 8003c10:	20000cd0 	.word	0x20000cd0
 8003c14:	20000ccc 	.word	0x20000ccc
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c22:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <xTaskGetTickCount+0x1c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c28:	687b      	ldr	r3, [r7, #4]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000cc0 	.word	0x20000cc0

08003c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c46:	4b4f      	ldr	r3, [pc, #316]	@ (8003d84 <xTaskIncrementTick+0x148>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 8090 	bne.w	8003d70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c50:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <xTaskIncrementTick+0x14c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c58:	4a4b      	ldr	r2, [pc, #300]	@ (8003d88 <xTaskIncrementTick+0x14c>)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d121      	bne.n	8003ca8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c64:	4b49      	ldr	r3, [pc, #292]	@ (8003d8c <xTaskIncrementTick+0x150>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	603b      	str	r3, [r7, #0]
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	e7fd      	b.n	8003c82 <xTaskIncrementTick+0x46>
 8003c86:	4b41      	ldr	r3, [pc, #260]	@ (8003d8c <xTaskIncrementTick+0x150>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	4b40      	ldr	r3, [pc, #256]	@ (8003d90 <xTaskIncrementTick+0x154>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3e      	ldr	r2, [pc, #248]	@ (8003d8c <xTaskIncrementTick+0x150>)
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4a3e      	ldr	r2, [pc, #248]	@ (8003d90 <xTaskIncrementTick+0x154>)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d94 <xTaskIncrementTick+0x158>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8003d94 <xTaskIncrementTick+0x158>)
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	f000 fad4 	bl	8004250 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8003d98 <xTaskIncrementTick+0x15c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d349      	bcc.n	8003d46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb2:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <xTaskIncrementTick+0x150>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cbc:	4b36      	ldr	r3, [pc, #216]	@ (8003d98 <xTaskIncrementTick+0x15c>)
 8003cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc2:	601a      	str	r2, [r3, #0]
					break;
 8003cc4:	e03f      	b.n	8003d46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc6:	4b31      	ldr	r3, [pc, #196]	@ (8003d8c <xTaskIncrementTick+0x150>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d203      	bcs.n	8003ce6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cde:	4a2e      	ldr	r2, [pc, #184]	@ (8003d98 <xTaskIncrementTick+0x15c>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ce4:	e02f      	b.n	8003d46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fc50 	bl	8002590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fc47 	bl	8002590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d06:	4b25      	ldr	r3, [pc, #148]	@ (8003d9c <xTaskIncrementTick+0x160>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d903      	bls.n	8003d16 <xTaskIncrementTick+0xda>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	4a22      	ldr	r2, [pc, #136]	@ (8003d9c <xTaskIncrementTick+0x160>)
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4a1f      	ldr	r2, [pc, #124]	@ (8003da0 <xTaskIncrementTick+0x164>)
 8003d24:	441a      	add	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe fbd2 	bl	80024d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d36:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <xTaskIncrementTick+0x168>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d3b8      	bcc.n	8003cb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d44:	e7b5      	b.n	8003cb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d46:	4b17      	ldr	r3, [pc, #92]	@ (8003da4 <xTaskIncrementTick+0x168>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4c:	4914      	ldr	r1, [pc, #80]	@ (8003da0 <xTaskIncrementTick+0x164>)
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d901      	bls.n	8003d62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d62:	4b11      	ldr	r3, [pc, #68]	@ (8003da8 <xTaskIncrementTick+0x16c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e004      	b.n	8003d7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d70:	4b0e      	ldr	r3, [pc, #56]	@ (8003dac <xTaskIncrementTick+0x170>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	4a0d      	ldr	r2, [pc, #52]	@ (8003dac <xTaskIncrementTick+0x170>)
 8003d78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d7a:	697b      	ldr	r3, [r7, #20]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000ce4 	.word	0x20000ce4
 8003d88:	20000cc0 	.word	0x20000cc0
 8003d8c:	20000c74 	.word	0x20000c74
 8003d90:	20000c78 	.word	0x20000c78
 8003d94:	20000cd4 	.word	0x20000cd4
 8003d98:	20000cdc 	.word	0x20000cdc
 8003d9c:	20000cc4 	.word	0x20000cc4
 8003da0:	200007ec 	.word	0x200007ec
 8003da4:	200007e8 	.word	0x200007e8
 8003da8:	20000cd0 	.word	0x20000cd0
 8003dac:	20000ccc 	.word	0x20000ccc

08003db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003db6:	4b28      	ldr	r3, [pc, #160]	@ (8003e58 <vTaskSwitchContext+0xa8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dbe:	4b27      	ldr	r3, [pc, #156]	@ (8003e5c <vTaskSwitchContext+0xac>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dc4:	e042      	b.n	8003e4c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003dc6:	4b25      	ldr	r3, [pc, #148]	@ (8003e5c <vTaskSwitchContext+0xac>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dcc:	4b24      	ldr	r3, [pc, #144]	@ (8003e60 <vTaskSwitchContext+0xb0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e011      	b.n	8003df8 <vTaskSwitchContext+0x48>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10b      	bne.n	8003df2 <vTaskSwitchContext+0x42>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	607b      	str	r3, [r7, #4]
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	e7fd      	b.n	8003dee <vTaskSwitchContext+0x3e>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	491a      	ldr	r1, [pc, #104]	@ (8003e64 <vTaskSwitchContext+0xb4>)
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0e3      	beq.n	8003dd4 <vTaskSwitchContext+0x24>
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <vTaskSwitchContext+0xb4>)
 8003e18:	4413      	add	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d104      	bne.n	8003e3c <vTaskSwitchContext+0x8c>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4a09      	ldr	r2, [pc, #36]	@ (8003e68 <vTaskSwitchContext+0xb8>)
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	4a06      	ldr	r2, [pc, #24]	@ (8003e60 <vTaskSwitchContext+0xb0>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6013      	str	r3, [r2, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	20000ce4 	.word	0x20000ce4
 8003e5c:	20000cd0 	.word	0x20000cd0
 8003e60:	20000cc4 	.word	0x20000cc4
 8003e64:	200007ec 	.word	0x200007ec
 8003e68:	200007e8 	.word	0x200007e8

08003e6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	e7fd      	b.n	8003e90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e94:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <vTaskPlaceOnEventList+0x48>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3318      	adds	r3, #24
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7fe fb3e 	bl	800251e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	6838      	ldr	r0, [r7, #0]
 8003ea6:	f000 fb81 	bl	80045ac <prvAddCurrentTaskToDelayedList>
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200007e8 	.word	0x200007e8

08003eb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	617b      	str	r3, [r7, #20]
}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	e7fd      	b.n	8003ede <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f0c <vTaskPlaceOnEventListRestricted+0x54>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3318      	adds	r3, #24
 8003ee8:	4619      	mov	r1, r3
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7fe faf3 	bl	80024d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	68b8      	ldr	r0, [r7, #8]
 8003f00:	f000 fb54 	bl	80045ac <prvAddCurrentTaskToDelayedList>
	}
 8003f04:	bf00      	nop
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200007e8 	.word	0x200007e8

08003f10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60fb      	str	r3, [r7, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	e7fd      	b.n	8003f3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	3318      	adds	r3, #24
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fb24 	bl	8002590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f48:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <xTaskRemoveFromEventList+0xb0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11d      	bne.n	8003f8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fb1b 	bl	8002590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5e:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <xTaskRemoveFromEventList+0xb4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d903      	bls.n	8003f6e <xTaskRemoveFromEventList+0x5e>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6a:	4a16      	ldr	r2, [pc, #88]	@ (8003fc4 <xTaskRemoveFromEventList+0xb4>)
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4a13      	ldr	r2, [pc, #76]	@ (8003fc8 <xTaskRemoveFromEventList+0xb8>)
 8003f7c:	441a      	add	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f7fe faa6 	bl	80024d6 <vListInsertEnd>
 8003f8a:	e005      	b.n	8003f98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3318      	adds	r3, #24
 8003f90:	4619      	mov	r1, r3
 8003f92:	480e      	ldr	r0, [pc, #56]	@ (8003fcc <xTaskRemoveFromEventList+0xbc>)
 8003f94:	f7fe fa9f 	bl	80024d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <xTaskRemoveFromEventList+0xc0>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d905      	bls.n	8003fb2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003faa:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <xTaskRemoveFromEventList+0xc4>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e001      	b.n	8003fb6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fb6:	697b      	ldr	r3, [r7, #20]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000ce4 	.word	0x20000ce4
 8003fc4:	20000cc4 	.word	0x20000cc4
 8003fc8:	200007ec 	.word	0x200007ec
 8003fcc:	20000c7c 	.word	0x20000c7c
 8003fd0:	200007e8 	.word	0x200007e8
 8003fd4:	20000cd0 	.word	0x20000cd0

08003fd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <vTaskInternalSetTimeOutState+0x24>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	@ (8004000 <vTaskInternalSetTimeOutState+0x28>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	605a      	str	r2, [r3, #4]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	20000cd4 	.word	0x20000cd4
 8004000:	20000cc0 	.word	0x20000cc0

08004004 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	613b      	str	r3, [r7, #16]
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	60fb      	str	r3, [r7, #12]
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	e7fd      	b.n	8004046 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800404a:	f000 ff8d 	bl	8004f68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800404e:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <xTaskCheckForTimeOut+0xc0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d102      	bne.n	800406e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	e023      	b.n	80040b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <xTaskCheckForTimeOut+0xc4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d007      	beq.n	800408a <xTaskCheckForTimeOut+0x86>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e015      	b.n	80040b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	429a      	cmp	r2, r3
 8004092:	d20b      	bcs.n	80040ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	1ad2      	subs	r2, r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ff99 	bl	8003fd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	e004      	b.n	80040b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040b2:	2301      	movs	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040b6:	f000 ff89 	bl	8004fcc <vPortExitCritical>

	return xReturn;
 80040ba:	69fb      	ldr	r3, [r7, #28]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000cc0 	.word	0x20000cc0
 80040c8:	20000cd4 	.word	0x20000cd4

080040cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040d0:	4b03      	ldr	r3, [pc, #12]	@ (80040e0 <vTaskMissedYield+0x14>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	20000cd0 	.word	0x20000cd0

080040e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040ec:	f000 f852 	bl	8004194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040f0:	4b06      	ldr	r3, [pc, #24]	@ (800410c <prvIdleTask+0x28>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d9f9      	bls.n	80040ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <prvIdleTask+0x2c>)
 80040fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004108:	e7f0      	b.n	80040ec <prvIdleTask+0x8>
 800410a:	bf00      	nop
 800410c:	200007ec 	.word	0x200007ec
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	e00c      	b.n	800413a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4a12      	ldr	r2, [pc, #72]	@ (8004174 <prvInitialiseTaskLists+0x60>)
 800412c:	4413      	add	r3, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe f9a4 	bl	800247c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3301      	adds	r3, #1
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b37      	cmp	r3, #55	@ 0x37
 800413e:	d9ef      	bls.n	8004120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004140:	480d      	ldr	r0, [pc, #52]	@ (8004178 <prvInitialiseTaskLists+0x64>)
 8004142:	f7fe f99b 	bl	800247c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004146:	480d      	ldr	r0, [pc, #52]	@ (800417c <prvInitialiseTaskLists+0x68>)
 8004148:	f7fe f998 	bl	800247c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800414c:	480c      	ldr	r0, [pc, #48]	@ (8004180 <prvInitialiseTaskLists+0x6c>)
 800414e:	f7fe f995 	bl	800247c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004152:	480c      	ldr	r0, [pc, #48]	@ (8004184 <prvInitialiseTaskLists+0x70>)
 8004154:	f7fe f992 	bl	800247c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004158:	480b      	ldr	r0, [pc, #44]	@ (8004188 <prvInitialiseTaskLists+0x74>)
 800415a:	f7fe f98f 	bl	800247c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800415e:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <prvInitialiseTaskLists+0x78>)
 8004160:	4a05      	ldr	r2, [pc, #20]	@ (8004178 <prvInitialiseTaskLists+0x64>)
 8004162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004164:	4b0a      	ldr	r3, [pc, #40]	@ (8004190 <prvInitialiseTaskLists+0x7c>)
 8004166:	4a05      	ldr	r2, [pc, #20]	@ (800417c <prvInitialiseTaskLists+0x68>)
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	200007ec 	.word	0x200007ec
 8004178:	20000c4c 	.word	0x20000c4c
 800417c:	20000c60 	.word	0x20000c60
 8004180:	20000c7c 	.word	0x20000c7c
 8004184:	20000c90 	.word	0x20000c90
 8004188:	20000ca8 	.word	0x20000ca8
 800418c:	20000c74 	.word	0x20000c74
 8004190:	20000c78 	.word	0x20000c78

08004194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800419a:	e019      	b.n	80041d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800419c:	f000 fee4 	bl	8004f68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a0:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <prvCheckTasksWaitingTermination+0x50>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe f9ef 	bl	8002590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041b2:	4b0d      	ldr	r3, [pc, #52]	@ (80041e8 <prvCheckTasksWaitingTermination+0x54>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	4a0b      	ldr	r2, [pc, #44]	@ (80041e8 <prvCheckTasksWaitingTermination+0x54>)
 80041ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041bc:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <prvCheckTasksWaitingTermination+0x58>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	4a0a      	ldr	r2, [pc, #40]	@ (80041ec <prvCheckTasksWaitingTermination+0x58>)
 80041c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041c6:	f000 ff01 	bl	8004fcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f810 	bl	80041f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d0:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <prvCheckTasksWaitingTermination+0x58>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e1      	bne.n	800419c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000c90 	.word	0x20000c90
 80041e8:	20000cbc 	.word	0x20000cbc
 80041ec:	20000ca4 	.word	0x20000ca4

080041f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	4618      	mov	r0, r3
 8004208:	f001 f89e 	bl	8005348 <vPortFree>
				vPortFree( pxTCB );
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f001 f89b 	bl	8005348 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004212:	e019      	b.n	8004248 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800421a:	2b01      	cmp	r3, #1
 800421c:	d103      	bne.n	8004226 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f001 f892 	bl	8005348 <vPortFree>
	}
 8004224:	e010      	b.n	8004248 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800422c:	2b02      	cmp	r3, #2
 800422e:	d00b      	beq.n	8004248 <prvDeleteTCB+0x58>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <prvDeleteTCB+0x54>
	}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004256:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <prvResetNextTaskUnblockTime+0x38>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004260:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <prvResetNextTaskUnblockTime+0x3c>)
 8004262:	f04f 32ff 	mov.w	r2, #4294967295
 8004266:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004268:	e008      	b.n	800427c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800426a:	4b07      	ldr	r3, [pc, #28]	@ (8004288 <prvResetNextTaskUnblockTime+0x38>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a04      	ldr	r2, [pc, #16]	@ (800428c <prvResetNextTaskUnblockTime+0x3c>)
 800427a:	6013      	str	r3, [r2, #0]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000c74 	.word	0x20000c74
 800428c:	20000cdc 	.word	0x20000cdc

08004290 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004296:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <xTaskGetSchedulerState+0x34>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800429e:	2301      	movs	r3, #1
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	e008      	b.n	80042b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a4:	4b08      	ldr	r3, [pc, #32]	@ (80042c8 <xTaskGetSchedulerState+0x38>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042ac:	2302      	movs	r3, #2
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	e001      	b.n	80042b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042b6:	687b      	ldr	r3, [r7, #4]
	}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	20000cc8 	.word	0x20000cc8
 80042c8:	20000ce4 	.word	0x20000ce4

080042cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d051      	beq.n	8004386 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004390 <xTaskPriorityInherit+0xc4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d241      	bcs.n	8004374 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	db06      	blt.n	8004306 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f8:	4b25      	ldr	r3, [pc, #148]	@ (8004390 <xTaskPriorityInherit+0xc4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6959      	ldr	r1, [r3, #20]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4a1f      	ldr	r2, [pc, #124]	@ (8004394 <xTaskPriorityInherit+0xc8>)
 8004318:	4413      	add	r3, r2
 800431a:	4299      	cmp	r1, r3
 800431c:	d122      	bne.n	8004364 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3304      	adds	r3, #4
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe f934 	bl	8002590 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004328:	4b19      	ldr	r3, [pc, #100]	@ (8004390 <xTaskPriorityInherit+0xc4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004336:	4b18      	ldr	r3, [pc, #96]	@ (8004398 <xTaskPriorityInherit+0xcc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d903      	bls.n	8004346 <xTaskPriorityInherit+0x7a>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004342:	4a15      	ldr	r2, [pc, #84]	@ (8004398 <xTaskPriorityInherit+0xcc>)
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4a10      	ldr	r2, [pc, #64]	@ (8004394 <xTaskPriorityInherit+0xc8>)
 8004354:	441a      	add	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	3304      	adds	r3, #4
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f7fe f8ba 	bl	80024d6 <vListInsertEnd>
 8004362:	e004      	b.n	800436e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004364:	4b0a      	ldr	r3, [pc, #40]	@ (8004390 <xTaskPriorityInherit+0xc4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800436e:	2301      	movs	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e008      	b.n	8004386 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <xTaskPriorityInherit+0xc4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	429a      	cmp	r2, r3
 8004380:	d201      	bcs.n	8004386 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004382:	2301      	movs	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004386:	68fb      	ldr	r3, [r7, #12]
	}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200007e8 	.word	0x200007e8
 8004394:	200007ec 	.word	0x200007ec
 8004398:	20000cc4 	.word	0x20000cc4

0800439c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d058      	beq.n	8004464 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004470 <xTaskPriorityDisinherit+0xd4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d00b      	beq.n	80043d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	60fb      	str	r3, [r7, #12]
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	60bb      	str	r3, [r7, #8]
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f8:	1e5a      	subs	r2, r3, #1
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004406:	429a      	cmp	r2, r3
 8004408:	d02c      	beq.n	8004464 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440e:	2b00      	cmp	r3, #0
 8004410:	d128      	bne.n	8004464 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3304      	adds	r3, #4
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe f8ba 	bl	8002590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004434:	4b0f      	ldr	r3, [pc, #60]	@ (8004474 <xTaskPriorityDisinherit+0xd8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d903      	bls.n	8004444 <xTaskPriorityDisinherit+0xa8>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004440:	4a0c      	ldr	r2, [pc, #48]	@ (8004474 <xTaskPriorityDisinherit+0xd8>)
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4a09      	ldr	r2, [pc, #36]	@ (8004478 <xTaskPriorityDisinherit+0xdc>)
 8004452:	441a      	add	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7fe f83b 	bl	80024d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004464:	697b      	ldr	r3, [r7, #20]
	}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	200007e8 	.word	0x200007e8
 8004474:	20000cc4 	.word	0x20000cc4
 8004478:	200007ec 	.word	0x200007ec

0800447c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d06c      	beq.n	800456e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10b      	bne.n	80044b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	60fb      	str	r3, [r7, #12]
}
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
 80044b2:	e7fd      	b.n	80044b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d902      	bls.n	80044c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	e002      	b.n	80044ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d04c      	beq.n	800456e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d147      	bne.n	800456e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044de:	4b26      	ldr	r3, [pc, #152]	@ (8004578 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d10b      	bne.n	8004500 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60bb      	str	r3, [r7, #8]
}
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
 80044fe:	e7fd      	b.n	80044fc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	db04      	blt.n	800451e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	6959      	ldr	r1, [r3, #20]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4a13      	ldr	r2, [pc, #76]	@ (800457c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800452e:	4413      	add	r3, r2
 8004530:	4299      	cmp	r1, r3
 8004532:	d11c      	bne.n	800456e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	3304      	adds	r3, #4
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe f829 	bl	8002590 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004542:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d903      	bls.n	8004552 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	4a0c      	ldr	r2, [pc, #48]	@ (8004580 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4a07      	ldr	r2, [pc, #28]	@ (800457c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004560:	441a      	add	r2, r3
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f7fd ffb4 	bl	80024d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800456e:	bf00      	nop
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	200007e8 	.word	0x200007e8
 800457c:	200007ec 	.word	0x200007ec
 8004580:	20000cc4 	.word	0x20000cc4

08004584 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004588:	4b07      	ldr	r3, [pc, #28]	@ (80045a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004596:	3201      	adds	r2, #1
 8004598:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800459a:	4b03      	ldr	r3, [pc, #12]	@ (80045a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800459c:	681b      	ldr	r3, [r3, #0]
	}
 800459e:	4618      	mov	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	200007e8 	.word	0x200007e8

080045ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045b6:	4b21      	ldr	r3, [pc, #132]	@ (800463c <prvAddCurrentTaskToDelayedList+0x90>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045bc:	4b20      	ldr	r3, [pc, #128]	@ (8004640 <prvAddCurrentTaskToDelayedList+0x94>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd ffe4 	bl	8002590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d10a      	bne.n	80045e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004640 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4819      	ldr	r0, [pc, #100]	@ (8004644 <prvAddCurrentTaskToDelayedList+0x98>)
 80045e0:	f7fd ff79 	bl	80024d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045e4:	e026      	b.n	8004634 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4413      	add	r3, r2
 80045ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045ee:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <prvAddCurrentTaskToDelayedList+0x94>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d209      	bcs.n	8004612 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045fe:	4b12      	ldr	r3, [pc, #72]	@ (8004648 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b0f      	ldr	r3, [pc, #60]	@ (8004640 <prvAddCurrentTaskToDelayedList+0x94>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f7fd ff87 	bl	800251e <vListInsert>
}
 8004610:	e010      	b.n	8004634 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004612:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <prvAddCurrentTaskToDelayedList+0x94>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f7fd ff7d 	bl	800251e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004624:	4b0a      	ldr	r3, [pc, #40]	@ (8004650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	d202      	bcs.n	8004634 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800462e:	4a08      	ldr	r2, [pc, #32]	@ (8004650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	6013      	str	r3, [r2, #0]
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20000cc0 	.word	0x20000cc0
 8004640:	200007e8 	.word	0x200007e8
 8004644:	20000ca8 	.word	0x20000ca8
 8004648:	20000c78 	.word	0x20000c78
 800464c:	20000c74 	.word	0x20000c74
 8004650:	20000cdc 	.word	0x20000cdc

08004654 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	@ 0x28
 8004658:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800465e:	f000 fb13 	bl	8004c88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004662:	4b1d      	ldr	r3, [pc, #116]	@ (80046d8 <xTimerCreateTimerTask+0x84>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d021      	beq.n	80046ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004672:	1d3a      	adds	r2, r7, #4
 8004674:	f107 0108 	add.w	r1, r7, #8
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	4618      	mov	r0, r3
 800467e:	f7fd fee3 	bl	8002448 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	9202      	str	r2, [sp, #8]
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	2302      	movs	r3, #2
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	2300      	movs	r3, #0
 8004692:	460a      	mov	r2, r1
 8004694:	4911      	ldr	r1, [pc, #68]	@ (80046dc <xTimerCreateTimerTask+0x88>)
 8004696:	4812      	ldr	r0, [pc, #72]	@ (80046e0 <xTimerCreateTimerTask+0x8c>)
 8004698:	f7fe ffd0 	bl	800363c <xTaskCreateStatic>
 800469c:	4603      	mov	r3, r0
 800469e:	4a11      	ldr	r2, [pc, #68]	@ (80046e4 <xTimerCreateTimerTask+0x90>)
 80046a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046a2:	4b10      	ldr	r3, [pc, #64]	@ (80046e4 <xTimerCreateTimerTask+0x90>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046aa:	2301      	movs	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10b      	bne.n	80046cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	613b      	str	r3, [r7, #16]
}
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046cc:	697b      	ldr	r3, [r7, #20]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000d18 	.word	0x20000d18
 80046dc:	08006590 	.word	0x08006590
 80046e0:	08004821 	.word	0x08004821
 80046e4:	20000d1c 	.word	0x20000d1c

080046e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	@ 0x28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <xTimerGenericCommand+0x30>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	623b      	str	r3, [r7, #32]
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004718:	4b19      	ldr	r3, [pc, #100]	@ (8004780 <xTimerGenericCommand+0x98>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02a      	beq.n	8004776 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b05      	cmp	r3, #5
 8004730:	dc18      	bgt.n	8004764 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004732:	f7ff fdad 	bl	8004290 <xTaskGetSchedulerState>
 8004736:	4603      	mov	r3, r0
 8004738:	2b02      	cmp	r3, #2
 800473a:	d109      	bne.n	8004750 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800473c:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <xTimerGenericCommand+0x98>)
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	f107 0110 	add.w	r1, r7, #16
 8004744:	2300      	movs	r3, #0
 8004746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004748:	f7fe f900 	bl	800294c <xQueueGenericSend>
 800474c:	6278      	str	r0, [r7, #36]	@ 0x24
 800474e:	e012      	b.n	8004776 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004750:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <xTimerGenericCommand+0x98>)
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	f107 0110 	add.w	r1, r7, #16
 8004758:	2300      	movs	r3, #0
 800475a:	2200      	movs	r2, #0
 800475c:	f7fe f8f6 	bl	800294c <xQueueGenericSend>
 8004760:	6278      	str	r0, [r7, #36]	@ 0x24
 8004762:	e008      	b.n	8004776 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004764:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <xTimerGenericCommand+0x98>)
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	f107 0110 	add.w	r1, r7, #16
 800476c:	2300      	movs	r3, #0
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	f7fe f9ee 	bl	8002b50 <xQueueGenericSendFromISR>
 8004774:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	@ 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20000d18 	.word	0x20000d18

08004784 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478e:	4b23      	ldr	r3, [pc, #140]	@ (800481c <prvProcessExpiredTimer+0x98>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	3304      	adds	r3, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7fd fef7 	bl	8002590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d023      	beq.n	80047f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	18d1      	adds	r1, r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	6978      	ldr	r0, [r7, #20]
 80047be:	f000 f8d5 	bl	800496c <prvInsertTimerInActiveList>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047c8:	2300      	movs	r3, #0
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2300      	movs	r3, #0
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	2100      	movs	r1, #0
 80047d2:	6978      	ldr	r0, [r7, #20]
 80047d4:	f7ff ff88 	bl	80046e8 <xTimerGenericCommand>
 80047d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d114      	bne.n	800480a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	60fb      	str	r3, [r7, #12]
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	b2da      	uxtb	r2, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	4798      	blx	r3
}
 8004812:	bf00      	nop
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000d10 	.word	0x20000d10

08004820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004828:	f107 0308 	add.w	r3, r7, #8
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f859 	bl	80048e4 <prvGetNextExpireTime>
 8004832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4619      	mov	r1, r3
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f805 	bl	8004848 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800483e:	f000 f8d7 	bl	80049f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004842:	bf00      	nop
 8004844:	e7f0      	b.n	8004828 <prvTimerTask+0x8>
	...

08004848 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004852:	f7ff f937 	bl	8003ac4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f866 	bl	800492c <prvSampleTimeNow>
 8004860:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d130      	bne.n	80048ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10a      	bne.n	8004884 <prvProcessTimerOrBlockTask+0x3c>
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	429a      	cmp	r2, r3
 8004874:	d806      	bhi.n	8004884 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004876:	f7ff f933 	bl	8003ae0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800487a:	68f9      	ldr	r1, [r7, #12]
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff81 	bl	8004784 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004882:	e024      	b.n	80048ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800488a:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <prvProcessTimerOrBlockTask+0x90>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <prvProcessTimerOrBlockTask+0x50>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <prvProcessTimerOrBlockTask+0x52>
 8004898:	2300      	movs	r3, #0
 800489a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800489c:	4b0f      	ldr	r3, [pc, #60]	@ (80048dc <prvProcessTimerOrBlockTask+0x94>)
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7fe fe93 	bl	80035d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048ae:	f7ff f917 	bl	8003ae0 <xTaskResumeAll>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048b8:	4b09      	ldr	r3, [pc, #36]	@ (80048e0 <prvProcessTimerOrBlockTask+0x98>)
 80048ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	f3bf 8f6f 	isb	sy
}
 80048c8:	e001      	b.n	80048ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048ca:	f7ff f909 	bl	8003ae0 <xTaskResumeAll>
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000d14 	.word	0x20000d14
 80048dc:	20000d18 	.word	0x20000d18
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004928 <prvGetNextExpireTime+0x44>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <prvGetNextExpireTime+0x16>
 80048f6:	2201      	movs	r2, #1
 80048f8:	e000      	b.n	80048fc <prvGetNextExpireTime+0x18>
 80048fa:	2200      	movs	r2, #0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d105      	bne.n	8004914 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004908:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <prvGetNextExpireTime+0x44>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	e001      	b.n	8004918 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004918:	68fb      	ldr	r3, [r7, #12]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000d10 	.word	0x20000d10

0800492c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004934:	f7ff f972 	bl	8003c1c <xTaskGetTickCount>
 8004938:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800493a:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <prvSampleTimeNow+0x3c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	429a      	cmp	r2, r3
 8004942:	d205      	bcs.n	8004950 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004944:	f000 f93a 	bl	8004bbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e002      	b.n	8004956 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004956:	4a04      	ldr	r2, [pc, #16]	@ (8004968 <prvSampleTimeNow+0x3c>)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800495c:	68fb      	ldr	r3, [r7, #12]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000d20 	.word	0x20000d20

0800496c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	429a      	cmp	r2, r3
 8004990:	d812      	bhi.n	80049b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	1ad2      	subs	r2, r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e01b      	b.n	80049de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049a6:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <prvInsertTimerInActiveList+0x7c>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7fd fdb4 	bl	800251e <vListInsert>
 80049b6:	e012      	b.n	80049de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d206      	bcs.n	80049ce <prvInsertTimerInActiveList+0x62>
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d302      	bcc.n	80049ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049c8:	2301      	movs	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e007      	b.n	80049de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ce:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <prvInsertTimerInActiveList+0x80>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f7fd fda0 	bl	800251e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049de:	697b      	ldr	r3, [r7, #20]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000d14 	.word	0x20000d14
 80049ec:	20000d10 	.word	0x20000d10

080049f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08e      	sub	sp, #56	@ 0x38
 80049f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049f6:	e0ce      	b.n	8004b96 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	da19      	bge.n	8004a32 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	3304      	adds	r3, #4
 8004a02:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10b      	bne.n	8004a22 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	61fb      	str	r3, [r7, #28]
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	e7fd      	b.n	8004a1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a28:	6850      	ldr	r0, [r2, #4]
 8004a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a2c:	6892      	ldr	r2, [r2, #8]
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f2c0 80ae 	blt.w	8004b96 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fd fda0 	bl	8002590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a50:	463b      	mov	r3, r7
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff ff6a 	bl	800492c <prvSampleTimeNow>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b09      	cmp	r3, #9
 8004a5e:	f200 8097 	bhi.w	8004b90 <prvProcessReceivedCommands+0x1a0>
 8004a62:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <prvProcessReceivedCommands+0x78>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	08004a91 	.word	0x08004a91
 8004a70:	08004a91 	.word	0x08004a91
 8004a74:	08004b07 	.word	0x08004b07
 8004a78:	08004b1b 	.word	0x08004b1b
 8004a7c:	08004b67 	.word	0x08004b67
 8004a80:	08004a91 	.word	0x08004a91
 8004a84:	08004a91 	.word	0x08004a91
 8004a88:	08004b07 	.word	0x08004b07
 8004a8c:	08004b1b 	.word	0x08004b1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	18d1      	adds	r1, r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ab0:	f7ff ff5c 	bl	800496c <prvInsertTimerInActiveList>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d06c      	beq.n	8004b94 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ac0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d061      	beq.n	8004b94 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	441a      	add	r2, r3
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2300      	movs	r3, #0
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ae2:	f7ff fe01 	bl	80046e8 <xTimerGenericCommand>
 8004ae6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d152      	bne.n	8004b94 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	61bb      	str	r3, [r7, #24]
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	e7fd      	b.n	8004b02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004b18:	e03d      	b.n	8004b96 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10b      	bne.n	8004b52 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	617b      	str	r3, [r7, #20]
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	e7fd      	b.n	8004b4e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	18d1      	adds	r1, r2, r3
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b60:	f7ff ff04 	bl	800496c <prvInsertTimerInActiveList>
					break;
 8004b64:	e017      	b.n	8004b96 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004b74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b76:	f000 fbe7 	bl	8005348 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b7a:	e00c      	b.n	8004b96 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b82:	f023 0301 	bic.w	r3, r3, #1
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004b8e:	e002      	b.n	8004b96 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004b90:	bf00      	nop
 8004b92:	e000      	b.n	8004b96 <prvProcessReceivedCommands+0x1a6>
					break;
 8004b94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b96:	4b08      	ldr	r3, [pc, #32]	@ (8004bb8 <prvProcessReceivedCommands+0x1c8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1d39      	adds	r1, r7, #4
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe f904 	bl	8002dac <xQueueReceive>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f47f af26 	bne.w	80049f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	3730      	adds	r7, #48	@ 0x30
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000d18 	.word	0x20000d18

08004bbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bc2:	e049      	b.n	8004c58 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004c80 <prvSwitchTimerLists+0xc4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bce:	4b2c      	ldr	r3, [pc, #176]	@ (8004c80 <prvSwitchTimerLists+0xc4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fd fcd7 	bl	8002590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d02f      	beq.n	8004c58 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4413      	add	r3, r2
 8004c00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d90e      	bls.n	8004c28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c16:	4b1a      	ldr	r3, [pc, #104]	@ (8004c80 <prvSwitchTimerLists+0xc4>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4610      	mov	r0, r2
 8004c22:	f7fd fc7c 	bl	800251e <vListInsert>
 8004c26:	e017      	b.n	8004c58 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	2100      	movs	r1, #0
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fd58 	bl	80046e8 <xTimerGenericCommand>
 8004c38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	603b      	str	r3, [r7, #0]
}
 8004c52:	bf00      	nop
 8004c54:	bf00      	nop
 8004c56:	e7fd      	b.n	8004c54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c58:	4b09      	ldr	r3, [pc, #36]	@ (8004c80 <prvSwitchTimerLists+0xc4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1b0      	bne.n	8004bc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c62:	4b07      	ldr	r3, [pc, #28]	@ (8004c80 <prvSwitchTimerLists+0xc4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c68:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <prvSwitchTimerLists+0xc8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a04      	ldr	r2, [pc, #16]	@ (8004c80 <prvSwitchTimerLists+0xc4>)
 8004c6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c70:	4a04      	ldr	r2, [pc, #16]	@ (8004c84 <prvSwitchTimerLists+0xc8>)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6013      	str	r3, [r2, #0]
}
 8004c76:	bf00      	nop
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000d10 	.word	0x20000d10
 8004c84:	20000d14 	.word	0x20000d14

08004c88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c8e:	f000 f96b 	bl	8004f68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c92:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d120      	bne.n	8004cdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c9a:	4814      	ldr	r0, [pc, #80]	@ (8004cec <prvCheckForValidListAndQueue+0x64>)
 8004c9c:	f7fd fbee 	bl	800247c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ca0:	4813      	ldr	r0, [pc, #76]	@ (8004cf0 <prvCheckForValidListAndQueue+0x68>)
 8004ca2:	f7fd fbeb 	bl	800247c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ca6:	4b13      	ldr	r3, [pc, #76]	@ (8004cf4 <prvCheckForValidListAndQueue+0x6c>)
 8004ca8:	4a10      	ldr	r2, [pc, #64]	@ (8004cec <prvCheckForValidListAndQueue+0x64>)
 8004caa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004cac:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <prvCheckForValidListAndQueue+0x70>)
 8004cae:	4a10      	ldr	r2, [pc, #64]	@ (8004cf0 <prvCheckForValidListAndQueue+0x68>)
 8004cb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <prvCheckForValidListAndQueue+0x74>)
 8004cb8:	4a11      	ldr	r2, [pc, #68]	@ (8004d00 <prvCheckForValidListAndQueue+0x78>)
 8004cba:	2110      	movs	r1, #16
 8004cbc:	200a      	movs	r0, #10
 8004cbe:	f7fd fcfb 	bl	80026b8 <xQueueGenericCreateStatic>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4a08      	ldr	r2, [pc, #32]	@ (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004cc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004cc8:	4b07      	ldr	r3, [pc, #28]	@ (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cd0:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	490b      	ldr	r1, [pc, #44]	@ (8004d04 <prvCheckForValidListAndQueue+0x7c>)
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fc28 	bl	800352c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cdc:	f000 f976 	bl	8004fcc <vPortExitCritical>
}
 8004ce0:	bf00      	nop
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000d18 	.word	0x20000d18
 8004cec:	20000ce8 	.word	0x20000ce8
 8004cf0:	20000cfc 	.word	0x20000cfc
 8004cf4:	20000d10 	.word	0x20000d10
 8004cf8:	20000d14 	.word	0x20000d14
 8004cfc:	20000dc4 	.word	0x20000dc4
 8004d00:	20000d24 	.word	0x20000d24
 8004d04:	08006598 	.word	0x08006598

08004d08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b04      	subs	r3, #4
 8004d18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3b04      	subs	r3, #4
 8004d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f023 0201 	bic.w	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3b04      	subs	r3, #4
 8004d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d38:	4a0c      	ldr	r2, [pc, #48]	@ (8004d6c <pxPortInitialiseStack+0x64>)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3b14      	subs	r3, #20
 8004d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b04      	subs	r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f06f 0202 	mvn.w	r2, #2
 8004d56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b20      	subs	r3, #32
 8004d5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	08004d71 	.word	0x08004d71

08004d70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d7a:	4b13      	ldr	r3, [pc, #76]	@ (8004dc8 <prvTaskExitError+0x58>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d00b      	beq.n	8004d9c <prvTaskExitError+0x2c>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60fb      	str	r3, [r7, #12]
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <prvTaskExitError+0x28>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	60bb      	str	r3, [r7, #8]
}
 8004dae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004db0:	bf00      	nop
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0fc      	beq.n	8004db2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	2000000c 	.word	0x2000000c
 8004dcc:	00000000 	.word	0x00000000

08004dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004dd0:	4b07      	ldr	r3, [pc, #28]	@ (8004df0 <pxCurrentTCBConst2>)
 8004dd2:	6819      	ldr	r1, [r3, #0]
 8004dd4:	6808      	ldr	r0, [r1, #0]
 8004dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dda:	f380 8809 	msr	PSP, r0
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8811 	msr	BASEPRI, r0
 8004dea:	4770      	bx	lr
 8004dec:	f3af 8000 	nop.w

08004df0 <pxCurrentTCBConst2>:
 8004df0:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop

08004df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004df8:	4808      	ldr	r0, [pc, #32]	@ (8004e1c <prvPortStartFirstTask+0x24>)
 8004dfa:	6800      	ldr	r0, [r0, #0]
 8004dfc:	6800      	ldr	r0, [r0, #0]
 8004dfe:	f380 8808 	msr	MSP, r0
 8004e02:	f04f 0000 	mov.w	r0, #0
 8004e06:	f380 8814 	msr	CONTROL, r0
 8004e0a:	b662      	cpsie	i
 8004e0c:	b661      	cpsie	f
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	df00      	svc	0
 8004e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e1a:	bf00      	nop
 8004e1c:	e000ed08 	.word	0xe000ed08

08004e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e26:	4b47      	ldr	r3, [pc, #284]	@ (8004f44 <xPortStartScheduler+0x124>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a47      	ldr	r2, [pc, #284]	@ (8004f48 <xPortStartScheduler+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10b      	bne.n	8004e48 <xPortStartScheduler+0x28>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	613b      	str	r3, [r7, #16]
}
 8004e42:	bf00      	nop
 8004e44:	bf00      	nop
 8004e46:	e7fd      	b.n	8004e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e48:	4b3e      	ldr	r3, [pc, #248]	@ (8004f44 <xPortStartScheduler+0x124>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004f4c <xPortStartScheduler+0x12c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d10b      	bne.n	8004e6a <xPortStartScheduler+0x4a>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	60fb      	str	r3, [r7, #12]
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	e7fd      	b.n	8004e66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e6a:	4b39      	ldr	r3, [pc, #228]	@ (8004f50 <xPortStartScheduler+0x130>)
 8004e6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	22ff      	movs	r2, #255	@ 0xff
 8004e7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	4b31      	ldr	r3, [pc, #196]	@ (8004f54 <xPortStartScheduler+0x134>)
 8004e90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e92:	4b31      	ldr	r3, [pc, #196]	@ (8004f58 <xPortStartScheduler+0x138>)
 8004e94:	2207      	movs	r2, #7
 8004e96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e98:	e009      	b.n	8004eae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f58 <xPortStartScheduler+0x138>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f58 <xPortStartScheduler+0x138>)
 8004ea2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb6:	2b80      	cmp	r3, #128	@ 0x80
 8004eb8:	d0ef      	beq.n	8004e9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004eba:	4b27      	ldr	r3, [pc, #156]	@ (8004f58 <xPortStartScheduler+0x138>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f1c3 0307 	rsb	r3, r3, #7
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d00b      	beq.n	8004ede <xPortStartScheduler+0xbe>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	60bb      	str	r3, [r7, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	e7fd      	b.n	8004eda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ede:	4b1e      	ldr	r3, [pc, #120]	@ (8004f58 <xPortStartScheduler+0x138>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f58 <xPortStartScheduler+0x138>)
 8004ee6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <xPortStartScheduler+0x138>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ef0:	4a19      	ldr	r2, [pc, #100]	@ (8004f58 <xPortStartScheduler+0x138>)
 8004ef2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004efc:	4b17      	ldr	r3, [pc, #92]	@ (8004f5c <xPortStartScheduler+0x13c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a16      	ldr	r2, [pc, #88]	@ (8004f5c <xPortStartScheduler+0x13c>)
 8004f02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f08:	4b14      	ldr	r3, [pc, #80]	@ (8004f5c <xPortStartScheduler+0x13c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	@ (8004f5c <xPortStartScheduler+0x13c>)
 8004f0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004f12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f14:	f000 f8da 	bl	80050cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f18:	4b11      	ldr	r3, [pc, #68]	@ (8004f60 <xPortStartScheduler+0x140>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f1e:	f000 f8f9 	bl	8005114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f22:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <xPortStartScheduler+0x144>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a0f      	ldr	r2, [pc, #60]	@ (8004f64 <xPortStartScheduler+0x144>)
 8004f28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004f2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f2e:	f7ff ff63 	bl	8004df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f32:	f7fe ff3d 	bl	8003db0 <vTaskSwitchContext>
	prvTaskExitError();
 8004f36:	f7ff ff1b 	bl	8004d70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	e000ed00 	.word	0xe000ed00
 8004f48:	410fc271 	.word	0x410fc271
 8004f4c:	410fc270 	.word	0x410fc270
 8004f50:	e000e400 	.word	0xe000e400
 8004f54:	20000e14 	.word	0x20000e14
 8004f58:	20000e18 	.word	0x20000e18
 8004f5c:	e000ed20 	.word	0xe000ed20
 8004f60:	2000000c 	.word	0x2000000c
 8004f64:	e000ef34 	.word	0xe000ef34

08004f68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	607b      	str	r3, [r7, #4]
}
 8004f80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f82:	4b10      	ldr	r3, [pc, #64]	@ (8004fc4 <vPortEnterCritical+0x5c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3301      	adds	r3, #1
 8004f88:	4a0e      	ldr	r2, [pc, #56]	@ (8004fc4 <vPortEnterCritical+0x5c>)
 8004f8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <vPortEnterCritical+0x5c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d110      	bne.n	8004fb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f94:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc8 <vPortEnterCritical+0x60>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	603b      	str	r3, [r7, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <vPortEnterCritical+0x4a>
	}
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	2000000c 	.word	0x2000000c
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fd2:	4b12      	ldr	r3, [pc, #72]	@ (800501c <vPortExitCritical+0x50>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10b      	bne.n	8004ff2 <vPortExitCritical+0x26>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	607b      	str	r3, [r7, #4]
}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	e7fd      	b.n	8004fee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800501c <vPortExitCritical+0x50>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	4a08      	ldr	r2, [pc, #32]	@ (800501c <vPortExitCritical+0x50>)
 8004ffa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ffc:	4b07      	ldr	r3, [pc, #28]	@ (800501c <vPortExitCritical+0x50>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d105      	bne.n	8005010 <vPortExitCritical+0x44>
 8005004:	2300      	movs	r3, #0
 8005006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f383 8811 	msr	BASEPRI, r3
}
 800500e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	2000000c 	.word	0x2000000c

08005020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005020:	f3ef 8009 	mrs	r0, PSP
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	4b15      	ldr	r3, [pc, #84]	@ (8005080 <pxCurrentTCBConst>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	f01e 0f10 	tst.w	lr, #16
 8005030:	bf08      	it	eq
 8005032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503a:	6010      	str	r0, [r2, #0]
 800503c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005044:	f380 8811 	msr	BASEPRI, r0
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f7fe feae 	bl	8003db0 <vTaskSwitchContext>
 8005054:	f04f 0000 	mov.w	r0, #0
 8005058:	f380 8811 	msr	BASEPRI, r0
 800505c:	bc09      	pop	{r0, r3}
 800505e:	6819      	ldr	r1, [r3, #0]
 8005060:	6808      	ldr	r0, [r1, #0]
 8005062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005066:	f01e 0f10 	tst.w	lr, #16
 800506a:	bf08      	it	eq
 800506c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005070:	f380 8809 	msr	PSP, r0
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	f3af 8000 	nop.w

08005080 <pxCurrentTCBConst>:
 8005080:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
}
 80050a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050a2:	f7fe fdcb 	bl	8003c3c <xTaskIncrementTick>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ac:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <xPortSysTickHandler+0x40>)
 80050ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f383 8811 	msr	BASEPRI, r3
}
 80050be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	e000ed04 	.word	0xe000ed04

080050cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <vPortSetupTimerInterrupt+0x34>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <vPortSetupTimerInterrupt+0x38>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <vPortSetupTimerInterrupt+0x3c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0a      	ldr	r2, [pc, #40]	@ (800510c <vPortSetupTimerInterrupt+0x40>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	4a09      	ldr	r2, [pc, #36]	@ (8005110 <vPortSetupTimerInterrupt+0x44>)
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ee:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <vPortSetupTimerInterrupt+0x34>)
 80050f0:	2207      	movs	r2, #7
 80050f2:	601a      	str	r2, [r3, #0]
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000e010 	.word	0xe000e010
 8005104:	e000e018 	.word	0xe000e018
 8005108:	20000000 	.word	0x20000000
 800510c:	10624dd3 	.word	0x10624dd3
 8005110:	e000e014 	.word	0xe000e014

08005114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005114:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005124 <vPortEnableVFP+0x10>
 8005118:	6801      	ldr	r1, [r0, #0]
 800511a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800511e:	6001      	str	r1, [r0, #0]
 8005120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005122:	bf00      	nop
 8005124:	e000ed88 	.word	0xe000ed88

08005128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800512e:	f3ef 8305 	mrs	r3, IPSR
 8005132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b0f      	cmp	r3, #15
 8005138:	d915      	bls.n	8005166 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800513a:	4a18      	ldr	r2, [pc, #96]	@ (800519c <vPortValidateInterruptPriority+0x74>)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005144:	4b16      	ldr	r3, [pc, #88]	@ (80051a0 <vPortValidateInterruptPriority+0x78>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	7afa      	ldrb	r2, [r7, #11]
 800514a:	429a      	cmp	r2, r3
 800514c:	d20b      	bcs.n	8005166 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	607b      	str	r3, [r7, #4]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005166:	4b0f      	ldr	r3, [pc, #60]	@ (80051a4 <vPortValidateInterruptPriority+0x7c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800516e:	4b0e      	ldr	r3, [pc, #56]	@ (80051a8 <vPortValidateInterruptPriority+0x80>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d90b      	bls.n	800518e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	603b      	str	r3, [r7, #0]
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	e7fd      	b.n	800518a <vPortValidateInterruptPriority+0x62>
	}
 800518e:	bf00      	nop
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	e000e3f0 	.word	0xe000e3f0
 80051a0:	20000e14 	.word	0x20000e14
 80051a4:	e000ed0c 	.word	0xe000ed0c
 80051a8:	20000e18 	.word	0x20000e18

080051ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	@ 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051b8:	f7fe fc84 	bl	8003ac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005330 <pvPortMalloc+0x184>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051c4:	f000 f924 	bl	8005410 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051c8:	4b5a      	ldr	r3, [pc, #360]	@ (8005334 <pvPortMalloc+0x188>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f040 8095 	bne.w	8005300 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01e      	beq.n	800521a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80051dc:	2208      	movs	r2, #8
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d015      	beq.n	800521a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f023 0307 	bic.w	r3, r3, #7
 80051f4:	3308      	adds	r3, #8
 80051f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <pvPortMalloc+0x6e>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	617b      	str	r3, [r7, #20]
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	e7fd      	b.n	8005216 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d06f      	beq.n	8005300 <pvPortMalloc+0x154>
 8005220:	4b45      	ldr	r3, [pc, #276]	@ (8005338 <pvPortMalloc+0x18c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	429a      	cmp	r2, r3
 8005228:	d86a      	bhi.n	8005300 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800522a:	4b44      	ldr	r3, [pc, #272]	@ (800533c <pvPortMalloc+0x190>)
 800522c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800522e:	4b43      	ldr	r3, [pc, #268]	@ (800533c <pvPortMalloc+0x190>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005234:	e004      	b.n	8005240 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d903      	bls.n	8005252 <pvPortMalloc+0xa6>
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f1      	bne.n	8005236 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005252:	4b37      	ldr	r3, [pc, #220]	@ (8005330 <pvPortMalloc+0x184>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005258:	429a      	cmp	r2, r3
 800525a:	d051      	beq.n	8005300 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2208      	movs	r2, #8
 8005262:	4413      	add	r3, r2
 8005264:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	1ad2      	subs	r2, r2, r3
 8005276:	2308      	movs	r3, #8
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	429a      	cmp	r2, r3
 800527c:	d920      	bls.n	80052c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800527e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4413      	add	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <pvPortMalloc+0xfc>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	613b      	str	r3, [r7, #16]
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	1ad2      	subs	r2, r2, r3
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052ba:	69b8      	ldr	r0, [r7, #24]
 80052bc:	f000 f90a 	bl	80054d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005338 <pvPortMalloc+0x18c>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005338 <pvPortMalloc+0x18c>)
 80052cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005338 <pvPortMalloc+0x18c>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005340 <pvPortMalloc+0x194>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d203      	bcs.n	80052e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052da:	4b17      	ldr	r3, [pc, #92]	@ (8005338 <pvPortMalloc+0x18c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a18      	ldr	r2, [pc, #96]	@ (8005340 <pvPortMalloc+0x194>)
 80052e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	4b13      	ldr	r3, [pc, #76]	@ (8005334 <pvPortMalloc+0x188>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052f6:	4b13      	ldr	r3, [pc, #76]	@ (8005344 <pvPortMalloc+0x198>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3301      	adds	r3, #1
 80052fc:	4a11      	ldr	r2, [pc, #68]	@ (8005344 <pvPortMalloc+0x198>)
 80052fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005300:	f7fe fbee 	bl	8003ae0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <pvPortMalloc+0x17a>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60fb      	str	r3, [r7, #12]
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	e7fd      	b.n	8005322 <pvPortMalloc+0x176>
	return pvReturn;
 8005326:	69fb      	ldr	r3, [r7, #28]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3728      	adds	r7, #40	@ 0x28
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20004a24 	.word	0x20004a24
 8005334:	20004a38 	.word	0x20004a38
 8005338:	20004a28 	.word	0x20004a28
 800533c:	20004a1c 	.word	0x20004a1c
 8005340:	20004a2c 	.word	0x20004a2c
 8005344:	20004a30 	.word	0x20004a30

08005348 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d04f      	beq.n	80053fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800535a:	2308      	movs	r3, #8
 800535c:	425b      	negs	r3, r3
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4413      	add	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4b25      	ldr	r3, [pc, #148]	@ (8005404 <vPortFree+0xbc>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <vPortFree+0x46>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	60fb      	str	r3, [r7, #12]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <vPortFree+0x66>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60bb      	str	r3, [r7, #8]
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	e7fd      	b.n	80053aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	4b14      	ldr	r3, [pc, #80]	@ (8005404 <vPortFree+0xbc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01e      	beq.n	80053fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d11a      	bne.n	80053fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <vPortFree+0xbc>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	43db      	mvns	r3, r3
 80053ce:	401a      	ands	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053d4:	f7fe fb76 	bl	8003ac4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005408 <vPortFree+0xc0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4413      	add	r3, r2
 80053e2:	4a09      	ldr	r2, [pc, #36]	@ (8005408 <vPortFree+0xc0>)
 80053e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053e6:	6938      	ldr	r0, [r7, #16]
 80053e8:	f000 f874 	bl	80054d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053ec:	4b07      	ldr	r3, [pc, #28]	@ (800540c <vPortFree+0xc4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	4a06      	ldr	r2, [pc, #24]	@ (800540c <vPortFree+0xc4>)
 80053f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053f6:	f7fe fb73 	bl	8003ae0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053fa:	bf00      	nop
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20004a38 	.word	0x20004a38
 8005408:	20004a28 	.word	0x20004a28
 800540c:	20004a34 	.word	0x20004a34

08005410 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005416:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800541a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800541c:	4b27      	ldr	r3, [pc, #156]	@ (80054bc <prvHeapInit+0xac>)
 800541e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00c      	beq.n	8005444 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3307      	adds	r3, #7
 800542e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0307 	bic.w	r3, r3, #7
 8005436:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	4a1f      	ldr	r2, [pc, #124]	@ (80054bc <prvHeapInit+0xac>)
 8005440:	4413      	add	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005448:	4a1d      	ldr	r2, [pc, #116]	@ (80054c0 <prvHeapInit+0xb0>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800544e:	4b1c      	ldr	r3, [pc, #112]	@ (80054c0 <prvHeapInit+0xb0>)
 8005450:	2200      	movs	r2, #0
 8005452:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	4413      	add	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800545c:	2208      	movs	r2, #8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1a9b      	subs	r3, r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0307 	bic.w	r3, r3, #7
 800546a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4a15      	ldr	r2, [pc, #84]	@ (80054c4 <prvHeapInit+0xb4>)
 8005470:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005472:	4b14      	ldr	r3, [pc, #80]	@ (80054c4 <prvHeapInit+0xb4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2200      	movs	r2, #0
 8005478:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800547a:	4b12      	ldr	r3, [pc, #72]	@ (80054c4 <prvHeapInit+0xb4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	1ad2      	subs	r2, r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005490:	4b0c      	ldr	r3, [pc, #48]	@ (80054c4 <prvHeapInit+0xb4>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	4a0a      	ldr	r2, [pc, #40]	@ (80054c8 <prvHeapInit+0xb8>)
 800549e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	4a09      	ldr	r2, [pc, #36]	@ (80054cc <prvHeapInit+0xbc>)
 80054a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054a8:	4b09      	ldr	r3, [pc, #36]	@ (80054d0 <prvHeapInit+0xc0>)
 80054aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80054ae:	601a      	str	r2, [r3, #0]
}
 80054b0:	bf00      	nop
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	20000e1c 	.word	0x20000e1c
 80054c0:	20004a1c 	.word	0x20004a1c
 80054c4:	20004a24 	.word	0x20004a24
 80054c8:	20004a2c 	.word	0x20004a2c
 80054cc:	20004a28 	.word	0x20004a28
 80054d0:	20004a38 	.word	0x20004a38

080054d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054dc:	4b28      	ldr	r3, [pc, #160]	@ (8005580 <prvInsertBlockIntoFreeList+0xac>)
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	e002      	b.n	80054e8 <prvInsertBlockIntoFreeList+0x14>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d8f7      	bhi.n	80054e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4413      	add	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d108      	bne.n	8005516 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	441a      	add	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d118      	bne.n	800555c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b15      	ldr	r3, [pc, #84]	@ (8005584 <prvInsertBlockIntoFreeList+0xb0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d00d      	beq.n	8005552 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	441a      	add	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e008      	b.n	8005564 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005552:	4b0c      	ldr	r3, [pc, #48]	@ (8005584 <prvInsertBlockIntoFreeList+0xb0>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e003      	b.n	8005564 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	429a      	cmp	r2, r3
 800556a:	d002      	beq.n	8005572 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20004a1c 	.word	0x20004a1c
 8005584:	20004a24 	.word	0x20004a24

08005588 <std>:
 8005588:	2300      	movs	r3, #0
 800558a:	b510      	push	{r4, lr}
 800558c:	4604      	mov	r4, r0
 800558e:	e9c0 3300 	strd	r3, r3, [r0]
 8005592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005596:	6083      	str	r3, [r0, #8]
 8005598:	8181      	strh	r1, [r0, #12]
 800559a:	6643      	str	r3, [r0, #100]	@ 0x64
 800559c:	81c2      	strh	r2, [r0, #14]
 800559e:	6183      	str	r3, [r0, #24]
 80055a0:	4619      	mov	r1, r3
 80055a2:	2208      	movs	r2, #8
 80055a4:	305c      	adds	r0, #92	@ 0x5c
 80055a6:	f000 f9f9 	bl	800599c <memset>
 80055aa:	4b0d      	ldr	r3, [pc, #52]	@ (80055e0 <std+0x58>)
 80055ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80055ae:	4b0d      	ldr	r3, [pc, #52]	@ (80055e4 <std+0x5c>)
 80055b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055b2:	4b0d      	ldr	r3, [pc, #52]	@ (80055e8 <std+0x60>)
 80055b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055b6:	4b0d      	ldr	r3, [pc, #52]	@ (80055ec <std+0x64>)
 80055b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80055ba:	4b0d      	ldr	r3, [pc, #52]	@ (80055f0 <std+0x68>)
 80055bc:	6224      	str	r4, [r4, #32]
 80055be:	429c      	cmp	r4, r3
 80055c0:	d006      	beq.n	80055d0 <std+0x48>
 80055c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055c6:	4294      	cmp	r4, r2
 80055c8:	d002      	beq.n	80055d0 <std+0x48>
 80055ca:	33d0      	adds	r3, #208	@ 0xd0
 80055cc:	429c      	cmp	r4, r3
 80055ce:	d105      	bne.n	80055dc <std+0x54>
 80055d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80055d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d8:	f000 ba58 	b.w	8005a8c <__retarget_lock_init_recursive>
 80055dc:	bd10      	pop	{r4, pc}
 80055de:	bf00      	nop
 80055e0:	080057ed 	.word	0x080057ed
 80055e4:	0800580f 	.word	0x0800580f
 80055e8:	08005847 	.word	0x08005847
 80055ec:	0800586b 	.word	0x0800586b
 80055f0:	20004a3c 	.word	0x20004a3c

080055f4 <stdio_exit_handler>:
 80055f4:	4a02      	ldr	r2, [pc, #8]	@ (8005600 <stdio_exit_handler+0xc>)
 80055f6:	4903      	ldr	r1, [pc, #12]	@ (8005604 <stdio_exit_handler+0x10>)
 80055f8:	4803      	ldr	r0, [pc, #12]	@ (8005608 <stdio_exit_handler+0x14>)
 80055fa:	f000 b869 	b.w	80056d0 <_fwalk_sglue>
 80055fe:	bf00      	nop
 8005600:	20000010 	.word	0x20000010
 8005604:	08006349 	.word	0x08006349
 8005608:	20000020 	.word	0x20000020

0800560c <cleanup_stdio>:
 800560c:	6841      	ldr	r1, [r0, #4]
 800560e:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <cleanup_stdio+0x34>)
 8005610:	4299      	cmp	r1, r3
 8005612:	b510      	push	{r4, lr}
 8005614:	4604      	mov	r4, r0
 8005616:	d001      	beq.n	800561c <cleanup_stdio+0x10>
 8005618:	f000 fe96 	bl	8006348 <_fflush_r>
 800561c:	68a1      	ldr	r1, [r4, #8]
 800561e:	4b09      	ldr	r3, [pc, #36]	@ (8005644 <cleanup_stdio+0x38>)
 8005620:	4299      	cmp	r1, r3
 8005622:	d002      	beq.n	800562a <cleanup_stdio+0x1e>
 8005624:	4620      	mov	r0, r4
 8005626:	f000 fe8f 	bl	8006348 <_fflush_r>
 800562a:	68e1      	ldr	r1, [r4, #12]
 800562c:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <cleanup_stdio+0x3c>)
 800562e:	4299      	cmp	r1, r3
 8005630:	d004      	beq.n	800563c <cleanup_stdio+0x30>
 8005632:	4620      	mov	r0, r4
 8005634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005638:	f000 be86 	b.w	8006348 <_fflush_r>
 800563c:	bd10      	pop	{r4, pc}
 800563e:	bf00      	nop
 8005640:	20004a3c 	.word	0x20004a3c
 8005644:	20004aa4 	.word	0x20004aa4
 8005648:	20004b0c 	.word	0x20004b0c

0800564c <global_stdio_init.part.0>:
 800564c:	b510      	push	{r4, lr}
 800564e:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <global_stdio_init.part.0+0x30>)
 8005650:	4c0b      	ldr	r4, [pc, #44]	@ (8005680 <global_stdio_init.part.0+0x34>)
 8005652:	4a0c      	ldr	r2, [pc, #48]	@ (8005684 <global_stdio_init.part.0+0x38>)
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	4620      	mov	r0, r4
 8005658:	2200      	movs	r2, #0
 800565a:	2104      	movs	r1, #4
 800565c:	f7ff ff94 	bl	8005588 <std>
 8005660:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005664:	2201      	movs	r2, #1
 8005666:	2109      	movs	r1, #9
 8005668:	f7ff ff8e 	bl	8005588 <std>
 800566c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005670:	2202      	movs	r2, #2
 8005672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005676:	2112      	movs	r1, #18
 8005678:	f7ff bf86 	b.w	8005588 <std>
 800567c:	20004b74 	.word	0x20004b74
 8005680:	20004a3c 	.word	0x20004a3c
 8005684:	080055f5 	.word	0x080055f5

08005688 <__sfp_lock_acquire>:
 8005688:	4801      	ldr	r0, [pc, #4]	@ (8005690 <__sfp_lock_acquire+0x8>)
 800568a:	f000 ba00 	b.w	8005a8e <__retarget_lock_acquire_recursive>
 800568e:	bf00      	nop
 8005690:	20004b7d 	.word	0x20004b7d

08005694 <__sfp_lock_release>:
 8005694:	4801      	ldr	r0, [pc, #4]	@ (800569c <__sfp_lock_release+0x8>)
 8005696:	f000 b9fb 	b.w	8005a90 <__retarget_lock_release_recursive>
 800569a:	bf00      	nop
 800569c:	20004b7d 	.word	0x20004b7d

080056a0 <__sinit>:
 80056a0:	b510      	push	{r4, lr}
 80056a2:	4604      	mov	r4, r0
 80056a4:	f7ff fff0 	bl	8005688 <__sfp_lock_acquire>
 80056a8:	6a23      	ldr	r3, [r4, #32]
 80056aa:	b11b      	cbz	r3, 80056b4 <__sinit+0x14>
 80056ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b0:	f7ff bff0 	b.w	8005694 <__sfp_lock_release>
 80056b4:	4b04      	ldr	r3, [pc, #16]	@ (80056c8 <__sinit+0x28>)
 80056b6:	6223      	str	r3, [r4, #32]
 80056b8:	4b04      	ldr	r3, [pc, #16]	@ (80056cc <__sinit+0x2c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f5      	bne.n	80056ac <__sinit+0xc>
 80056c0:	f7ff ffc4 	bl	800564c <global_stdio_init.part.0>
 80056c4:	e7f2      	b.n	80056ac <__sinit+0xc>
 80056c6:	bf00      	nop
 80056c8:	0800560d 	.word	0x0800560d
 80056cc:	20004b74 	.word	0x20004b74

080056d0 <_fwalk_sglue>:
 80056d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d4:	4607      	mov	r7, r0
 80056d6:	4688      	mov	r8, r1
 80056d8:	4614      	mov	r4, r2
 80056da:	2600      	movs	r6, #0
 80056dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056e0:	f1b9 0901 	subs.w	r9, r9, #1
 80056e4:	d505      	bpl.n	80056f2 <_fwalk_sglue+0x22>
 80056e6:	6824      	ldr	r4, [r4, #0]
 80056e8:	2c00      	cmp	r4, #0
 80056ea:	d1f7      	bne.n	80056dc <_fwalk_sglue+0xc>
 80056ec:	4630      	mov	r0, r6
 80056ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f2:	89ab      	ldrh	r3, [r5, #12]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d907      	bls.n	8005708 <_fwalk_sglue+0x38>
 80056f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056fc:	3301      	adds	r3, #1
 80056fe:	d003      	beq.n	8005708 <_fwalk_sglue+0x38>
 8005700:	4629      	mov	r1, r5
 8005702:	4638      	mov	r0, r7
 8005704:	47c0      	blx	r8
 8005706:	4306      	orrs	r6, r0
 8005708:	3568      	adds	r5, #104	@ 0x68
 800570a:	e7e9      	b.n	80056e0 <_fwalk_sglue+0x10>

0800570c <iprintf>:
 800570c:	b40f      	push	{r0, r1, r2, r3}
 800570e:	b507      	push	{r0, r1, r2, lr}
 8005710:	4906      	ldr	r1, [pc, #24]	@ (800572c <iprintf+0x20>)
 8005712:	ab04      	add	r3, sp, #16
 8005714:	6808      	ldr	r0, [r1, #0]
 8005716:	f853 2b04 	ldr.w	r2, [r3], #4
 800571a:	6881      	ldr	r1, [r0, #8]
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	f000 fae9 	bl	8005cf4 <_vfiprintf_r>
 8005722:	b003      	add	sp, #12
 8005724:	f85d eb04 	ldr.w	lr, [sp], #4
 8005728:	b004      	add	sp, #16
 800572a:	4770      	bx	lr
 800572c:	2000001c 	.word	0x2000001c

08005730 <_puts_r>:
 8005730:	6a03      	ldr	r3, [r0, #32]
 8005732:	b570      	push	{r4, r5, r6, lr}
 8005734:	6884      	ldr	r4, [r0, #8]
 8005736:	4605      	mov	r5, r0
 8005738:	460e      	mov	r6, r1
 800573a:	b90b      	cbnz	r3, 8005740 <_puts_r+0x10>
 800573c:	f7ff ffb0 	bl	80056a0 <__sinit>
 8005740:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005742:	07db      	lsls	r3, r3, #31
 8005744:	d405      	bmi.n	8005752 <_puts_r+0x22>
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	0598      	lsls	r0, r3, #22
 800574a:	d402      	bmi.n	8005752 <_puts_r+0x22>
 800574c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800574e:	f000 f99e 	bl	8005a8e <__retarget_lock_acquire_recursive>
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	0719      	lsls	r1, r3, #28
 8005756:	d502      	bpl.n	800575e <_puts_r+0x2e>
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d135      	bne.n	80057ca <_puts_r+0x9a>
 800575e:	4621      	mov	r1, r4
 8005760:	4628      	mov	r0, r5
 8005762:	f000 f8c5 	bl	80058f0 <__swsetup_r>
 8005766:	b380      	cbz	r0, 80057ca <_puts_r+0x9a>
 8005768:	f04f 35ff 	mov.w	r5, #4294967295
 800576c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800576e:	07da      	lsls	r2, r3, #31
 8005770:	d405      	bmi.n	800577e <_puts_r+0x4e>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	059b      	lsls	r3, r3, #22
 8005776:	d402      	bmi.n	800577e <_puts_r+0x4e>
 8005778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800577a:	f000 f989 	bl	8005a90 <__retarget_lock_release_recursive>
 800577e:	4628      	mov	r0, r5
 8005780:	bd70      	pop	{r4, r5, r6, pc}
 8005782:	2b00      	cmp	r3, #0
 8005784:	da04      	bge.n	8005790 <_puts_r+0x60>
 8005786:	69a2      	ldr	r2, [r4, #24]
 8005788:	429a      	cmp	r2, r3
 800578a:	dc17      	bgt.n	80057bc <_puts_r+0x8c>
 800578c:	290a      	cmp	r1, #10
 800578e:	d015      	beq.n	80057bc <_puts_r+0x8c>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	6022      	str	r2, [r4, #0]
 8005796:	7019      	strb	r1, [r3, #0]
 8005798:	68a3      	ldr	r3, [r4, #8]
 800579a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800579e:	3b01      	subs	r3, #1
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	2900      	cmp	r1, #0
 80057a4:	d1ed      	bne.n	8005782 <_puts_r+0x52>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	da11      	bge.n	80057ce <_puts_r+0x9e>
 80057aa:	4622      	mov	r2, r4
 80057ac:	210a      	movs	r1, #10
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 f85f 	bl	8005872 <__swbuf_r>
 80057b4:	3001      	adds	r0, #1
 80057b6:	d0d7      	beq.n	8005768 <_puts_r+0x38>
 80057b8:	250a      	movs	r5, #10
 80057ba:	e7d7      	b.n	800576c <_puts_r+0x3c>
 80057bc:	4622      	mov	r2, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 f857 	bl	8005872 <__swbuf_r>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d1e7      	bne.n	8005798 <_puts_r+0x68>
 80057c8:	e7ce      	b.n	8005768 <_puts_r+0x38>
 80057ca:	3e01      	subs	r6, #1
 80057cc:	e7e4      	b.n	8005798 <_puts_r+0x68>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	6022      	str	r2, [r4, #0]
 80057d4:	220a      	movs	r2, #10
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	e7ee      	b.n	80057b8 <_puts_r+0x88>
	...

080057dc <puts>:
 80057dc:	4b02      	ldr	r3, [pc, #8]	@ (80057e8 <puts+0xc>)
 80057de:	4601      	mov	r1, r0
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	f7ff bfa5 	b.w	8005730 <_puts_r>
 80057e6:	bf00      	nop
 80057e8:	2000001c 	.word	0x2000001c

080057ec <__sread>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	460c      	mov	r4, r1
 80057f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f4:	f000 f8fc 	bl	80059f0 <_read_r>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	bfab      	itete	ge
 80057fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005800:	181b      	addge	r3, r3, r0
 8005802:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005806:	bfac      	ite	ge
 8005808:	6563      	strge	r3, [r4, #84]	@ 0x54
 800580a:	81a3      	strhlt	r3, [r4, #12]
 800580c:	bd10      	pop	{r4, pc}

0800580e <__swrite>:
 800580e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005812:	461f      	mov	r7, r3
 8005814:	898b      	ldrh	r3, [r1, #12]
 8005816:	05db      	lsls	r3, r3, #23
 8005818:	4605      	mov	r5, r0
 800581a:	460c      	mov	r4, r1
 800581c:	4616      	mov	r6, r2
 800581e:	d505      	bpl.n	800582c <__swrite+0x1e>
 8005820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005824:	2302      	movs	r3, #2
 8005826:	2200      	movs	r2, #0
 8005828:	f000 f8d0 	bl	80059cc <_lseek_r>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005832:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	4632      	mov	r2, r6
 800583a:	463b      	mov	r3, r7
 800583c:	4628      	mov	r0, r5
 800583e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005842:	f000 b8e7 	b.w	8005a14 <_write_r>

08005846 <__sseek>:
 8005846:	b510      	push	{r4, lr}
 8005848:	460c      	mov	r4, r1
 800584a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584e:	f000 f8bd 	bl	80059cc <_lseek_r>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	bf15      	itete	ne
 8005858:	6560      	strne	r0, [r4, #84]	@ 0x54
 800585a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800585e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005862:	81a3      	strheq	r3, [r4, #12]
 8005864:	bf18      	it	ne
 8005866:	81a3      	strhne	r3, [r4, #12]
 8005868:	bd10      	pop	{r4, pc}

0800586a <__sclose>:
 800586a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586e:	f000 b89d 	b.w	80059ac <_close_r>

08005872 <__swbuf_r>:
 8005872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005874:	460e      	mov	r6, r1
 8005876:	4614      	mov	r4, r2
 8005878:	4605      	mov	r5, r0
 800587a:	b118      	cbz	r0, 8005884 <__swbuf_r+0x12>
 800587c:	6a03      	ldr	r3, [r0, #32]
 800587e:	b90b      	cbnz	r3, 8005884 <__swbuf_r+0x12>
 8005880:	f7ff ff0e 	bl	80056a0 <__sinit>
 8005884:	69a3      	ldr	r3, [r4, #24]
 8005886:	60a3      	str	r3, [r4, #8]
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	071a      	lsls	r2, r3, #28
 800588c:	d501      	bpl.n	8005892 <__swbuf_r+0x20>
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	b943      	cbnz	r3, 80058a4 <__swbuf_r+0x32>
 8005892:	4621      	mov	r1, r4
 8005894:	4628      	mov	r0, r5
 8005896:	f000 f82b 	bl	80058f0 <__swsetup_r>
 800589a:	b118      	cbz	r0, 80058a4 <__swbuf_r+0x32>
 800589c:	f04f 37ff 	mov.w	r7, #4294967295
 80058a0:	4638      	mov	r0, r7
 80058a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	6922      	ldr	r2, [r4, #16]
 80058a8:	1a98      	subs	r0, r3, r2
 80058aa:	6963      	ldr	r3, [r4, #20]
 80058ac:	b2f6      	uxtb	r6, r6
 80058ae:	4283      	cmp	r3, r0
 80058b0:	4637      	mov	r7, r6
 80058b2:	dc05      	bgt.n	80058c0 <__swbuf_r+0x4e>
 80058b4:	4621      	mov	r1, r4
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 fd46 	bl	8006348 <_fflush_r>
 80058bc:	2800      	cmp	r0, #0
 80058be:	d1ed      	bne.n	800589c <__swbuf_r+0x2a>
 80058c0:	68a3      	ldr	r3, [r4, #8]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	60a3      	str	r3, [r4, #8]
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	6022      	str	r2, [r4, #0]
 80058cc:	701e      	strb	r6, [r3, #0]
 80058ce:	6962      	ldr	r2, [r4, #20]
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d004      	beq.n	80058e0 <__swbuf_r+0x6e>
 80058d6:	89a3      	ldrh	r3, [r4, #12]
 80058d8:	07db      	lsls	r3, r3, #31
 80058da:	d5e1      	bpl.n	80058a0 <__swbuf_r+0x2e>
 80058dc:	2e0a      	cmp	r6, #10
 80058de:	d1df      	bne.n	80058a0 <__swbuf_r+0x2e>
 80058e0:	4621      	mov	r1, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	f000 fd30 	bl	8006348 <_fflush_r>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d0d9      	beq.n	80058a0 <__swbuf_r+0x2e>
 80058ec:	e7d6      	b.n	800589c <__swbuf_r+0x2a>
	...

080058f0 <__swsetup_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4b29      	ldr	r3, [pc, #164]	@ (8005998 <__swsetup_r+0xa8>)
 80058f4:	4605      	mov	r5, r0
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	460c      	mov	r4, r1
 80058fa:	b118      	cbz	r0, 8005904 <__swsetup_r+0x14>
 80058fc:	6a03      	ldr	r3, [r0, #32]
 80058fe:	b90b      	cbnz	r3, 8005904 <__swsetup_r+0x14>
 8005900:	f7ff fece 	bl	80056a0 <__sinit>
 8005904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005908:	0719      	lsls	r1, r3, #28
 800590a:	d422      	bmi.n	8005952 <__swsetup_r+0x62>
 800590c:	06da      	lsls	r2, r3, #27
 800590e:	d407      	bmi.n	8005920 <__swsetup_r+0x30>
 8005910:	2209      	movs	r2, #9
 8005912:	602a      	str	r2, [r5, #0]
 8005914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005918:	81a3      	strh	r3, [r4, #12]
 800591a:	f04f 30ff 	mov.w	r0, #4294967295
 800591e:	e033      	b.n	8005988 <__swsetup_r+0x98>
 8005920:	0758      	lsls	r0, r3, #29
 8005922:	d512      	bpl.n	800594a <__swsetup_r+0x5a>
 8005924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005926:	b141      	cbz	r1, 800593a <__swsetup_r+0x4a>
 8005928:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800592c:	4299      	cmp	r1, r3
 800592e:	d002      	beq.n	8005936 <__swsetup_r+0x46>
 8005930:	4628      	mov	r0, r5
 8005932:	f000 f8bd 	bl	8005ab0 <_free_r>
 8005936:	2300      	movs	r3, #0
 8005938:	6363      	str	r3, [r4, #52]	@ 0x34
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005940:	81a3      	strh	r3, [r4, #12]
 8005942:	2300      	movs	r3, #0
 8005944:	6063      	str	r3, [r4, #4]
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	f043 0308 	orr.w	r3, r3, #8
 8005950:	81a3      	strh	r3, [r4, #12]
 8005952:	6923      	ldr	r3, [r4, #16]
 8005954:	b94b      	cbnz	r3, 800596a <__swsetup_r+0x7a>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800595c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005960:	d003      	beq.n	800596a <__swsetup_r+0x7a>
 8005962:	4621      	mov	r1, r4
 8005964:	4628      	mov	r0, r5
 8005966:	f000 fd3d 	bl	80063e4 <__smakebuf_r>
 800596a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800596e:	f013 0201 	ands.w	r2, r3, #1
 8005972:	d00a      	beq.n	800598a <__swsetup_r+0x9a>
 8005974:	2200      	movs	r2, #0
 8005976:	60a2      	str	r2, [r4, #8]
 8005978:	6962      	ldr	r2, [r4, #20]
 800597a:	4252      	negs	r2, r2
 800597c:	61a2      	str	r2, [r4, #24]
 800597e:	6922      	ldr	r2, [r4, #16]
 8005980:	b942      	cbnz	r2, 8005994 <__swsetup_r+0xa4>
 8005982:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005986:	d1c5      	bne.n	8005914 <__swsetup_r+0x24>
 8005988:	bd38      	pop	{r3, r4, r5, pc}
 800598a:	0799      	lsls	r1, r3, #30
 800598c:	bf58      	it	pl
 800598e:	6962      	ldrpl	r2, [r4, #20]
 8005990:	60a2      	str	r2, [r4, #8]
 8005992:	e7f4      	b.n	800597e <__swsetup_r+0x8e>
 8005994:	2000      	movs	r0, #0
 8005996:	e7f7      	b.n	8005988 <__swsetup_r+0x98>
 8005998:	2000001c 	.word	0x2000001c

0800599c <memset>:
 800599c:	4402      	add	r2, r0
 800599e:	4603      	mov	r3, r0
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d100      	bne.n	80059a6 <memset+0xa>
 80059a4:	4770      	bx	lr
 80059a6:	f803 1b01 	strb.w	r1, [r3], #1
 80059aa:	e7f9      	b.n	80059a0 <memset+0x4>

080059ac <_close_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4d06      	ldr	r5, [pc, #24]	@ (80059c8 <_close_r+0x1c>)
 80059b0:	2300      	movs	r3, #0
 80059b2:	4604      	mov	r4, r0
 80059b4:	4608      	mov	r0, r1
 80059b6:	602b      	str	r3, [r5, #0]
 80059b8:	f7fb f875 	bl	8000aa6 <_close>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	d102      	bne.n	80059c6 <_close_r+0x1a>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	b103      	cbz	r3, 80059c6 <_close_r+0x1a>
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
 80059c8:	20004b78 	.word	0x20004b78

080059cc <_lseek_r>:
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	4d07      	ldr	r5, [pc, #28]	@ (80059ec <_lseek_r+0x20>)
 80059d0:	4604      	mov	r4, r0
 80059d2:	4608      	mov	r0, r1
 80059d4:	4611      	mov	r1, r2
 80059d6:	2200      	movs	r2, #0
 80059d8:	602a      	str	r2, [r5, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	f7fb f88a 	bl	8000af4 <_lseek>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_lseek_r+0x1e>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_lseek_r+0x1e>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	20004b78 	.word	0x20004b78

080059f0 <_read_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d07      	ldr	r5, [pc, #28]	@ (8005a10 <_read_r+0x20>)
 80059f4:	4604      	mov	r4, r0
 80059f6:	4608      	mov	r0, r1
 80059f8:	4611      	mov	r1, r2
 80059fa:	2200      	movs	r2, #0
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f7fb f818 	bl	8000a34 <_read>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_read_r+0x1e>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_read_r+0x1e>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	20004b78 	.word	0x20004b78

08005a14 <_write_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4d07      	ldr	r5, [pc, #28]	@ (8005a34 <_write_r+0x20>)
 8005a18:	4604      	mov	r4, r0
 8005a1a:	4608      	mov	r0, r1
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	602a      	str	r2, [r5, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f7fb f823 	bl	8000a6e <_write>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_write_r+0x1e>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_write_r+0x1e>
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	20004b78 	.word	0x20004b78

08005a38 <__errno>:
 8005a38:	4b01      	ldr	r3, [pc, #4]	@ (8005a40 <__errno+0x8>)
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	2000001c 	.word	0x2000001c

08005a44 <__libc_init_array>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	4d0d      	ldr	r5, [pc, #52]	@ (8005a7c <__libc_init_array+0x38>)
 8005a48:	4c0d      	ldr	r4, [pc, #52]	@ (8005a80 <__libc_init_array+0x3c>)
 8005a4a:	1b64      	subs	r4, r4, r5
 8005a4c:	10a4      	asrs	r4, r4, #2
 8005a4e:	2600      	movs	r6, #0
 8005a50:	42a6      	cmp	r6, r4
 8005a52:	d109      	bne.n	8005a68 <__libc_init_array+0x24>
 8005a54:	4d0b      	ldr	r5, [pc, #44]	@ (8005a84 <__libc_init_array+0x40>)
 8005a56:	4c0c      	ldr	r4, [pc, #48]	@ (8005a88 <__libc_init_array+0x44>)
 8005a58:	f000 fd32 	bl	80064c0 <_init>
 8005a5c:	1b64      	subs	r4, r4, r5
 8005a5e:	10a4      	asrs	r4, r4, #2
 8005a60:	2600      	movs	r6, #0
 8005a62:	42a6      	cmp	r6, r4
 8005a64:	d105      	bne.n	8005a72 <__libc_init_array+0x2e>
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6c:	4798      	blx	r3
 8005a6e:	3601      	adds	r6, #1
 8005a70:	e7ee      	b.n	8005a50 <__libc_init_array+0xc>
 8005a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a76:	4798      	blx	r3
 8005a78:	3601      	adds	r6, #1
 8005a7a:	e7f2      	b.n	8005a62 <__libc_init_array+0x1e>
 8005a7c:	08006694 	.word	0x08006694
 8005a80:	08006694 	.word	0x08006694
 8005a84:	08006694 	.word	0x08006694
 8005a88:	08006698 	.word	0x08006698

08005a8c <__retarget_lock_init_recursive>:
 8005a8c:	4770      	bx	lr

08005a8e <__retarget_lock_acquire_recursive>:
 8005a8e:	4770      	bx	lr

08005a90 <__retarget_lock_release_recursive>:
 8005a90:	4770      	bx	lr

08005a92 <memcpy>:
 8005a92:	440a      	add	r2, r1
 8005a94:	4291      	cmp	r1, r2
 8005a96:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a9a:	d100      	bne.n	8005a9e <memcpy+0xc>
 8005a9c:	4770      	bx	lr
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa8:	4291      	cmp	r1, r2
 8005aaa:	d1f9      	bne.n	8005aa0 <memcpy+0xe>
 8005aac:	bd10      	pop	{r4, pc}
	...

08005ab0 <_free_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	d041      	beq.n	8005b3c <_free_r+0x8c>
 8005ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abc:	1f0c      	subs	r4, r1, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfb8      	it	lt
 8005ac2:	18e4      	addlt	r4, r4, r3
 8005ac4:	f000 f8e0 	bl	8005c88 <__malloc_lock>
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b40 <_free_r+0x90>)
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	b933      	cbnz	r3, 8005adc <_free_r+0x2c>
 8005ace:	6063      	str	r3, [r4, #4]
 8005ad0:	6014      	str	r4, [r2, #0]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad8:	f000 b8dc 	b.w	8005c94 <__malloc_unlock>
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	d908      	bls.n	8005af2 <_free_r+0x42>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	1821      	adds	r1, r4, r0
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	bf01      	itttt	eq
 8005ae8:	6819      	ldreq	r1, [r3, #0]
 8005aea:	685b      	ldreq	r3, [r3, #4]
 8005aec:	1809      	addeq	r1, r1, r0
 8005aee:	6021      	streq	r1, [r4, #0]
 8005af0:	e7ed      	b.n	8005ace <_free_r+0x1e>
 8005af2:	461a      	mov	r2, r3
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b10b      	cbz	r3, 8005afc <_free_r+0x4c>
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d9fa      	bls.n	8005af2 <_free_r+0x42>
 8005afc:	6811      	ldr	r1, [r2, #0]
 8005afe:	1850      	adds	r0, r2, r1
 8005b00:	42a0      	cmp	r0, r4
 8005b02:	d10b      	bne.n	8005b1c <_free_r+0x6c>
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	4401      	add	r1, r0
 8005b08:	1850      	adds	r0, r2, r1
 8005b0a:	4283      	cmp	r3, r0
 8005b0c:	6011      	str	r1, [r2, #0]
 8005b0e:	d1e0      	bne.n	8005ad2 <_free_r+0x22>
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	6053      	str	r3, [r2, #4]
 8005b16:	4408      	add	r0, r1
 8005b18:	6010      	str	r0, [r2, #0]
 8005b1a:	e7da      	b.n	8005ad2 <_free_r+0x22>
 8005b1c:	d902      	bls.n	8005b24 <_free_r+0x74>
 8005b1e:	230c      	movs	r3, #12
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	e7d6      	b.n	8005ad2 <_free_r+0x22>
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	1821      	adds	r1, r4, r0
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	bf04      	itt	eq
 8005b2c:	6819      	ldreq	r1, [r3, #0]
 8005b2e:	685b      	ldreq	r3, [r3, #4]
 8005b30:	6063      	str	r3, [r4, #4]
 8005b32:	bf04      	itt	eq
 8005b34:	1809      	addeq	r1, r1, r0
 8005b36:	6021      	streq	r1, [r4, #0]
 8005b38:	6054      	str	r4, [r2, #4]
 8005b3a:	e7ca      	b.n	8005ad2 <_free_r+0x22>
 8005b3c:	bd38      	pop	{r3, r4, r5, pc}
 8005b3e:	bf00      	nop
 8005b40:	20004b84 	.word	0x20004b84

08005b44 <sbrk_aligned>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	4e0f      	ldr	r6, [pc, #60]	@ (8005b84 <sbrk_aligned+0x40>)
 8005b48:	460c      	mov	r4, r1
 8005b4a:	6831      	ldr	r1, [r6, #0]
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	b911      	cbnz	r1, 8005b56 <sbrk_aligned+0x12>
 8005b50:	f000 fca6 	bl	80064a0 <_sbrk_r>
 8005b54:	6030      	str	r0, [r6, #0]
 8005b56:	4621      	mov	r1, r4
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 fca1 	bl	80064a0 <_sbrk_r>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	d103      	bne.n	8005b6a <sbrk_aligned+0x26>
 8005b62:	f04f 34ff 	mov.w	r4, #4294967295
 8005b66:	4620      	mov	r0, r4
 8005b68:	bd70      	pop	{r4, r5, r6, pc}
 8005b6a:	1cc4      	adds	r4, r0, #3
 8005b6c:	f024 0403 	bic.w	r4, r4, #3
 8005b70:	42a0      	cmp	r0, r4
 8005b72:	d0f8      	beq.n	8005b66 <sbrk_aligned+0x22>
 8005b74:	1a21      	subs	r1, r4, r0
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 fc92 	bl	80064a0 <_sbrk_r>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d1f2      	bne.n	8005b66 <sbrk_aligned+0x22>
 8005b80:	e7ef      	b.n	8005b62 <sbrk_aligned+0x1e>
 8005b82:	bf00      	nop
 8005b84:	20004b80 	.word	0x20004b80

08005b88 <_malloc_r>:
 8005b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b8c:	1ccd      	adds	r5, r1, #3
 8005b8e:	f025 0503 	bic.w	r5, r5, #3
 8005b92:	3508      	adds	r5, #8
 8005b94:	2d0c      	cmp	r5, #12
 8005b96:	bf38      	it	cc
 8005b98:	250c      	movcc	r5, #12
 8005b9a:	2d00      	cmp	r5, #0
 8005b9c:	4606      	mov	r6, r0
 8005b9e:	db01      	blt.n	8005ba4 <_malloc_r+0x1c>
 8005ba0:	42a9      	cmp	r1, r5
 8005ba2:	d904      	bls.n	8005bae <_malloc_r+0x26>
 8005ba4:	230c      	movs	r3, #12
 8005ba6:	6033      	str	r3, [r6, #0]
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c84 <_malloc_r+0xfc>
 8005bb2:	f000 f869 	bl	8005c88 <__malloc_lock>
 8005bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bba:	461c      	mov	r4, r3
 8005bbc:	bb44      	cbnz	r4, 8005c10 <_malloc_r+0x88>
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7ff ffbf 	bl	8005b44 <sbrk_aligned>
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	4604      	mov	r4, r0
 8005bca:	d158      	bne.n	8005c7e <_malloc_r+0xf6>
 8005bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8005bd0:	4627      	mov	r7, r4
 8005bd2:	2f00      	cmp	r7, #0
 8005bd4:	d143      	bne.n	8005c5e <_malloc_r+0xd6>
 8005bd6:	2c00      	cmp	r4, #0
 8005bd8:	d04b      	beq.n	8005c72 <_malloc_r+0xea>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	4639      	mov	r1, r7
 8005bde:	4630      	mov	r0, r6
 8005be0:	eb04 0903 	add.w	r9, r4, r3
 8005be4:	f000 fc5c 	bl	80064a0 <_sbrk_r>
 8005be8:	4581      	cmp	r9, r0
 8005bea:	d142      	bne.n	8005c72 <_malloc_r+0xea>
 8005bec:	6821      	ldr	r1, [r4, #0]
 8005bee:	1a6d      	subs	r5, r5, r1
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7ff ffa6 	bl	8005b44 <sbrk_aligned>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d03a      	beq.n	8005c72 <_malloc_r+0xea>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	442b      	add	r3, r5
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	f8d8 3000 	ldr.w	r3, [r8]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	bb62      	cbnz	r2, 8005c64 <_malloc_r+0xdc>
 8005c0a:	f8c8 7000 	str.w	r7, [r8]
 8005c0e:	e00f      	b.n	8005c30 <_malloc_r+0xa8>
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	1b52      	subs	r2, r2, r5
 8005c14:	d420      	bmi.n	8005c58 <_malloc_r+0xd0>
 8005c16:	2a0b      	cmp	r2, #11
 8005c18:	d917      	bls.n	8005c4a <_malloc_r+0xc2>
 8005c1a:	1961      	adds	r1, r4, r5
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	6025      	str	r5, [r4, #0]
 8005c20:	bf18      	it	ne
 8005c22:	6059      	strne	r1, [r3, #4]
 8005c24:	6863      	ldr	r3, [r4, #4]
 8005c26:	bf08      	it	eq
 8005c28:	f8c8 1000 	streq.w	r1, [r8]
 8005c2c:	5162      	str	r2, [r4, r5]
 8005c2e:	604b      	str	r3, [r1, #4]
 8005c30:	4630      	mov	r0, r6
 8005c32:	f000 f82f 	bl	8005c94 <__malloc_unlock>
 8005c36:	f104 000b 	add.w	r0, r4, #11
 8005c3a:	1d23      	adds	r3, r4, #4
 8005c3c:	f020 0007 	bic.w	r0, r0, #7
 8005c40:	1ac2      	subs	r2, r0, r3
 8005c42:	bf1c      	itt	ne
 8005c44:	1a1b      	subne	r3, r3, r0
 8005c46:	50a3      	strne	r3, [r4, r2]
 8005c48:	e7af      	b.n	8005baa <_malloc_r+0x22>
 8005c4a:	6862      	ldr	r2, [r4, #4]
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	bf0c      	ite	eq
 8005c50:	f8c8 2000 	streq.w	r2, [r8]
 8005c54:	605a      	strne	r2, [r3, #4]
 8005c56:	e7eb      	b.n	8005c30 <_malloc_r+0xa8>
 8005c58:	4623      	mov	r3, r4
 8005c5a:	6864      	ldr	r4, [r4, #4]
 8005c5c:	e7ae      	b.n	8005bbc <_malloc_r+0x34>
 8005c5e:	463c      	mov	r4, r7
 8005c60:	687f      	ldr	r7, [r7, #4]
 8005c62:	e7b6      	b.n	8005bd2 <_malloc_r+0x4a>
 8005c64:	461a      	mov	r2, r3
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	d1fb      	bne.n	8005c64 <_malloc_r+0xdc>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	6053      	str	r3, [r2, #4]
 8005c70:	e7de      	b.n	8005c30 <_malloc_r+0xa8>
 8005c72:	230c      	movs	r3, #12
 8005c74:	6033      	str	r3, [r6, #0]
 8005c76:	4630      	mov	r0, r6
 8005c78:	f000 f80c 	bl	8005c94 <__malloc_unlock>
 8005c7c:	e794      	b.n	8005ba8 <_malloc_r+0x20>
 8005c7e:	6005      	str	r5, [r0, #0]
 8005c80:	e7d6      	b.n	8005c30 <_malloc_r+0xa8>
 8005c82:	bf00      	nop
 8005c84:	20004b84 	.word	0x20004b84

08005c88 <__malloc_lock>:
 8005c88:	4801      	ldr	r0, [pc, #4]	@ (8005c90 <__malloc_lock+0x8>)
 8005c8a:	f7ff bf00 	b.w	8005a8e <__retarget_lock_acquire_recursive>
 8005c8e:	bf00      	nop
 8005c90:	20004b7c 	.word	0x20004b7c

08005c94 <__malloc_unlock>:
 8005c94:	4801      	ldr	r0, [pc, #4]	@ (8005c9c <__malloc_unlock+0x8>)
 8005c96:	f7ff befb 	b.w	8005a90 <__retarget_lock_release_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	20004b7c 	.word	0x20004b7c

08005ca0 <__sfputc_r>:
 8005ca0:	6893      	ldr	r3, [r2, #8]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	b410      	push	{r4}
 8005ca8:	6093      	str	r3, [r2, #8]
 8005caa:	da08      	bge.n	8005cbe <__sfputc_r+0x1e>
 8005cac:	6994      	ldr	r4, [r2, #24]
 8005cae:	42a3      	cmp	r3, r4
 8005cb0:	db01      	blt.n	8005cb6 <__sfputc_r+0x16>
 8005cb2:	290a      	cmp	r1, #10
 8005cb4:	d103      	bne.n	8005cbe <__sfputc_r+0x1e>
 8005cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cba:	f7ff bdda 	b.w	8005872 <__swbuf_r>
 8005cbe:	6813      	ldr	r3, [r2, #0]
 8005cc0:	1c58      	adds	r0, r3, #1
 8005cc2:	6010      	str	r0, [r2, #0]
 8005cc4:	7019      	strb	r1, [r3, #0]
 8005cc6:	4608      	mov	r0, r1
 8005cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <__sfputs_r>:
 8005cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	460f      	mov	r7, r1
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	18d5      	adds	r5, r2, r3
 8005cd8:	42ac      	cmp	r4, r5
 8005cda:	d101      	bne.n	8005ce0 <__sfputs_r+0x12>
 8005cdc:	2000      	movs	r0, #0
 8005cde:	e007      	b.n	8005cf0 <__sfputs_r+0x22>
 8005ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ce4:	463a      	mov	r2, r7
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7ff ffda 	bl	8005ca0 <__sfputc_r>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d1f3      	bne.n	8005cd8 <__sfputs_r+0xa>
 8005cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cf4 <_vfiprintf_r>:
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	460d      	mov	r5, r1
 8005cfa:	b09d      	sub	sp, #116	@ 0x74
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	4698      	mov	r8, r3
 8005d00:	4606      	mov	r6, r0
 8005d02:	b118      	cbz	r0, 8005d0c <_vfiprintf_r+0x18>
 8005d04:	6a03      	ldr	r3, [r0, #32]
 8005d06:	b90b      	cbnz	r3, 8005d0c <_vfiprintf_r+0x18>
 8005d08:	f7ff fcca 	bl	80056a0 <__sinit>
 8005d0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d0e:	07d9      	lsls	r1, r3, #31
 8005d10:	d405      	bmi.n	8005d1e <_vfiprintf_r+0x2a>
 8005d12:	89ab      	ldrh	r3, [r5, #12]
 8005d14:	059a      	lsls	r2, r3, #22
 8005d16:	d402      	bmi.n	8005d1e <_vfiprintf_r+0x2a>
 8005d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d1a:	f7ff feb8 	bl	8005a8e <__retarget_lock_acquire_recursive>
 8005d1e:	89ab      	ldrh	r3, [r5, #12]
 8005d20:	071b      	lsls	r3, r3, #28
 8005d22:	d501      	bpl.n	8005d28 <_vfiprintf_r+0x34>
 8005d24:	692b      	ldr	r3, [r5, #16]
 8005d26:	b99b      	cbnz	r3, 8005d50 <_vfiprintf_r+0x5c>
 8005d28:	4629      	mov	r1, r5
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f7ff fde0 	bl	80058f0 <__swsetup_r>
 8005d30:	b170      	cbz	r0, 8005d50 <_vfiprintf_r+0x5c>
 8005d32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d34:	07dc      	lsls	r4, r3, #31
 8005d36:	d504      	bpl.n	8005d42 <_vfiprintf_r+0x4e>
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	b01d      	add	sp, #116	@ 0x74
 8005d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d42:	89ab      	ldrh	r3, [r5, #12]
 8005d44:	0598      	lsls	r0, r3, #22
 8005d46:	d4f7      	bmi.n	8005d38 <_vfiprintf_r+0x44>
 8005d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d4a:	f7ff fea1 	bl	8005a90 <__retarget_lock_release_recursive>
 8005d4e:	e7f3      	b.n	8005d38 <_vfiprintf_r+0x44>
 8005d50:	2300      	movs	r3, #0
 8005d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d54:	2320      	movs	r3, #32
 8005d56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d5e:	2330      	movs	r3, #48	@ 0x30
 8005d60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f10 <_vfiprintf_r+0x21c>
 8005d64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d68:	f04f 0901 	mov.w	r9, #1
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	469a      	mov	sl, r3
 8005d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d74:	b10a      	cbz	r2, 8005d7a <_vfiprintf_r+0x86>
 8005d76:	2a25      	cmp	r2, #37	@ 0x25
 8005d78:	d1f9      	bne.n	8005d6e <_vfiprintf_r+0x7a>
 8005d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8005d7e:	d00b      	beq.n	8005d98 <_vfiprintf_r+0xa4>
 8005d80:	465b      	mov	r3, fp
 8005d82:	4622      	mov	r2, r4
 8005d84:	4629      	mov	r1, r5
 8005d86:	4630      	mov	r0, r6
 8005d88:	f7ff ffa1 	bl	8005cce <__sfputs_r>
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	f000 80a7 	beq.w	8005ee0 <_vfiprintf_r+0x1ec>
 8005d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d94:	445a      	add	r2, fp
 8005d96:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d98:	f89a 3000 	ldrb.w	r3, [sl]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 809f 	beq.w	8005ee0 <_vfiprintf_r+0x1ec>
 8005da2:	2300      	movs	r3, #0
 8005da4:	f04f 32ff 	mov.w	r2, #4294967295
 8005da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dac:	f10a 0a01 	add.w	sl, sl, #1
 8005db0:	9304      	str	r3, [sp, #16]
 8005db2:	9307      	str	r3, [sp, #28]
 8005db4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005db8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dba:	4654      	mov	r4, sl
 8005dbc:	2205      	movs	r2, #5
 8005dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc2:	4853      	ldr	r0, [pc, #332]	@ (8005f10 <_vfiprintf_r+0x21c>)
 8005dc4:	f7fa fa0c 	bl	80001e0 <memchr>
 8005dc8:	9a04      	ldr	r2, [sp, #16]
 8005dca:	b9d8      	cbnz	r0, 8005e04 <_vfiprintf_r+0x110>
 8005dcc:	06d1      	lsls	r1, r2, #27
 8005dce:	bf44      	itt	mi
 8005dd0:	2320      	movmi	r3, #32
 8005dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dd6:	0713      	lsls	r3, r2, #28
 8005dd8:	bf44      	itt	mi
 8005dda:	232b      	movmi	r3, #43	@ 0x2b
 8005ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005de0:	f89a 3000 	ldrb.w	r3, [sl]
 8005de4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005de6:	d015      	beq.n	8005e14 <_vfiprintf_r+0x120>
 8005de8:	9a07      	ldr	r2, [sp, #28]
 8005dea:	4654      	mov	r4, sl
 8005dec:	2000      	movs	r0, #0
 8005dee:	f04f 0c0a 	mov.w	ip, #10
 8005df2:	4621      	mov	r1, r4
 8005df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005df8:	3b30      	subs	r3, #48	@ 0x30
 8005dfa:	2b09      	cmp	r3, #9
 8005dfc:	d94b      	bls.n	8005e96 <_vfiprintf_r+0x1a2>
 8005dfe:	b1b0      	cbz	r0, 8005e2e <_vfiprintf_r+0x13a>
 8005e00:	9207      	str	r2, [sp, #28]
 8005e02:	e014      	b.n	8005e2e <_vfiprintf_r+0x13a>
 8005e04:	eba0 0308 	sub.w	r3, r0, r8
 8005e08:	fa09 f303 	lsl.w	r3, r9, r3
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	9304      	str	r3, [sp, #16]
 8005e10:	46a2      	mov	sl, r4
 8005e12:	e7d2      	b.n	8005dba <_vfiprintf_r+0xc6>
 8005e14:	9b03      	ldr	r3, [sp, #12]
 8005e16:	1d19      	adds	r1, r3, #4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	9103      	str	r1, [sp, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bfbb      	ittet	lt
 8005e20:	425b      	neglt	r3, r3
 8005e22:	f042 0202 	orrlt.w	r2, r2, #2
 8005e26:	9307      	strge	r3, [sp, #28]
 8005e28:	9307      	strlt	r3, [sp, #28]
 8005e2a:	bfb8      	it	lt
 8005e2c:	9204      	strlt	r2, [sp, #16]
 8005e2e:	7823      	ldrb	r3, [r4, #0]
 8005e30:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e32:	d10a      	bne.n	8005e4a <_vfiprintf_r+0x156>
 8005e34:	7863      	ldrb	r3, [r4, #1]
 8005e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e38:	d132      	bne.n	8005ea0 <_vfiprintf_r+0x1ac>
 8005e3a:	9b03      	ldr	r3, [sp, #12]
 8005e3c:	1d1a      	adds	r2, r3, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	9203      	str	r2, [sp, #12]
 8005e42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e46:	3402      	adds	r4, #2
 8005e48:	9305      	str	r3, [sp, #20]
 8005e4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f20 <_vfiprintf_r+0x22c>
 8005e4e:	7821      	ldrb	r1, [r4, #0]
 8005e50:	2203      	movs	r2, #3
 8005e52:	4650      	mov	r0, sl
 8005e54:	f7fa f9c4 	bl	80001e0 <memchr>
 8005e58:	b138      	cbz	r0, 8005e6a <_vfiprintf_r+0x176>
 8005e5a:	9b04      	ldr	r3, [sp, #16]
 8005e5c:	eba0 000a 	sub.w	r0, r0, sl
 8005e60:	2240      	movs	r2, #64	@ 0x40
 8005e62:	4082      	lsls	r2, r0
 8005e64:	4313      	orrs	r3, r2
 8005e66:	3401      	adds	r4, #1
 8005e68:	9304      	str	r3, [sp, #16]
 8005e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e6e:	4829      	ldr	r0, [pc, #164]	@ (8005f14 <_vfiprintf_r+0x220>)
 8005e70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e74:	2206      	movs	r2, #6
 8005e76:	f7fa f9b3 	bl	80001e0 <memchr>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d03f      	beq.n	8005efe <_vfiprintf_r+0x20a>
 8005e7e:	4b26      	ldr	r3, [pc, #152]	@ (8005f18 <_vfiprintf_r+0x224>)
 8005e80:	bb1b      	cbnz	r3, 8005eca <_vfiprintf_r+0x1d6>
 8005e82:	9b03      	ldr	r3, [sp, #12]
 8005e84:	3307      	adds	r3, #7
 8005e86:	f023 0307 	bic.w	r3, r3, #7
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	9303      	str	r3, [sp, #12]
 8005e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e90:	443b      	add	r3, r7
 8005e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e94:	e76a      	b.n	8005d6c <_vfiprintf_r+0x78>
 8005e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	e7a8      	b.n	8005df2 <_vfiprintf_r+0xfe>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	3401      	adds	r4, #1
 8005ea4:	9305      	str	r3, [sp, #20]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	f04f 0c0a 	mov.w	ip, #10
 8005eac:	4620      	mov	r0, r4
 8005eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eb2:	3a30      	subs	r2, #48	@ 0x30
 8005eb4:	2a09      	cmp	r2, #9
 8005eb6:	d903      	bls.n	8005ec0 <_vfiprintf_r+0x1cc>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0c6      	beq.n	8005e4a <_vfiprintf_r+0x156>
 8005ebc:	9105      	str	r1, [sp, #20]
 8005ebe:	e7c4      	b.n	8005e4a <_vfiprintf_r+0x156>
 8005ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e7f0      	b.n	8005eac <_vfiprintf_r+0x1b8>
 8005eca:	ab03      	add	r3, sp, #12
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	462a      	mov	r2, r5
 8005ed0:	4b12      	ldr	r3, [pc, #72]	@ (8005f1c <_vfiprintf_r+0x228>)
 8005ed2:	a904      	add	r1, sp, #16
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	f3af 8000 	nop.w
 8005eda:	4607      	mov	r7, r0
 8005edc:	1c78      	adds	r0, r7, #1
 8005ede:	d1d6      	bne.n	8005e8e <_vfiprintf_r+0x19a>
 8005ee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ee2:	07d9      	lsls	r1, r3, #31
 8005ee4:	d405      	bmi.n	8005ef2 <_vfiprintf_r+0x1fe>
 8005ee6:	89ab      	ldrh	r3, [r5, #12]
 8005ee8:	059a      	lsls	r2, r3, #22
 8005eea:	d402      	bmi.n	8005ef2 <_vfiprintf_r+0x1fe>
 8005eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005eee:	f7ff fdcf 	bl	8005a90 <__retarget_lock_release_recursive>
 8005ef2:	89ab      	ldrh	r3, [r5, #12]
 8005ef4:	065b      	lsls	r3, r3, #25
 8005ef6:	f53f af1f 	bmi.w	8005d38 <_vfiprintf_r+0x44>
 8005efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005efc:	e71e      	b.n	8005d3c <_vfiprintf_r+0x48>
 8005efe:	ab03      	add	r3, sp, #12
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	462a      	mov	r2, r5
 8005f04:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <_vfiprintf_r+0x228>)
 8005f06:	a904      	add	r1, sp, #16
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f000 f879 	bl	8006000 <_printf_i>
 8005f0e:	e7e4      	b.n	8005eda <_vfiprintf_r+0x1e6>
 8005f10:	08006658 	.word	0x08006658
 8005f14:	08006662 	.word	0x08006662
 8005f18:	00000000 	.word	0x00000000
 8005f1c:	08005ccf 	.word	0x08005ccf
 8005f20:	0800665e 	.word	0x0800665e

08005f24 <_printf_common>:
 8005f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	4616      	mov	r6, r2
 8005f2a:	4698      	mov	r8, r3
 8005f2c:	688a      	ldr	r2, [r1, #8]
 8005f2e:	690b      	ldr	r3, [r1, #16]
 8005f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f34:	4293      	cmp	r3, r2
 8005f36:	bfb8      	it	lt
 8005f38:	4613      	movlt	r3, r2
 8005f3a:	6033      	str	r3, [r6, #0]
 8005f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f40:	4607      	mov	r7, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	b10a      	cbz	r2, 8005f4a <_printf_common+0x26>
 8005f46:	3301      	adds	r3, #1
 8005f48:	6033      	str	r3, [r6, #0]
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	0699      	lsls	r1, r3, #26
 8005f4e:	bf42      	ittt	mi
 8005f50:	6833      	ldrmi	r3, [r6, #0]
 8005f52:	3302      	addmi	r3, #2
 8005f54:	6033      	strmi	r3, [r6, #0]
 8005f56:	6825      	ldr	r5, [r4, #0]
 8005f58:	f015 0506 	ands.w	r5, r5, #6
 8005f5c:	d106      	bne.n	8005f6c <_printf_common+0x48>
 8005f5e:	f104 0a19 	add.w	sl, r4, #25
 8005f62:	68e3      	ldr	r3, [r4, #12]
 8005f64:	6832      	ldr	r2, [r6, #0]
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	42ab      	cmp	r3, r5
 8005f6a:	dc26      	bgt.n	8005fba <_printf_common+0x96>
 8005f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f70:	6822      	ldr	r2, [r4, #0]
 8005f72:	3b00      	subs	r3, #0
 8005f74:	bf18      	it	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	0692      	lsls	r2, r2, #26
 8005f7a:	d42b      	bmi.n	8005fd4 <_printf_common+0xb0>
 8005f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f80:	4641      	mov	r1, r8
 8005f82:	4638      	mov	r0, r7
 8005f84:	47c8      	blx	r9
 8005f86:	3001      	adds	r0, #1
 8005f88:	d01e      	beq.n	8005fc8 <_printf_common+0xa4>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	6922      	ldr	r2, [r4, #16]
 8005f8e:	f003 0306 	and.w	r3, r3, #6
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	bf02      	ittt	eq
 8005f96:	68e5      	ldreq	r5, [r4, #12]
 8005f98:	6833      	ldreq	r3, [r6, #0]
 8005f9a:	1aed      	subeq	r5, r5, r3
 8005f9c:	68a3      	ldr	r3, [r4, #8]
 8005f9e:	bf0c      	ite	eq
 8005fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fa4:	2500      	movne	r5, #0
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	bfc4      	itt	gt
 8005faa:	1a9b      	subgt	r3, r3, r2
 8005fac:	18ed      	addgt	r5, r5, r3
 8005fae:	2600      	movs	r6, #0
 8005fb0:	341a      	adds	r4, #26
 8005fb2:	42b5      	cmp	r5, r6
 8005fb4:	d11a      	bne.n	8005fec <_printf_common+0xc8>
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	e008      	b.n	8005fcc <_printf_common+0xa8>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4652      	mov	r2, sl
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	47c8      	blx	r9
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d103      	bne.n	8005fd0 <_printf_common+0xac>
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd0:	3501      	adds	r5, #1
 8005fd2:	e7c6      	b.n	8005f62 <_printf_common+0x3e>
 8005fd4:	18e1      	adds	r1, r4, r3
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	2030      	movs	r0, #48	@ 0x30
 8005fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fde:	4422      	add	r2, r4
 8005fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fe8:	3302      	adds	r3, #2
 8005fea:	e7c7      	b.n	8005f7c <_printf_common+0x58>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4622      	mov	r2, r4
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	47c8      	blx	r9
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d0e6      	beq.n	8005fc8 <_printf_common+0xa4>
 8005ffa:	3601      	adds	r6, #1
 8005ffc:	e7d9      	b.n	8005fb2 <_printf_common+0x8e>
	...

08006000 <_printf_i>:
 8006000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006004:	7e0f      	ldrb	r7, [r1, #24]
 8006006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006008:	2f78      	cmp	r7, #120	@ 0x78
 800600a:	4691      	mov	r9, r2
 800600c:	4680      	mov	r8, r0
 800600e:	460c      	mov	r4, r1
 8006010:	469a      	mov	sl, r3
 8006012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006016:	d807      	bhi.n	8006028 <_printf_i+0x28>
 8006018:	2f62      	cmp	r7, #98	@ 0x62
 800601a:	d80a      	bhi.n	8006032 <_printf_i+0x32>
 800601c:	2f00      	cmp	r7, #0
 800601e:	f000 80d2 	beq.w	80061c6 <_printf_i+0x1c6>
 8006022:	2f58      	cmp	r7, #88	@ 0x58
 8006024:	f000 80b9 	beq.w	800619a <_printf_i+0x19a>
 8006028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800602c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006030:	e03a      	b.n	80060a8 <_printf_i+0xa8>
 8006032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006036:	2b15      	cmp	r3, #21
 8006038:	d8f6      	bhi.n	8006028 <_printf_i+0x28>
 800603a:	a101      	add	r1, pc, #4	@ (adr r1, 8006040 <_printf_i+0x40>)
 800603c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006040:	08006099 	.word	0x08006099
 8006044:	080060ad 	.word	0x080060ad
 8006048:	08006029 	.word	0x08006029
 800604c:	08006029 	.word	0x08006029
 8006050:	08006029 	.word	0x08006029
 8006054:	08006029 	.word	0x08006029
 8006058:	080060ad 	.word	0x080060ad
 800605c:	08006029 	.word	0x08006029
 8006060:	08006029 	.word	0x08006029
 8006064:	08006029 	.word	0x08006029
 8006068:	08006029 	.word	0x08006029
 800606c:	080061ad 	.word	0x080061ad
 8006070:	080060d7 	.word	0x080060d7
 8006074:	08006167 	.word	0x08006167
 8006078:	08006029 	.word	0x08006029
 800607c:	08006029 	.word	0x08006029
 8006080:	080061cf 	.word	0x080061cf
 8006084:	08006029 	.word	0x08006029
 8006088:	080060d7 	.word	0x080060d7
 800608c:	08006029 	.word	0x08006029
 8006090:	08006029 	.word	0x08006029
 8006094:	0800616f 	.word	0x0800616f
 8006098:	6833      	ldr	r3, [r6, #0]
 800609a:	1d1a      	adds	r2, r3, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6032      	str	r2, [r6, #0]
 80060a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060a8:	2301      	movs	r3, #1
 80060aa:	e09d      	b.n	80061e8 <_printf_i+0x1e8>
 80060ac:	6833      	ldr	r3, [r6, #0]
 80060ae:	6820      	ldr	r0, [r4, #0]
 80060b0:	1d19      	adds	r1, r3, #4
 80060b2:	6031      	str	r1, [r6, #0]
 80060b4:	0606      	lsls	r6, r0, #24
 80060b6:	d501      	bpl.n	80060bc <_printf_i+0xbc>
 80060b8:	681d      	ldr	r5, [r3, #0]
 80060ba:	e003      	b.n	80060c4 <_printf_i+0xc4>
 80060bc:	0645      	lsls	r5, r0, #25
 80060be:	d5fb      	bpl.n	80060b8 <_printf_i+0xb8>
 80060c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060c4:	2d00      	cmp	r5, #0
 80060c6:	da03      	bge.n	80060d0 <_printf_i+0xd0>
 80060c8:	232d      	movs	r3, #45	@ 0x2d
 80060ca:	426d      	negs	r5, r5
 80060cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060d0:	4859      	ldr	r0, [pc, #356]	@ (8006238 <_printf_i+0x238>)
 80060d2:	230a      	movs	r3, #10
 80060d4:	e011      	b.n	80060fa <_printf_i+0xfa>
 80060d6:	6821      	ldr	r1, [r4, #0]
 80060d8:	6833      	ldr	r3, [r6, #0]
 80060da:	0608      	lsls	r0, r1, #24
 80060dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80060e0:	d402      	bmi.n	80060e8 <_printf_i+0xe8>
 80060e2:	0649      	lsls	r1, r1, #25
 80060e4:	bf48      	it	mi
 80060e6:	b2ad      	uxthmi	r5, r5
 80060e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80060ea:	4853      	ldr	r0, [pc, #332]	@ (8006238 <_printf_i+0x238>)
 80060ec:	6033      	str	r3, [r6, #0]
 80060ee:	bf14      	ite	ne
 80060f0:	230a      	movne	r3, #10
 80060f2:	2308      	moveq	r3, #8
 80060f4:	2100      	movs	r1, #0
 80060f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060fa:	6866      	ldr	r6, [r4, #4]
 80060fc:	60a6      	str	r6, [r4, #8]
 80060fe:	2e00      	cmp	r6, #0
 8006100:	bfa2      	ittt	ge
 8006102:	6821      	ldrge	r1, [r4, #0]
 8006104:	f021 0104 	bicge.w	r1, r1, #4
 8006108:	6021      	strge	r1, [r4, #0]
 800610a:	b90d      	cbnz	r5, 8006110 <_printf_i+0x110>
 800610c:	2e00      	cmp	r6, #0
 800610e:	d04b      	beq.n	80061a8 <_printf_i+0x1a8>
 8006110:	4616      	mov	r6, r2
 8006112:	fbb5 f1f3 	udiv	r1, r5, r3
 8006116:	fb03 5711 	mls	r7, r3, r1, r5
 800611a:	5dc7      	ldrb	r7, [r0, r7]
 800611c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006120:	462f      	mov	r7, r5
 8006122:	42bb      	cmp	r3, r7
 8006124:	460d      	mov	r5, r1
 8006126:	d9f4      	bls.n	8006112 <_printf_i+0x112>
 8006128:	2b08      	cmp	r3, #8
 800612a:	d10b      	bne.n	8006144 <_printf_i+0x144>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	07df      	lsls	r7, r3, #31
 8006130:	d508      	bpl.n	8006144 <_printf_i+0x144>
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	6861      	ldr	r1, [r4, #4]
 8006136:	4299      	cmp	r1, r3
 8006138:	bfde      	ittt	le
 800613a:	2330      	movle	r3, #48	@ 0x30
 800613c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006144:	1b92      	subs	r2, r2, r6
 8006146:	6122      	str	r2, [r4, #16]
 8006148:	f8cd a000 	str.w	sl, [sp]
 800614c:	464b      	mov	r3, r9
 800614e:	aa03      	add	r2, sp, #12
 8006150:	4621      	mov	r1, r4
 8006152:	4640      	mov	r0, r8
 8006154:	f7ff fee6 	bl	8005f24 <_printf_common>
 8006158:	3001      	adds	r0, #1
 800615a:	d14a      	bne.n	80061f2 <_printf_i+0x1f2>
 800615c:	f04f 30ff 	mov.w	r0, #4294967295
 8006160:	b004      	add	sp, #16
 8006162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	f043 0320 	orr.w	r3, r3, #32
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	4833      	ldr	r0, [pc, #204]	@ (800623c <_printf_i+0x23c>)
 8006170:	2778      	movs	r7, #120	@ 0x78
 8006172:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	6831      	ldr	r1, [r6, #0]
 800617a:	061f      	lsls	r7, r3, #24
 800617c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006180:	d402      	bmi.n	8006188 <_printf_i+0x188>
 8006182:	065f      	lsls	r7, r3, #25
 8006184:	bf48      	it	mi
 8006186:	b2ad      	uxthmi	r5, r5
 8006188:	6031      	str	r1, [r6, #0]
 800618a:	07d9      	lsls	r1, r3, #31
 800618c:	bf44      	itt	mi
 800618e:	f043 0320 	orrmi.w	r3, r3, #32
 8006192:	6023      	strmi	r3, [r4, #0]
 8006194:	b11d      	cbz	r5, 800619e <_printf_i+0x19e>
 8006196:	2310      	movs	r3, #16
 8006198:	e7ac      	b.n	80060f4 <_printf_i+0xf4>
 800619a:	4827      	ldr	r0, [pc, #156]	@ (8006238 <_printf_i+0x238>)
 800619c:	e7e9      	b.n	8006172 <_printf_i+0x172>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f023 0320 	bic.w	r3, r3, #32
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	e7f6      	b.n	8006196 <_printf_i+0x196>
 80061a8:	4616      	mov	r6, r2
 80061aa:	e7bd      	b.n	8006128 <_printf_i+0x128>
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	6825      	ldr	r5, [r4, #0]
 80061b0:	6961      	ldr	r1, [r4, #20]
 80061b2:	1d18      	adds	r0, r3, #4
 80061b4:	6030      	str	r0, [r6, #0]
 80061b6:	062e      	lsls	r6, r5, #24
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	d501      	bpl.n	80061c0 <_printf_i+0x1c0>
 80061bc:	6019      	str	r1, [r3, #0]
 80061be:	e002      	b.n	80061c6 <_printf_i+0x1c6>
 80061c0:	0668      	lsls	r0, r5, #25
 80061c2:	d5fb      	bpl.n	80061bc <_printf_i+0x1bc>
 80061c4:	8019      	strh	r1, [r3, #0]
 80061c6:	2300      	movs	r3, #0
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	4616      	mov	r6, r2
 80061cc:	e7bc      	b.n	8006148 <_printf_i+0x148>
 80061ce:	6833      	ldr	r3, [r6, #0]
 80061d0:	1d1a      	adds	r2, r3, #4
 80061d2:	6032      	str	r2, [r6, #0]
 80061d4:	681e      	ldr	r6, [r3, #0]
 80061d6:	6862      	ldr	r2, [r4, #4]
 80061d8:	2100      	movs	r1, #0
 80061da:	4630      	mov	r0, r6
 80061dc:	f7fa f800 	bl	80001e0 <memchr>
 80061e0:	b108      	cbz	r0, 80061e6 <_printf_i+0x1e6>
 80061e2:	1b80      	subs	r0, r0, r6
 80061e4:	6060      	str	r0, [r4, #4]
 80061e6:	6863      	ldr	r3, [r4, #4]
 80061e8:	6123      	str	r3, [r4, #16]
 80061ea:	2300      	movs	r3, #0
 80061ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061f0:	e7aa      	b.n	8006148 <_printf_i+0x148>
 80061f2:	6923      	ldr	r3, [r4, #16]
 80061f4:	4632      	mov	r2, r6
 80061f6:	4649      	mov	r1, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	47d0      	blx	sl
 80061fc:	3001      	adds	r0, #1
 80061fe:	d0ad      	beq.n	800615c <_printf_i+0x15c>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	079b      	lsls	r3, r3, #30
 8006204:	d413      	bmi.n	800622e <_printf_i+0x22e>
 8006206:	68e0      	ldr	r0, [r4, #12]
 8006208:	9b03      	ldr	r3, [sp, #12]
 800620a:	4298      	cmp	r0, r3
 800620c:	bfb8      	it	lt
 800620e:	4618      	movlt	r0, r3
 8006210:	e7a6      	b.n	8006160 <_printf_i+0x160>
 8006212:	2301      	movs	r3, #1
 8006214:	4632      	mov	r2, r6
 8006216:	4649      	mov	r1, r9
 8006218:	4640      	mov	r0, r8
 800621a:	47d0      	blx	sl
 800621c:	3001      	adds	r0, #1
 800621e:	d09d      	beq.n	800615c <_printf_i+0x15c>
 8006220:	3501      	adds	r5, #1
 8006222:	68e3      	ldr	r3, [r4, #12]
 8006224:	9903      	ldr	r1, [sp, #12]
 8006226:	1a5b      	subs	r3, r3, r1
 8006228:	42ab      	cmp	r3, r5
 800622a:	dcf2      	bgt.n	8006212 <_printf_i+0x212>
 800622c:	e7eb      	b.n	8006206 <_printf_i+0x206>
 800622e:	2500      	movs	r5, #0
 8006230:	f104 0619 	add.w	r6, r4, #25
 8006234:	e7f5      	b.n	8006222 <_printf_i+0x222>
 8006236:	bf00      	nop
 8006238:	08006669 	.word	0x08006669
 800623c:	0800667a 	.word	0x0800667a

08006240 <__sflush_r>:
 8006240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006248:	0716      	lsls	r6, r2, #28
 800624a:	4605      	mov	r5, r0
 800624c:	460c      	mov	r4, r1
 800624e:	d454      	bmi.n	80062fa <__sflush_r+0xba>
 8006250:	684b      	ldr	r3, [r1, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	dc02      	bgt.n	800625c <__sflush_r+0x1c>
 8006256:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	dd48      	ble.n	80062ee <__sflush_r+0xae>
 800625c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800625e:	2e00      	cmp	r6, #0
 8006260:	d045      	beq.n	80062ee <__sflush_r+0xae>
 8006262:	2300      	movs	r3, #0
 8006264:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006268:	682f      	ldr	r7, [r5, #0]
 800626a:	6a21      	ldr	r1, [r4, #32]
 800626c:	602b      	str	r3, [r5, #0]
 800626e:	d030      	beq.n	80062d2 <__sflush_r+0x92>
 8006270:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	0759      	lsls	r1, r3, #29
 8006276:	d505      	bpl.n	8006284 <__sflush_r+0x44>
 8006278:	6863      	ldr	r3, [r4, #4]
 800627a:	1ad2      	subs	r2, r2, r3
 800627c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800627e:	b10b      	cbz	r3, 8006284 <__sflush_r+0x44>
 8006280:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006282:	1ad2      	subs	r2, r2, r3
 8006284:	2300      	movs	r3, #0
 8006286:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006288:	6a21      	ldr	r1, [r4, #32]
 800628a:	4628      	mov	r0, r5
 800628c:	47b0      	blx	r6
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	d106      	bne.n	80062a2 <__sflush_r+0x62>
 8006294:	6829      	ldr	r1, [r5, #0]
 8006296:	291d      	cmp	r1, #29
 8006298:	d82b      	bhi.n	80062f2 <__sflush_r+0xb2>
 800629a:	4a2a      	ldr	r2, [pc, #168]	@ (8006344 <__sflush_r+0x104>)
 800629c:	410a      	asrs	r2, r1
 800629e:	07d6      	lsls	r6, r2, #31
 80062a0:	d427      	bmi.n	80062f2 <__sflush_r+0xb2>
 80062a2:	2200      	movs	r2, #0
 80062a4:	6062      	str	r2, [r4, #4]
 80062a6:	04d9      	lsls	r1, r3, #19
 80062a8:	6922      	ldr	r2, [r4, #16]
 80062aa:	6022      	str	r2, [r4, #0]
 80062ac:	d504      	bpl.n	80062b8 <__sflush_r+0x78>
 80062ae:	1c42      	adds	r2, r0, #1
 80062b0:	d101      	bne.n	80062b6 <__sflush_r+0x76>
 80062b2:	682b      	ldr	r3, [r5, #0]
 80062b4:	b903      	cbnz	r3, 80062b8 <__sflush_r+0x78>
 80062b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80062b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ba:	602f      	str	r7, [r5, #0]
 80062bc:	b1b9      	cbz	r1, 80062ee <__sflush_r+0xae>
 80062be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062c2:	4299      	cmp	r1, r3
 80062c4:	d002      	beq.n	80062cc <__sflush_r+0x8c>
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7ff fbf2 	bl	8005ab0 <_free_r>
 80062cc:	2300      	movs	r3, #0
 80062ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80062d0:	e00d      	b.n	80062ee <__sflush_r+0xae>
 80062d2:	2301      	movs	r3, #1
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b0      	blx	r6
 80062d8:	4602      	mov	r2, r0
 80062da:	1c50      	adds	r0, r2, #1
 80062dc:	d1c9      	bne.n	8006272 <__sflush_r+0x32>
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0c6      	beq.n	8006272 <__sflush_r+0x32>
 80062e4:	2b1d      	cmp	r3, #29
 80062e6:	d001      	beq.n	80062ec <__sflush_r+0xac>
 80062e8:	2b16      	cmp	r3, #22
 80062ea:	d11e      	bne.n	800632a <__sflush_r+0xea>
 80062ec:	602f      	str	r7, [r5, #0]
 80062ee:	2000      	movs	r0, #0
 80062f0:	e022      	b.n	8006338 <__sflush_r+0xf8>
 80062f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062f6:	b21b      	sxth	r3, r3
 80062f8:	e01b      	b.n	8006332 <__sflush_r+0xf2>
 80062fa:	690f      	ldr	r7, [r1, #16]
 80062fc:	2f00      	cmp	r7, #0
 80062fe:	d0f6      	beq.n	80062ee <__sflush_r+0xae>
 8006300:	0793      	lsls	r3, r2, #30
 8006302:	680e      	ldr	r6, [r1, #0]
 8006304:	bf08      	it	eq
 8006306:	694b      	ldreq	r3, [r1, #20]
 8006308:	600f      	str	r7, [r1, #0]
 800630a:	bf18      	it	ne
 800630c:	2300      	movne	r3, #0
 800630e:	eba6 0807 	sub.w	r8, r6, r7
 8006312:	608b      	str	r3, [r1, #8]
 8006314:	f1b8 0f00 	cmp.w	r8, #0
 8006318:	dde9      	ble.n	80062ee <__sflush_r+0xae>
 800631a:	6a21      	ldr	r1, [r4, #32]
 800631c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800631e:	4643      	mov	r3, r8
 8006320:	463a      	mov	r2, r7
 8006322:	4628      	mov	r0, r5
 8006324:	47b0      	blx	r6
 8006326:	2800      	cmp	r0, #0
 8006328:	dc08      	bgt.n	800633c <__sflush_r+0xfc>
 800632a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800632e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006332:	81a3      	strh	r3, [r4, #12]
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800633c:	4407      	add	r7, r0
 800633e:	eba8 0800 	sub.w	r8, r8, r0
 8006342:	e7e7      	b.n	8006314 <__sflush_r+0xd4>
 8006344:	dfbffffe 	.word	0xdfbffffe

08006348 <_fflush_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	690b      	ldr	r3, [r1, #16]
 800634c:	4605      	mov	r5, r0
 800634e:	460c      	mov	r4, r1
 8006350:	b913      	cbnz	r3, 8006358 <_fflush_r+0x10>
 8006352:	2500      	movs	r5, #0
 8006354:	4628      	mov	r0, r5
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	b118      	cbz	r0, 8006362 <_fflush_r+0x1a>
 800635a:	6a03      	ldr	r3, [r0, #32]
 800635c:	b90b      	cbnz	r3, 8006362 <_fflush_r+0x1a>
 800635e:	f7ff f99f 	bl	80056a0 <__sinit>
 8006362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f3      	beq.n	8006352 <_fflush_r+0xa>
 800636a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800636c:	07d0      	lsls	r0, r2, #31
 800636e:	d404      	bmi.n	800637a <_fflush_r+0x32>
 8006370:	0599      	lsls	r1, r3, #22
 8006372:	d402      	bmi.n	800637a <_fflush_r+0x32>
 8006374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006376:	f7ff fb8a 	bl	8005a8e <__retarget_lock_acquire_recursive>
 800637a:	4628      	mov	r0, r5
 800637c:	4621      	mov	r1, r4
 800637e:	f7ff ff5f 	bl	8006240 <__sflush_r>
 8006382:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006384:	07da      	lsls	r2, r3, #31
 8006386:	4605      	mov	r5, r0
 8006388:	d4e4      	bmi.n	8006354 <_fflush_r+0xc>
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	059b      	lsls	r3, r3, #22
 800638e:	d4e1      	bmi.n	8006354 <_fflush_r+0xc>
 8006390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006392:	f7ff fb7d 	bl	8005a90 <__retarget_lock_release_recursive>
 8006396:	e7dd      	b.n	8006354 <_fflush_r+0xc>

08006398 <__swhatbuf_r>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	460c      	mov	r4, r1
 800639c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a0:	2900      	cmp	r1, #0
 80063a2:	b096      	sub	sp, #88	@ 0x58
 80063a4:	4615      	mov	r5, r2
 80063a6:	461e      	mov	r6, r3
 80063a8:	da0d      	bge.n	80063c6 <__swhatbuf_r+0x2e>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063b0:	f04f 0100 	mov.w	r1, #0
 80063b4:	bf14      	ite	ne
 80063b6:	2340      	movne	r3, #64	@ 0x40
 80063b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063bc:	2000      	movs	r0, #0
 80063be:	6031      	str	r1, [r6, #0]
 80063c0:	602b      	str	r3, [r5, #0]
 80063c2:	b016      	add	sp, #88	@ 0x58
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
 80063c6:	466a      	mov	r2, sp
 80063c8:	f000 f848 	bl	800645c <_fstat_r>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	dbec      	blt.n	80063aa <__swhatbuf_r+0x12>
 80063d0:	9901      	ldr	r1, [sp, #4]
 80063d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063da:	4259      	negs	r1, r3
 80063dc:	4159      	adcs	r1, r3
 80063de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063e2:	e7eb      	b.n	80063bc <__swhatbuf_r+0x24>

080063e4 <__smakebuf_r>:
 80063e4:	898b      	ldrh	r3, [r1, #12]
 80063e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063e8:	079d      	lsls	r5, r3, #30
 80063ea:	4606      	mov	r6, r0
 80063ec:	460c      	mov	r4, r1
 80063ee:	d507      	bpl.n	8006400 <__smakebuf_r+0x1c>
 80063f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	6123      	str	r3, [r4, #16]
 80063f8:	2301      	movs	r3, #1
 80063fa:	6163      	str	r3, [r4, #20]
 80063fc:	b003      	add	sp, #12
 80063fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006400:	ab01      	add	r3, sp, #4
 8006402:	466a      	mov	r2, sp
 8006404:	f7ff ffc8 	bl	8006398 <__swhatbuf_r>
 8006408:	9f00      	ldr	r7, [sp, #0]
 800640a:	4605      	mov	r5, r0
 800640c:	4639      	mov	r1, r7
 800640e:	4630      	mov	r0, r6
 8006410:	f7ff fbba 	bl	8005b88 <_malloc_r>
 8006414:	b948      	cbnz	r0, 800642a <__smakebuf_r+0x46>
 8006416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800641a:	059a      	lsls	r2, r3, #22
 800641c:	d4ee      	bmi.n	80063fc <__smakebuf_r+0x18>
 800641e:	f023 0303 	bic.w	r3, r3, #3
 8006422:	f043 0302 	orr.w	r3, r3, #2
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	e7e2      	b.n	80063f0 <__smakebuf_r+0xc>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	6020      	str	r0, [r4, #0]
 800642e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006432:	81a3      	strh	r3, [r4, #12]
 8006434:	9b01      	ldr	r3, [sp, #4]
 8006436:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800643a:	b15b      	cbz	r3, 8006454 <__smakebuf_r+0x70>
 800643c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006440:	4630      	mov	r0, r6
 8006442:	f000 f81d 	bl	8006480 <_isatty_r>
 8006446:	b128      	cbz	r0, 8006454 <__smakebuf_r+0x70>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	431d      	orrs	r5, r3
 8006458:	81a5      	strh	r5, [r4, #12]
 800645a:	e7cf      	b.n	80063fc <__smakebuf_r+0x18>

0800645c <_fstat_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	4d07      	ldr	r5, [pc, #28]	@ (800647c <_fstat_r+0x20>)
 8006460:	2300      	movs	r3, #0
 8006462:	4604      	mov	r4, r0
 8006464:	4608      	mov	r0, r1
 8006466:	4611      	mov	r1, r2
 8006468:	602b      	str	r3, [r5, #0]
 800646a:	f7fa fb28 	bl	8000abe <_fstat>
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	d102      	bne.n	8006478 <_fstat_r+0x1c>
 8006472:	682b      	ldr	r3, [r5, #0]
 8006474:	b103      	cbz	r3, 8006478 <_fstat_r+0x1c>
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	bd38      	pop	{r3, r4, r5, pc}
 800647a:	bf00      	nop
 800647c:	20004b78 	.word	0x20004b78

08006480 <_isatty_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d06      	ldr	r5, [pc, #24]	@ (800649c <_isatty_r+0x1c>)
 8006484:	2300      	movs	r3, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	f7fa fb27 	bl	8000ade <_isatty>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_isatty_r+0x1a>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_isatty_r+0x1a>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20004b78 	.word	0x20004b78

080064a0 <_sbrk_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4d06      	ldr	r5, [pc, #24]	@ (80064bc <_sbrk_r+0x1c>)
 80064a4:	2300      	movs	r3, #0
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	f7fa fb30 	bl	8000b10 <_sbrk>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_sbrk_r+0x1a>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_sbrk_r+0x1a>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	20004b78 	.word	0x20004b78

080064c0 <_init>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr

080064cc <_fini>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr
