
FreeRTOS_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000576c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800590c  0800590c  0000690c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a90  08005a90  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a90  08005a90  00006a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a98  08005a98  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a98  08005a98  00006a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a9c  08005a9c  00006a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005aa0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b14  2000006c  08005b0c  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b80  08005b0c  00007b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b30  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f47  00000000  00000000  00019bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0001cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de0  00000000  00000000  0001dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eeb  00000000  00000000  0001eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bc3  00000000  00000000  00037a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000969ad  00000000  00000000  0004b5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1f73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  000e1fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e7248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058f4 	.word	0x080058f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080058f4 	.word	0x080058f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */

  myQueue01Handle = osMessageQueueNew (5, sizeof(uint16_t), &myQueue01_attributes);
 8000574:	4a0c      	ldr	r2, [pc, #48]	@ (80005a8 <MX_FREERTOS_Init+0x38>)
 8000576:	2102      	movs	r1, #2
 8000578:	2005      	movs	r0, #5
 800057a:	f001 fc08 	bl	8001d8e <osMessageQueueNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <MX_FREERTOS_Init+0x3c>)
 8000582:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_One */
  Task_OneHandle = osThreadNew(TaskOne, NULL, &Task_One_attributes);
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <MX_FREERTOS_Init+0x40>)
 8000586:	2100      	movs	r1, #0
 8000588:	480a      	ldr	r0, [pc, #40]	@ (80005b4 <MX_FREERTOS_Init+0x44>)
 800058a:	f001 fb53 	bl	8001c34 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a09      	ldr	r2, [pc, #36]	@ (80005b8 <MX_FREERTOS_Init+0x48>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of Task_Two */
  Task_TwoHandle = osThreadNew(TaskTwo, NULL, &Task_Two_attributes);
 8000594:	4a09      	ldr	r2, [pc, #36]	@ (80005bc <MX_FREERTOS_Init+0x4c>)
 8000596:	2100      	movs	r1, #0
 8000598:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <MX_FREERTOS_Init+0x50>)
 800059a:	f001 fb4b 	bl	8001c34 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a08      	ldr	r2, [pc, #32]	@ (80005c4 <MX_FREERTOS_Init+0x54>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08005a2c 	.word	0x08005a2c
 80005ac:	20000090 	.word	0x20000090
 80005b0:	080059e4 	.word	0x080059e4
 80005b4:	080005c9 	.word	0x080005c9
 80005b8:	20000088 	.word	0x20000088
 80005bc:	08005a08 	.word	0x08005a08
 80005c0:	08000631 	.word	0x08000631
 80005c4:	2000008c 	.word	0x2000008c

080005c8 <TaskOne>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskOne */
void TaskOne(void *argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskOne */
  uint32_t Task_Counter = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  osStatus_t Ret_Val = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	Ret_Val = osMessageQueuePut(myQueue01Handle, &Task_Counter, NULL, 500);
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <TaskOne+0x5c>)
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	f107 0108 	add.w	r1, r7, #8
 80005e0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005e4:	2200      	movs	r2, #0
 80005e6:	f001 fc45 	bl	8001e74 <osMessageQueuePut>
 80005ea:	60f8      	str	r0, [r7, #12]
	if(Ret_Val == osOK){
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10e      	bne.n	8000610 <TaskOne+0x48>
		printf("TaskOne is running : %i , RetVal : %i",(signed int)Task_Counter,(signed int)Ret_Val);
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <TaskOne+0x60>)
 80005fa:	f004 faff 	bl	8004bfc <iprintf>
		Task_Counter++;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	3301      	adds	r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
		if(Task_Counter == 4){
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2b04      	cmp	r3, #4
 8000608:	d106      	bne.n	8000618 <TaskOne+0x50>
			Task_Counter = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	e003      	b.n	8000618 <TaskOne+0x50>
		else{
			/* Nothing */
		}
	}
	else{
		printf("TaskOne is running With error Value : %i",(signed int)Ret_Val);
 8000610:	68f9      	ldr	r1, [r7, #12]
 8000612:	4806      	ldr	r0, [pc, #24]	@ (800062c <TaskOne+0x64>)
 8000614:	f004 faf2 	bl	8004bfc <iprintf>
	}

    osDelay(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800061c:	f001 fb9c 	bl	8001d58 <osDelay>
	Ret_Val = osMessageQueuePut(myQueue01Handle, &Task_Counter, NULL, 500);
 8000620:	e7da      	b.n	80005d8 <TaskOne+0x10>
 8000622:	bf00      	nop
 8000624:	20000090 	.word	0x20000090
 8000628:	08005930 	.word	0x08005930
 800062c:	08005958 	.word	0x08005958

08000630 <TaskTwo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTwo */
void TaskTwo(void *argument)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTwo */
	uint32_t Task_Counter = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
	osStatus_t Ret_Val = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	Ret_Val = osMessageQueueGet(myQueue01Handle, &Task_Counter, NULL, 500);
 8000640:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <TaskTwo+0x50>)
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	f107 0108 	add.w	r1, r7, #8
 8000648:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800064c:	2200      	movs	r2, #0
 800064e:	f001 fc71 	bl	8001f34 <osMessageQueueGet>
 8000652:	60f8      	str	r0, [r7, #12]
	if(Ret_Val == osOK){
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d108      	bne.n	800066c <TaskTwo+0x3c>
		printf("TaskTwo is Receiving : %i ",(signed int)Task_Counter);
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	4619      	mov	r1, r3
 800065e:	4809      	ldr	r0, [pc, #36]	@ (8000684 <TaskTwo+0x54>)
 8000660:	f004 facc 	bl	8004bfc <iprintf>
		Task_Counter++;
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	3301      	adds	r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	e003      	b.n	8000674 <TaskTwo+0x44>
	}
	else{
		printf("TaskTwo is running With error Value : %i",(signed int)Ret_Val);
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <TaskTwo+0x58>)
 8000670:	f004 fac4 	bl	8004bfc <iprintf>
	}
    osDelay(1000);
 8000674:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000678:	f001 fb6e 	bl	8001d58 <osDelay>
	Ret_Val = osMessageQueueGet(myQueue01Handle, &Task_Counter, NULL, 500);
 800067c:	e7e0      	b.n	8000640 <TaskTwo+0x10>
 800067e:	bf00      	nop
 8000680:	20000090 	.word	0x20000090
 8000684:	08005984 	.word	0x08005984
 8000688:	080059a0 	.word	0x080059a0

0800068c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_GPIO_Init+0x30>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a08      	ldr	r2, [pc, #32]	@ (80006bc <MX_GPIO_Init+0x30>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_GPIO_Init+0x30>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fa0e 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f80a 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f7ff ffde 	bl	800068c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006d0:	f001 fa66 	bl	8001ba0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006d4:	f7ff ff4c 	bl	8000570 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006d8:	f001 fa86 	bl	8001be8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <main+0x1c>

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	@ 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 fad9 	bl	8004ca6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <SystemClock_Config+0xb8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <SystemClock_Config+0xb8>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	@ 0x40
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <SystemClock_Config+0xb8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <SystemClock_Config+0xbc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <SystemClock_Config+0xbc>)
 800072e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <SystemClock_Config+0xbc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800074c:	2300      	movs	r3, #0
 800074e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fae9 	bl	8000d2c <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000760:	f000 f830 	bl	80007c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fd4c 	bl	800121c <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800078a:	f000 f81b 	bl	80007c4 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a04      	ldr	r2, [pc, #16]	@ (80007c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d101      	bne.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b2:	f000 f9b9 	bl	8000b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40000800 	.word	0x40000800

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <HAL_MspInit+0x54>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	4a11      	ldr	r2, [pc, #68]	@ (8000824 <HAL_MspInit+0x54>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <HAL_MspInit+0x54>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <HAL_MspInit+0x54>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <HAL_MspInit+0x54>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	@ 0x40
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <HAL_MspInit+0x54>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	210f      	movs	r1, #15
 8000812:	f06f 0001 	mvn.w	r0, #1
 8000816:	f000 fa5f 	bl	8000cd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	@ 0x30
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	201e      	movs	r0, #30
 800083e:	f000 fa4b 	bl	8000cd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000842:	201e      	movs	r0, #30
 8000844:	f000 fa64 	bl	8000d10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <HAL_InitTick+0xa0>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	4a1d      	ldr	r2, [pc, #116]	@ (80008c8 <HAL_InitTick+0xa0>)
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	6413      	str	r3, [r2, #64]	@ 0x40
 8000858:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <HAL_InitTick+0xa0>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	f003 0304 	and.w	r3, r3, #4
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000864:	f107 0210 	add.w	r2, r7, #16
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fea0 	bl	80015b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000874:	f000 fe8a 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 8000878:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800087a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800087c:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <HAL_InitTick+0xa4>)
 800087e:	fba2 2303 	umull	r2, r3, r2, r3
 8000882:	0c9b      	lsrs	r3, r3, #18
 8000884:	3b01      	subs	r3, #1
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <HAL_InitTick+0xa8>)
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <HAL_InitTick+0xac>)
 800088c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <HAL_InitTick+0xa8>)
 8000890:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000894:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <HAL_InitTick+0xa8>)
 8000898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_InitTick+0xa8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <HAL_InitTick+0xa8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80008a8:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <HAL_InitTick+0xa8>)
 80008aa:	f000 feb5 	bl	8001618 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d104      	bne.n	80008be <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80008b4:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <HAL_InitTick+0xa8>)
 80008b6:	f000 ff09 	bl	80016cc <HAL_TIM_Base_Start_IT>
 80008ba:	4603      	mov	r3, r0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3730      	adds	r7, #48	@ 0x30
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	20000094 	.word	0x20000094
 80008d4:	40000800 	.word	0x40000800

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <NMI_Handler+0x4>

080008e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <MemManage_Handler+0x4>

080008f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <UsageFault_Handler+0x4>

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000914:	4802      	ldr	r0, [pc, #8]	@ (8000920 <TIM4_IRQHandler+0x10>)
 8000916:	f000 ff3b 	bl	8001790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000094 	.word	0x20000094

08000924 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e00a      	b.n	800094c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000936:	f3af 8000 	nop.w
 800093a:	4601      	mov	r1, r0
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60ba      	str	r2, [r7, #8]
 8000942:	b2ca      	uxtb	r2, r1
 8000944:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf0      	blt.n	8000936 <_read+0x12>
	}

return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	e009      	b.n	8000984 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	60ba      	str	r2, [r7, #8]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3301      	adds	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	429a      	cmp	r2, r3
 800098a:	dbf1      	blt.n	8000970 <_write+0x12>
	}
	return len;
 800098c:	687b      	ldr	r3, [r7, #4]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_close>:

int _close(int file)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	return -1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009be:	605a      	str	r2, [r3, #4]
	return 0;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_isatty>:

int _isatty(int file)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
	return 1;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
	return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a08:	4a14      	ldr	r2, [pc, #80]	@ (8000a5c <_sbrk+0x5c>)
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <_sbrk+0x60>)
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <_sbrk+0x64>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	@ (8000a68 <_sbrk+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d207      	bcs.n	8000a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a30:	f004 f988 	bl	8004d44 <__errno>
 8000a34:	4603      	mov	r3, r0
 8000a36:	220c      	movs	r2, #12
 8000a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	e009      	b.n	8000a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a40:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a05      	ldr	r2, [pc, #20]	@ (8000a64 <_sbrk+0x64>)
 8000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20010000 	.word	0x20010000
 8000a60:	00000400 	.word	0x00000400
 8000a64:	200000dc 	.word	0x200000dc
 8000a68:	20004b80 	.word	0x20004b80

08000a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <SystemInit+0x20>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a76:	4a05      	ldr	r2, [pc, #20]	@ (8000a8c <SystemInit+0x20>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a94:	480d      	ldr	r0, [pc, #52]	@ (8000acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a96:	490e      	ldr	r1, [pc, #56]	@ (8000ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a98:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aac:	4c0b      	ldr	r4, [pc, #44]	@ (8000adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aba:	f7ff ffd7 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f004 f947 	bl	8004d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fdfd 	bl	80006c0 <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ad4:	08005aa0 	.word	0x08005aa0
  ldr r2, =_sbss
 8000ad8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000adc:	20004b80 	.word	0x20004b80

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	@ (8000b24 <HAL_Init+0x40>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <HAL_Init+0x40>)
 8000afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	@ (8000b24 <HAL_Init+0x40>)
 8000b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f8d8 	bl	8000cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	200f      	movs	r0, #15
 8000b14:	f7ff fe88 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fe5a 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	200000e0 	.word	0x200000e0

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200000e0 	.word	0x200000e0

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	@ (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	@ (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	@ 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	@ 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff4c 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cea:	f7ff ff61 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff ffb1 	bl	8000c5c <NVIC_EncodePriority>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff80 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff54 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e267      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d075      	beq.n	8000e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d4a:	4b88      	ldr	r3, [pc, #544]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 030c 	and.w	r3, r3, #12
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d00c      	beq.n	8000d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d56:	4b85      	ldr	r3, [pc, #532]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	d112      	bne.n	8000d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d62:	4b82      	ldr	r3, [pc, #520]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d6e:	d10b      	bne.n	8000d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d70:	4b7e      	ldr	r3, [pc, #504]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d05b      	beq.n	8000e34 <HAL_RCC_OscConfig+0x108>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d157      	bne.n	8000e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e242      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d90:	d106      	bne.n	8000da0 <HAL_RCC_OscConfig+0x74>
 8000d92:	4b76      	ldr	r3, [pc, #472]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a75      	ldr	r2, [pc, #468]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e01d      	b.n	8000ddc <HAL_RCC_OscConfig+0xb0>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000da8:	d10c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x98>
 8000daa:	4b70      	ldr	r3, [pc, #448]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a6f      	ldr	r2, [pc, #444]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	4b6d      	ldr	r3, [pc, #436]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a6c      	ldr	r2, [pc, #432]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e00b      	b.n	8000ddc <HAL_RCC_OscConfig+0xb0>
 8000dc4:	4b69      	ldr	r3, [pc, #420]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a68      	ldr	r2, [pc, #416]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b66      	ldr	r3, [pc, #408]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a65      	ldr	r2, [pc, #404]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d013      	beq.n	8000e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff feb4 	bl	8000b50 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff feb0 	bl	8000b50 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b64      	cmp	r3, #100	@ 0x64
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e207      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f0      	beq.n	8000dec <HAL_RCC_OscConfig+0xc0>
 8000e0a:	e014      	b.n	8000e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fea0 	bl	8000b50 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fe9c 	bl	8000b50 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	@ 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e1f3      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e26:	4b51      	ldr	r3, [pc, #324]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0xe8>
 8000e32:	e000      	b.n	8000e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d063      	beq.n	8000f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e42:	4b4a      	ldr	r3, [pc, #296]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00b      	beq.n	8000e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e4e:	4b47      	ldr	r3, [pc, #284]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d11c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e5a:	4b44      	ldr	r3, [pc, #272]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d116      	bne.n	8000e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e66:	4b41      	ldr	r3, [pc, #260]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d005      	beq.n	8000e7e <HAL_RCC_OscConfig+0x152>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d001      	beq.n	8000e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e1c7      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	4937      	ldr	r1, [pc, #220]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e92:	e03a      	b.n	8000f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d020      	beq.n	8000ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e9c:	4b34      	ldr	r3, [pc, #208]	@ (8000f70 <HAL_RCC_OscConfig+0x244>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fe55 	bl	8000b50 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fe51 	bl	8000b50 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e1a8      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec8:	4b28      	ldr	r3, [pc, #160]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4925      	ldr	r1, [pc, #148]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
 8000edc:	e015      	b.n	8000f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ede:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <HAL_RCC_OscConfig+0x244>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fe34 	bl	8000b50 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eec:	f7ff fe30 	bl	8000b50 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e187      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d036      	beq.n	8000f84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d016      	beq.n	8000f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_RCC_OscConfig+0x248>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f24:	f7ff fe14 	bl	8000b50 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fe10 	bl	8000b50 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e167      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_RCC_OscConfig+0x240>)
 8000f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x200>
 8000f4a:	e01b      	b.n	8000f84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <HAL_RCC_OscConfig+0x248>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f52:	f7ff fdfd 	bl	8000b50 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f58:	e00e      	b.n	8000f78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fdf9 	bl	8000b50 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d907      	bls.n	8000f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e150      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	42470000 	.word	0x42470000
 8000f74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f78:	4b88      	ldr	r3, [pc, #544]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8000f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1ea      	bne.n	8000f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 8097 	beq.w	80010c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f96:	4b81      	ldr	r3, [pc, #516]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10f      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b7d      	ldr	r3, [pc, #500]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a7c      	ldr	r2, [pc, #496]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b7a      	ldr	r3, [pc, #488]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc2:	4b77      	ldr	r3, [pc, #476]	@ (80011a0 <HAL_RCC_OscConfig+0x474>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d118      	bne.n	8001000 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fce:	4b74      	ldr	r3, [pc, #464]	@ (80011a0 <HAL_RCC_OscConfig+0x474>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a73      	ldr	r2, [pc, #460]	@ (80011a0 <HAL_RCC_OscConfig+0x474>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fdb9 	bl	8000b50 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe2:	f7ff fdb5 	bl	8000b50 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e10c      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80011a0 <HAL_RCC_OscConfig+0x474>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d106      	bne.n	8001016 <HAL_RCC_OscConfig+0x2ea>
 8001008:	4b64      	ldr	r3, [pc, #400]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 800100a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800100c:	4a63      	ldr	r2, [pc, #396]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6713      	str	r3, [r2, #112]	@ 0x70
 8001014:	e01c      	b.n	8001050 <HAL_RCC_OscConfig+0x324>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b05      	cmp	r3, #5
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0x30c>
 800101e:	4b5f      	ldr	r3, [pc, #380]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8001020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001022:	4a5e      	ldr	r2, [pc, #376]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6713      	str	r3, [r2, #112]	@ 0x70
 800102a:	4b5c      	ldr	r3, [pc, #368]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 800102c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800102e:	4a5b      	ldr	r2, [pc, #364]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6713      	str	r3, [r2, #112]	@ 0x70
 8001036:	e00b      	b.n	8001050 <HAL_RCC_OscConfig+0x324>
 8001038:	4b58      	ldr	r3, [pc, #352]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 800103a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800103c:	4a57      	ldr	r2, [pc, #348]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 800103e:	f023 0301 	bic.w	r3, r3, #1
 8001042:	6713      	str	r3, [r2, #112]	@ 0x70
 8001044:	4b55      	ldr	r3, [pc, #340]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8001046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001048:	4a54      	ldr	r2, [pc, #336]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 800104a:	f023 0304 	bic.w	r3, r3, #4
 800104e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d015      	beq.n	8001084 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001058:	f7ff fd7a 	bl	8000b50 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105e:	e00a      	b.n	8001076 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001060:	f7ff fd76 	bl	8000b50 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800106e:	4293      	cmp	r3, r2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e0cb      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001076:	4b49      	ldr	r3, [pc, #292]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8001078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0ee      	beq.n	8001060 <HAL_RCC_OscConfig+0x334>
 8001082:	e014      	b.n	80010ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001084:	f7ff fd64 	bl	8000b50 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108a:	e00a      	b.n	80010a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800108c:	f7ff fd60 	bl	8000b50 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800109a:	4293      	cmp	r3, r2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e0b5      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a2:	4b3e      	ldr	r3, [pc, #248]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 80010a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1ee      	bne.n	800108c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d105      	bne.n	80010c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b4:	4b39      	ldr	r3, [pc, #228]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	4a38      	ldr	r2, [pc, #224]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 80010ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80a1 	beq.w	800120c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010ca:	4b34      	ldr	r3, [pc, #208]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d05c      	beq.n	8001190 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d141      	bne.n	8001162 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010de:	4b31      	ldr	r3, [pc, #196]	@ (80011a4 <HAL_RCC_OscConfig+0x478>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fd34 	bl	8000b50 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ec:	f7ff fd30 	bl	8000b50 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e087      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010fe:	4b27      	ldr	r3, [pc, #156]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69da      	ldr	r2, [r3, #28]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001118:	019b      	lsls	r3, r3, #6
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001120:	085b      	lsrs	r3, r3, #1
 8001122:	3b01      	subs	r3, #1
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800112c:	061b      	lsls	r3, r3, #24
 800112e:	491b      	ldr	r1, [pc, #108]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <HAL_RCC_OscConfig+0x478>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fd09 	bl	8000b50 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001142:	f7ff fd05 	bl	8000b50 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e05c      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x416>
 8001160:	e054      	b.n	800120c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_RCC_OscConfig+0x478>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcf2 	bl	8000b50 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001170:	f7ff fcee 	bl	8000b50 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e045      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_RCC_OscConfig+0x470>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x444>
 800118e:	e03d      	b.n	800120c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d107      	bne.n	80011a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e038      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000
 80011a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <HAL_RCC_OscConfig+0x4ec>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d028      	beq.n	8001208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d121      	bne.n	8001208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d11a      	bne.n	8001208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80011d8:	4013      	ands	r3, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80011de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d111      	bne.n	8001208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ee:	085b      	lsrs	r3, r3, #1
 80011f0:	3b01      	subs	r3, #1
 80011f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d107      	bne.n	8001208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0cc      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001230:	4b68      	ldr	r3, [pc, #416]	@ (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d90c      	bls.n	8001258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123e:	4b65      	ldr	r3, [pc, #404]	@ (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001246:	4b63      	ldr	r3, [pc, #396]	@ (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0b8      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001270:	4b59      	ldr	r3, [pc, #356]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4a58      	ldr	r2, [pc, #352]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800127a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001288:	4b53      	ldr	r3, [pc, #332]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4a52      	ldr	r2, [pc, #328]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001294:	4b50      	ldr	r3, [pc, #320]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	494d      	ldr	r1, [pc, #308]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d044      	beq.n	800133c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	4b47      	ldr	r3, [pc, #284]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d119      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e07f      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d003      	beq.n	80012da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d107      	bne.n	80012ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012da:	4b3f      	ldr	r3, [pc, #252]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e06f      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	4b3b      	ldr	r3, [pc, #236]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e067      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fa:	4b37      	ldr	r3, [pc, #220]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f023 0203 	bic.w	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4934      	ldr	r1, [pc, #208]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	4313      	orrs	r3, r2
 800130a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800130c:	f7ff fc20 	bl	8000b50 <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	e00a      	b.n	800132a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001314:	f7ff fc1c 	bl	8000b50 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e04f      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 020c 	and.w	r2, r3, #12
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	429a      	cmp	r2, r3
 800133a:	d1eb      	bne.n	8001314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800133c:	4b25      	ldr	r3, [pc, #148]	@ (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d20c      	bcs.n	8001364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b22      	ldr	r3, [pc, #136]	@ (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e032      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001370:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4916      	ldr	r1, [pc, #88]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	4313      	orrs	r3, r2
 8001380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800138e:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	490e      	ldr	r1, [pc, #56]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013a2:	f000 f821 	bl	80013e8 <HAL_RCC_GetSysClockFreq>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	490a      	ldr	r1, [pc, #40]	@ (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	5ccb      	ldrb	r3, [r1, r3]
 80013b6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ba:	4a09      	ldr	r2, [pc, #36]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <HAL_RCC_ClockConfig+0x1c8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fa30 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023c00 	.word	0x40023c00
 80013d8:	40023800 	.word	0x40023800
 80013dc:	08005a44 	.word	0x08005a44
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ec:	b090      	sub	sp, #64	@ 0x40
 80013ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013f8:	2300      	movs	r3, #0
 80013fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001400:	4b59      	ldr	r3, [pc, #356]	@ (8001568 <HAL_RCC_GetSysClockFreq+0x180>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d00d      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x40>
 800140c:	2b08      	cmp	r3, #8
 800140e:	f200 80a1 	bhi.w	8001554 <HAL_RCC_GetSysClockFreq+0x16c>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x34>
 8001416:	2b04      	cmp	r3, #4
 8001418:	d003      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0x3a>
 800141a:	e09b      	b.n	8001554 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800141c:	4b53      	ldr	r3, [pc, #332]	@ (800156c <HAL_RCC_GetSysClockFreq+0x184>)
 800141e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001420:	e09b      	b.n	800155a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001422:	4b53      	ldr	r3, [pc, #332]	@ (8001570 <HAL_RCC_GetSysClockFreq+0x188>)
 8001424:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001426:	e098      	b.n	800155a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001428:	4b4f      	ldr	r3, [pc, #316]	@ (8001568 <HAL_RCC_GetSysClockFreq+0x180>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001430:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001432:	4b4d      	ldr	r3, [pc, #308]	@ (8001568 <HAL_RCC_GetSysClockFreq+0x180>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d028      	beq.n	8001490 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800143e:	4b4a      	ldr	r3, [pc, #296]	@ (8001568 <HAL_RCC_GetSysClockFreq+0x180>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	099b      	lsrs	r3, r3, #6
 8001444:	2200      	movs	r2, #0
 8001446:	623b      	str	r3, [r7, #32]
 8001448:	627a      	str	r2, [r7, #36]	@ 0x24
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001450:	2100      	movs	r1, #0
 8001452:	4b47      	ldr	r3, [pc, #284]	@ (8001570 <HAL_RCC_GetSysClockFreq+0x188>)
 8001454:	fb03 f201 	mul.w	r2, r3, r1
 8001458:	2300      	movs	r3, #0
 800145a:	fb00 f303 	mul.w	r3, r0, r3
 800145e:	4413      	add	r3, r2
 8001460:	4a43      	ldr	r2, [pc, #268]	@ (8001570 <HAL_RCC_GetSysClockFreq+0x188>)
 8001462:	fba0 1202 	umull	r1, r2, r0, r2
 8001466:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001468:	460a      	mov	r2, r1
 800146a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800146c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800146e:	4413      	add	r3, r2
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001474:	2200      	movs	r2, #0
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	61fa      	str	r2, [r7, #28]
 800147a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800147e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001482:	f7fe fefd 	bl	8000280 <__aeabi_uldivmod>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4613      	mov	r3, r2
 800148c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800148e:	e053      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001490:	4b35      	ldr	r3, [pc, #212]	@ (8001568 <HAL_RCC_GetSysClockFreq+0x180>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	2200      	movs	r2, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	617a      	str	r2, [r7, #20]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80014a2:	f04f 0b00 	mov.w	fp, #0
 80014a6:	4652      	mov	r2, sl
 80014a8:	465b      	mov	r3, fp
 80014aa:	f04f 0000 	mov.w	r0, #0
 80014ae:	f04f 0100 	mov.w	r1, #0
 80014b2:	0159      	lsls	r1, r3, #5
 80014b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014b8:	0150      	lsls	r0, r2, #5
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	ebb2 080a 	subs.w	r8, r2, sl
 80014c2:	eb63 090b 	sbc.w	r9, r3, fp
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80014d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80014d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80014da:	ebb2 0408 	subs.w	r4, r2, r8
 80014de:	eb63 0509 	sbc.w	r5, r3, r9
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	00eb      	lsls	r3, r5, #3
 80014ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014f0:	00e2      	lsls	r2, r4, #3
 80014f2:	4614      	mov	r4, r2
 80014f4:	461d      	mov	r5, r3
 80014f6:	eb14 030a 	adds.w	r3, r4, sl
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	eb45 030b 	adc.w	r3, r5, fp
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800150e:	4629      	mov	r1, r5
 8001510:	028b      	lsls	r3, r1, #10
 8001512:	4621      	mov	r1, r4
 8001514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001518:	4621      	mov	r1, r4
 800151a:	028a      	lsls	r2, r1, #10
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001522:	2200      	movs	r2, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	60fa      	str	r2, [r7, #12]
 8001528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800152c:	f7fe fea8 	bl	8000280 <__aeabi_uldivmod>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4613      	mov	r3, r2
 8001536:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_RCC_GetSysClockFreq+0x180>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	3301      	adds	r3, #1
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001548:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800154a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800154c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001550:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001552:	e002      	b.n	800155a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_RCC_GetSysClockFreq+0x184>)
 8001556:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800155a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800155c:	4618      	mov	r0, r3
 800155e:	3740      	adds	r7, #64	@ 0x40
 8001560:	46bd      	mov	sp, r7
 8001562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	00f42400 	.word	0x00f42400
 8001570:	017d7840 	.word	0x017d7840

08001574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <HAL_RCC_GetHCLKFreq+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000

0800158c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001590:	f7ff fff0 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 8001594:	4602      	mov	r2, r0
 8001596:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	0a9b      	lsrs	r3, r3, #10
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	4903      	ldr	r1, [pc, #12]	@ (80015b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015a2:	5ccb      	ldrb	r3, [r1, r3]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	08005a54 	.word	0x08005a54

080015b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	220f      	movs	r2, #15
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015e8:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <HAL_RCC_GetClockConfig+0x60>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0207 	and.w	r2, r3, #7
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	601a      	str	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e041      	b.n	80016ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d106      	bne.n	8001644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f839 	bl	80016b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3304      	adds	r3, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f000 f9ca 	bl	80019f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d001      	beq.n	80016e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e044      	b.n	800176e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1e      	ldr	r2, [pc, #120]	@ (800177c <HAL_TIM_Base_Start_IT+0xb0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d018      	beq.n	8001738 <HAL_TIM_Base_Start_IT+0x6c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800170e:	d013      	beq.n	8001738 <HAL_TIM_Base_Start_IT+0x6c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1a      	ldr	r2, [pc, #104]	@ (8001780 <HAL_TIM_Base_Start_IT+0xb4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00e      	beq.n	8001738 <HAL_TIM_Base_Start_IT+0x6c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a19      	ldr	r2, [pc, #100]	@ (8001784 <HAL_TIM_Base_Start_IT+0xb8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d009      	beq.n	8001738 <HAL_TIM_Base_Start_IT+0x6c>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <HAL_TIM_Base_Start_IT+0xbc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d004      	beq.n	8001738 <HAL_TIM_Base_Start_IT+0x6c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a16      	ldr	r2, [pc, #88]	@ (800178c <HAL_TIM_Base_Start_IT+0xc0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d111      	bne.n	800175c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b06      	cmp	r3, #6
 8001748:	d010      	beq.n	800176c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0201 	orr.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800175a:	e007      	b.n	800176c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40010000 	.word	0x40010000
 8001780:	40000400 	.word	0x40000400
 8001784:	40000800 	.word	0x40000800
 8001788:	40000c00 	.word	0x40000c00
 800178c:	40014000 	.word	0x40014000

08001790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d122      	bne.n	80017ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d11b      	bne.n	80017ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0202 	mvn.w	r2, #2
 80017bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f8ee 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
 80017d8:	e005      	b.n	80017e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f8e0 	bl	80019a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f8f1 	bl	80019c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d122      	bne.n	8001840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b04      	cmp	r3, #4
 8001806:	d11b      	bne.n	8001840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f06f 0204 	mvn.w	r2, #4
 8001810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2202      	movs	r2, #2
 8001816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f8c4 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
 800182c:	e005      	b.n	800183a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f8b6 	bl	80019a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f8c7 	bl	80019c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b08      	cmp	r3, #8
 800184c:	d122      	bne.n	8001894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b08      	cmp	r3, #8
 800185a:	d11b      	bne.n	8001894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f06f 0208 	mvn.w	r2, #8
 8001864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2204      	movs	r2, #4
 800186a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f89a 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
 8001880:	e005      	b.n	800188e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f88c 	bl	80019a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f89d 	bl	80019c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d122      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d11b      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0210 	mvn.w	r2, #16
 80018b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2208      	movs	r2, #8
 80018be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f870 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
 80018d4:	e005      	b.n	80018e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f862 	bl	80019a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f873 	bl	80019c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d10e      	bne.n	8001914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d107      	bne.n	8001914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0201 	mvn.w	r2, #1
 800190c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7fe ff46 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191e:	2b80      	cmp	r3, #128	@ 0x80
 8001920:	d10e      	bne.n	8001940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192c:	2b80      	cmp	r3, #128	@ 0x80
 800192e:	d107      	bne.n	8001940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f8e2 	bl	8001b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800194a:	2b40      	cmp	r3, #64	@ 0x40
 800194c:	d10e      	bne.n	800196c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001958:	2b40      	cmp	r3, #64	@ 0x40
 800195a:	d107      	bne.n	800196c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f838 	bl	80019dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	2b20      	cmp	r3, #32
 8001978:	d10e      	bne.n	8001998 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	2b20      	cmp	r3, #32
 8001986:	d107      	bne.n	8001998 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0220 	mvn.w	r2, #32
 8001990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f8ac 	bl	8001af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a34      	ldr	r2, [pc, #208]	@ (8001ad4 <TIM_Base_SetConfig+0xe4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00f      	beq.n	8001a28 <TIM_Base_SetConfig+0x38>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a0e:	d00b      	beq.n	8001a28 <TIM_Base_SetConfig+0x38>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a31      	ldr	r2, [pc, #196]	@ (8001ad8 <TIM_Base_SetConfig+0xe8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d007      	beq.n	8001a28 <TIM_Base_SetConfig+0x38>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a30      	ldr	r2, [pc, #192]	@ (8001adc <TIM_Base_SetConfig+0xec>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d003      	beq.n	8001a28 <TIM_Base_SetConfig+0x38>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae0 <TIM_Base_SetConfig+0xf0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d108      	bne.n	8001a3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a25      	ldr	r2, [pc, #148]	@ (8001ad4 <TIM_Base_SetConfig+0xe4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01b      	beq.n	8001a7a <TIM_Base_SetConfig+0x8a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a48:	d017      	beq.n	8001a7a <TIM_Base_SetConfig+0x8a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ad8 <TIM_Base_SetConfig+0xe8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <TIM_Base_SetConfig+0x8a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a21      	ldr	r2, [pc, #132]	@ (8001adc <TIM_Base_SetConfig+0xec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00f      	beq.n	8001a7a <TIM_Base_SetConfig+0x8a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ae0 <TIM_Base_SetConfig+0xf0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00b      	beq.n	8001a7a <TIM_Base_SetConfig+0x8a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae4 <TIM_Base_SetConfig+0xf4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <TIM_Base_SetConfig+0x8a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae8 <TIM_Base_SetConfig+0xf8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d003      	beq.n	8001a7a <TIM_Base_SetConfig+0x8a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <TIM_Base_SetConfig+0xfc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d108      	bne.n	8001a8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <TIM_Base_SetConfig+0xe4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d103      	bne.n	8001ac0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	615a      	str	r2, [r3, #20]
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40000800 	.word	0x40000800
 8001ae0:	40000c00 	.word	0x40000c00
 8001ae4:	40014000 	.word	0x40014000
 8001ae8:	40014400 	.word	0x40014400
 8001aec:	40014800 	.word	0x40014800

08001af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <__NVIC_SetPriority>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	@ (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	@ (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001b70:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <SysTick_Handler+0x1c>)
 8001b72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001b74:	f001 ff06 	bl	8003984 <xTaskGetSchedulerState>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d001      	beq.n	8001b82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001b7e:	f002 fcfb 	bl	8004578 <xPortSysTickHandler>
  }
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001b90:	2100      	movs	r1, #0
 8001b92:	f06f 0004 	mvn.w	r0, #4
 8001b96:	f7ff ffbf 	bl	8001b18 <__NVIC_SetPriority>
#endif
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ba6:	f3ef 8305 	mrs	r3, IPSR
 8001baa:	603b      	str	r3, [r7, #0]
  return(result);
 8001bac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001bb2:	f06f 0305 	mvn.w	r3, #5
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	e00c      	b.n	8001bd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <osKernelInitialize+0x44>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d105      	bne.n	8001bce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <osKernelInitialize+0x44>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	e002      	b.n	8001bd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001bd4:	687b      	ldr	r3, [r7, #4]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	200000e4 	.word	0x200000e4

08001be8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bee:	f3ef 8305 	mrs	r3, IPSR
 8001bf2:	603b      	str	r3, [r7, #0]
  return(result);
 8001bf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001bfa:	f06f 0305 	mvn.w	r3, #5
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	e010      	b.n	8001c24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c02:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <osKernelStart+0x48>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d109      	bne.n	8001c1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001c0a:	f7ff ffbf 	bl	8001b8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <osKernelStart+0x48>)
 8001c10:	2202      	movs	r2, #2
 8001c12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001c14:	f001 fa68 	bl	80030e8 <vTaskStartScheduler>
      stat = osOK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	e002      	b.n	8001c24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200000e4 	.word	0x200000e4

08001c34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08e      	sub	sp, #56	@ 0x38
 8001c38:	af04      	add	r7, sp, #16
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c44:	f3ef 8305 	mrs	r3, IPSR
 8001c48:	617b      	str	r3, [r7, #20]
  return(result);
 8001c4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d17e      	bne.n	8001d4e <osThreadNew+0x11a>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d07b      	beq.n	8001d4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001c56:	2380      	movs	r3, #128	@ 0x80
 8001c58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001c5a:	2318      	movs	r3, #24
 8001c5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d045      	beq.n	8001cfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <osThreadNew+0x48>
        name = attr->name;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <osThreadNew+0x6e>
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b38      	cmp	r3, #56	@ 0x38
 8001c94:	d805      	bhi.n	8001ca2 <osThreadNew+0x6e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <osThreadNew+0x72>
        return (NULL);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e054      	b.n	8001d50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00e      	beq.n	8001cdc <osThreadNew+0xa8>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b5b      	cmp	r3, #91	@ 0x5b
 8001cc4:	d90a      	bls.n	8001cdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <osThreadNew+0xa8>
        mem = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	e010      	b.n	8001cfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10c      	bne.n	8001cfe <osThreadNew+0xca>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d108      	bne.n	8001cfe <osThreadNew+0xca>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d104      	bne.n	8001cfe <osThreadNew+0xca>
          mem = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	e001      	b.n	8001cfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d110      	bne.n	8001d26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d0c:	9202      	str	r2, [sp, #8]
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	6a3a      	ldr	r2, [r7, #32]
 8001d18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f001 f808 	bl	8002d30 <xTaskCreateStatic>
 8001d20:	4603      	mov	r3, r0
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	e013      	b.n	8001d4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d110      	bne.n	8001d4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f001 f856 	bl	8002df0 <xTaskCreate>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d001      	beq.n	8001d4e <osThreadNew+0x11a>
            hTask = NULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d4e:	693b      	ldr	r3, [r7, #16]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3728      	adds	r7, #40	@ 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d60:	f3ef 8305 	mrs	r3, IPSR
 8001d64:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <osDelay+0x1c>
    stat = osErrorISR;
 8001d6c:	f06f 0305 	mvn.w	r3, #5
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e007      	b.n	8001d84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f001 f97c 	bl	800307c <vTaskDelay>
    }
  }

  return (stat);
 8001d84:	68fb      	ldr	r3, [r7, #12]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b08a      	sub	sp, #40	@ 0x28
 8001d92:	af02      	add	r7, sp, #8
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d9e:	f3ef 8305 	mrs	r3, IPSR
 8001da2:	613b      	str	r3, [r7, #16]
  return(result);
 8001da4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d15f      	bne.n	8001e6a <osMessageQueueNew+0xdc>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d05c      	beq.n	8001e6a <osMessageQueueNew+0xdc>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d059      	beq.n	8001e6a <osMessageQueueNew+0xdc>
    mem = -1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d029      	beq.n	8001e16 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d012      	beq.n	8001df0 <osMessageQueueNew+0x62>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b4f      	cmp	r3, #79	@ 0x4f
 8001dd0:	d90e      	bls.n	8001df0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d302      	bcc.n	8001df0 <osMessageQueueNew+0x62>
        mem = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	e014      	b.n	8001e1a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d110      	bne.n	8001e1a <osMessageQueueNew+0x8c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10c      	bne.n	8001e1a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d108      	bne.n	8001e1a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d104      	bne.n	8001e1a <osMessageQueueNew+0x8c>
          mem = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	e001      	b.n	8001e1a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10b      	bne.n	8001e38 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2100      	movs	r1, #0
 8001e2a:	9100      	str	r1, [sp, #0]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fa30 	bl	8002294 <xQueueGenericCreateStatic>
 8001e34:	61f8      	str	r0, [r7, #28]
 8001e36:	e008      	b.n	8001e4a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 faa3 	bl	800238e <xQueueGenericCreate>
 8001e48:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00c      	beq.n	8001e6a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <osMessageQueueNew+0xd0>
        name = attr->name;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e001      	b.n	8001e62 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8001e62:	6979      	ldr	r1, [r7, #20]
 8001e64:	69f8      	ldr	r0, [r7, #28]
 8001e66:	f000 ff05 	bl	8002c74 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001e6a:	69fb      	ldr	r3, [r7, #28]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e8c:	f3ef 8305 	mrs	r3, IPSR
 8001e90:	617b      	str	r3, [r7, #20]
  return(result);
 8001e92:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d028      	beq.n	8001eea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <osMessageQueuePut+0x36>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <osMessageQueuePut+0x36>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8001eaa:	f06f 0303 	mvn.w	r3, #3
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	e038      	b.n	8001f24 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001eb6:	f107 0210 	add.w	r2, r7, #16
 8001eba:	2300      	movs	r3, #0
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	69b8      	ldr	r0, [r7, #24]
 8001ec0:	f000 fbc6 	bl	8002650 <xQueueGenericSendFromISR>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d003      	beq.n	8001ed2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8001eca:	f06f 0302 	mvn.w	r3, #2
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	e028      	b.n	8001f24 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d025      	beq.n	8001f24 <osMessageQueuePut+0xb0>
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <osMessageQueuePut+0xbc>)
 8001eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	f3bf 8f6f 	isb	sy
 8001ee8:	e01c      	b.n	8001f24 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <osMessageQueuePut+0x82>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d103      	bne.n	8001efe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8001ef6:	f06f 0303 	mvn.w	r3, #3
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	e012      	b.n	8001f24 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	69b8      	ldr	r0, [r7, #24]
 8001f06:	f000 faa1 	bl	800244c <xQueueGenericSend>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d009      	beq.n	8001f24 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8001f16:	f06f 0301 	mvn.w	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	e002      	b.n	8001f24 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8001f1e:	f06f 0302 	mvn.w	r3, #2
 8001f22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8001f24:	69fb      	ldr	r3, [r7, #28]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000ed04 	.word	0xe000ed04

08001f34 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f4a:	f3ef 8305 	mrs	r3, IPSR
 8001f4e:	617b      	str	r3, [r7, #20]
  return(result);
 8001f50:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d028      	beq.n	8001fa8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <osMessageQueueGet+0x34>
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <osMessageQueueGet+0x34>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8001f68:	f06f 0303 	mvn.w	r3, #3
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e037      	b.n	8001fe0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	69b8      	ldr	r0, [r7, #24]
 8001f7e:	f000 fce7 	bl	8002950 <xQueueReceiveFromISR>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d003      	beq.n	8001f90 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8001f88:	f06f 0302 	mvn.w	r3, #2
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	e027      	b.n	8001fe0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d024      	beq.n	8001fe0 <osMessageQueueGet+0xac>
 8001f96:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <osMessageQueueGet+0xb8>)
 8001f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f3bf 8f4f 	dsb	sy
 8001fa2:	f3bf 8f6f 	isb	sy
 8001fa6:	e01b      	b.n	8001fe0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <osMessageQueueGet+0x80>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d103      	bne.n	8001fbc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8001fb4:	f06f 0303 	mvn.w	r3, #3
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e011      	b.n	8001fe0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	69b8      	ldr	r0, [r7, #24]
 8001fc2:	f000 fbe3 	bl	800278c <xQueueReceive>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d009      	beq.n	8001fe0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8001fd2:	f06f 0301 	mvn.w	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	e002      	b.n	8001fe0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8001fda:	f06f 0302 	mvn.w	r3, #2
 8001fde:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000ed04 	.word	0xe000ed04

08001ff0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a07      	ldr	r2, [pc, #28]	@ (800201c <vApplicationGetIdleTaskMemory+0x2c>)
 8002000:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4a06      	ldr	r2, [pc, #24]	@ (8002020 <vApplicationGetIdleTaskMemory+0x30>)
 8002006:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2280      	movs	r2, #128	@ 0x80
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	200000e8 	.word	0x200000e8
 8002020:	20000144 	.word	0x20000144

08002024 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4a07      	ldr	r2, [pc, #28]	@ (8002050 <vApplicationGetTimerTaskMemory+0x2c>)
 8002034:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4a06      	ldr	r2, [pc, #24]	@ (8002054 <vApplicationGetTimerTaskMemory+0x30>)
 800203a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002042:	601a      	str	r2, [r3, #0]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	20000344 	.word	0x20000344
 8002054:	200003a0 	.word	0x200003a0

08002058 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f103 0208 	add.w	r2, r3, #8
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f103 0208 	add.w	r2, r3, #8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f103 0208 	add.w	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d103      	bne.n	800211a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	e00c      	b.n	8002134 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3308      	adds	r3, #8
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e002      	b.n	8002128 <vListInsert+0x2e>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	429a      	cmp	r2, r3
 8002132:	d2f6      	bcs.n	8002122 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	601a      	str	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6892      	ldr	r2, [r2, #8]
 8002182:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6852      	ldr	r2, [r2, #4]
 800218c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d103      	bne.n	80021a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1e5a      	subs	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80021ec:	f002 f934 	bl	8004458 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f8:	68f9      	ldr	r1, [r7, #12]
 80021fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	441a      	add	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221c:	3b01      	subs	r3, #1
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	441a      	add	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	22ff      	movs	r2, #255	@ 0xff
 8002230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	22ff      	movs	r2, #255	@ 0xff
 8002238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d114      	bne.n	800226c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d01a      	beq.n	8002280 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3310      	adds	r3, #16
 800224e:	4618      	mov	r0, r3
 8002250:	f001 f9d8 	bl	8003604 <xTaskRemoveFromEventList>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d012      	beq.n	8002280 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <xQueueGenericReset+0xd0>)
 800225c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	f3bf 8f6f 	isb	sy
 800226a:	e009      	b.n	8002280 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	3310      	adds	r3, #16
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fef1 	bl	8002058 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3324      	adds	r3, #36	@ 0x24
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff feec 	bl	8002058 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002280:	f002 f91c 	bl	80044bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002284:	2301      	movs	r3, #1
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	e000ed04 	.word	0xe000ed04

08002294 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08e      	sub	sp, #56	@ 0x38
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80022ba:	bf00      	nop
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80022c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	e7fd      	b.n	80022da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <xQueueGenericCreateStatic+0x56>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <xQueueGenericCreateStatic+0x5a>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <xQueueGenericCreateStatic+0x5c>
 80022ee:	2300      	movs	r3, #0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80022f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	623b      	str	r3, [r7, #32]
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <xQueueGenericCreateStatic+0x84>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <xQueueGenericCreateStatic+0x88>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <xQueueGenericCreateStatic+0x8a>
 800231c:	2300      	movs	r3, #0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10b      	bne.n	800233a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002326:	f383 8811 	msr	BASEPRI, r3
 800232a:	f3bf 8f6f 	isb	sy
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	61fb      	str	r3, [r7, #28]
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	e7fd      	b.n	8002336 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800233a:	2350      	movs	r3, #80	@ 0x50
 800233c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b50      	cmp	r3, #80	@ 0x50
 8002342:	d00b      	beq.n	800235c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	61bb      	str	r3, [r7, #24]
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800235c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002370:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f840 	bl	8002404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002386:	4618      	mov	r0, r3
 8002388:	3730      	adds	r7, #48	@ 0x30
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800238e:	b580      	push	{r7, lr}
 8002390:	b08a      	sub	sp, #40	@ 0x28
 8002392:	af02      	add	r7, sp, #8
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	4613      	mov	r3, r2
 800239a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <xQueueGenericCreate+0x2c>
	__asm volatile
 80023a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a6:	f383 8811 	msr	BASEPRI, r3
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	613b      	str	r3, [r7, #16]
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	e7fd      	b.n	80023b6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3350      	adds	r3, #80	@ 0x50
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 f967 	bl	800469c <pvPortMalloc>
 80023ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d011      	beq.n	80023fa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3350      	adds	r3, #80	@ 0x50
 80023de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023e8:	79fa      	ldrb	r2, [r7, #7]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	4613      	mov	r3, r2
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f805 	bl	8002404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023fa:	69bb      	ldr	r3, [r7, #24]
	}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e002      	b.n	8002426 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002432:	2101      	movs	r1, #1
 8002434:	69b8      	ldr	r0, [r7, #24]
 8002436:	f7ff fec3 	bl	80021c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08e      	sub	sp, #56	@ 0x38
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800245a:	2300      	movs	r3, #0
 800245c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <xQueueGenericSend+0x34>
	__asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <xQueueGenericSend+0x42>
 8002486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <xQueueGenericSend+0x46>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <xQueueGenericSend+0x48>
 8002492:	2300      	movs	r3, #0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10b      	bne.n	80024b0 <xQueueGenericSend+0x64>
	__asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d103      	bne.n	80024be <xQueueGenericSend+0x72>
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <xQueueGenericSend+0x76>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <xQueueGenericSend+0x78>
 80024c2:	2300      	movs	r3, #0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <xQueueGenericSend+0x94>
	__asm volatile
 80024c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	623b      	str	r3, [r7, #32]
}
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024e0:	f001 fa50 	bl	8003984 <xTaskGetSchedulerState>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <xQueueGenericSend+0xa4>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <xQueueGenericSend+0xa8>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <xQueueGenericSend+0xaa>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10b      	bne.n	8002512 <xQueueGenericSend+0xc6>
	__asm volatile
 80024fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	61fb      	str	r3, [r7, #28]
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	e7fd      	b.n	800250e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002512:	f001 ffa1 	bl	8004458 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800251a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251e:	429a      	cmp	r2, r3
 8002520:	d302      	bcc.n	8002528 <xQueueGenericSend+0xdc>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d129      	bne.n	800257c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800252e:	f000 fa91 	bl	8002a54 <prvCopyDataToQueue>
 8002532:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800253c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253e:	3324      	adds	r3, #36	@ 0x24
 8002540:	4618      	mov	r0, r3
 8002542:	f001 f85f 	bl	8003604 <xTaskRemoveFromEventList>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800254c:	4b3f      	ldr	r3, [pc, #252]	@ (800264c <xQueueGenericSend+0x200>)
 800254e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	e00a      	b.n	8002574 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800255e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002564:	4b39      	ldr	r3, [pc, #228]	@ (800264c <xQueueGenericSend+0x200>)
 8002566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002574:	f001 ffa2 	bl	80044bc <vPortExitCritical>
				return pdPASS;
 8002578:	2301      	movs	r3, #1
 800257a:	e063      	b.n	8002644 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d103      	bne.n	800258a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002582:	f001 ff9b 	bl	80044bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002586:	2300      	movs	r3, #0
 8002588:	e05c      	b.n	8002644 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800258a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258c:	2b00      	cmp	r3, #0
 800258e:	d106      	bne.n	800259e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4618      	mov	r0, r3
 8002596:	f001 f899 	bl	80036cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800259a:	2301      	movs	r3, #1
 800259c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800259e:	f001 ff8d 	bl	80044bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025a2:	f000 fe09 	bl	80031b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025a6:	f001 ff57 	bl	8004458 <vPortEnterCritical>
 80025aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025b0:	b25b      	sxtb	r3, r3
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b6:	d103      	bne.n	80025c0 <xQueueGenericSend+0x174>
 80025b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025c6:	b25b      	sxtb	r3, r3
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d103      	bne.n	80025d6 <xQueueGenericSend+0x18a>
 80025ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025d6:	f001 ff71 	bl	80044bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025da:	1d3a      	adds	r2, r7, #4
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 f888 	bl	80036f8 <xTaskCheckForTimeOut>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d124      	bne.n	8002638 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025f0:	f000 fb28 	bl	8002c44 <prvIsQueueFull>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d018      	beq.n	800262c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	3310      	adds	r3, #16
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f000 ffac 	bl	8003560 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800260a:	f000 fab3 	bl	8002b74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800260e:	f000 fde1 	bl	80031d4 <xTaskResumeAll>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f47f af7c 	bne.w	8002512 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <xQueueGenericSend+0x200>)
 800261c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	e772      	b.n	8002512 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800262c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800262e:	f000 faa1 	bl	8002b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002632:	f000 fdcf 	bl	80031d4 <xTaskResumeAll>
 8002636:	e76c      	b.n	8002512 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002638:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800263a:	f000 fa9b 	bl	8002b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800263e:	f000 fdc9 	bl	80031d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002642:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002644:	4618      	mov	r0, r3
 8002646:	3738      	adds	r7, #56	@ 0x38
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	e000ed04 	.word	0xe000ed04

08002650 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b090      	sub	sp, #64	@ 0x40
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d103      	bne.n	800268e <xQueueGenericSendFromISR+0x3e>
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <xQueueGenericSendFromISR+0x42>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <xQueueGenericSendFromISR+0x44>
 8002692:	2300      	movs	r3, #0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d103      	bne.n	80026be <xQueueGenericSendFromISR+0x6e>
 80026b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <xQueueGenericSendFromISR+0x72>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <xQueueGenericSendFromISR+0x74>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	623b      	str	r3, [r7, #32]
}
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026e0:	f001 ff9a 	bl	8004618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026e4:	f3ef 8211 	mrs	r2, BASEPRI
 80026e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	61fa      	str	r2, [r7, #28]
 80026fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002702:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002708:	429a      	cmp	r2, r3
 800270a:	d302      	bcc.n	8002712 <xQueueGenericSendFromISR+0xc2>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d12f      	bne.n	8002772 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002714:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002718:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800271c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002728:	f000 f994 	bl	8002a54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800272c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d112      	bne.n	800275c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800273e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002740:	3324      	adds	r3, #36	@ 0x24
 8002742:	4618      	mov	r0, r3
 8002744:	f000 ff5e 	bl	8003604 <xTaskRemoveFromEventList>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00e      	beq.n	800276c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e007      	b.n	800276c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800275c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002760:	3301      	adds	r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	b25a      	sxtb	r2, r3
 8002766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800276c:	2301      	movs	r3, #1
 800276e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002770:	e001      	b.n	8002776 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002772:	2300      	movs	r3, #0
 8002774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002778:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002780:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002784:	4618      	mov	r0, r3
 8002786:	3740      	adds	r7, #64	@ 0x40
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	@ 0x30
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <xQueueReceive+0x32>
	__asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	623b      	str	r3, [r7, #32]
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	e7fd      	b.n	80027ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d103      	bne.n	80027cc <xQueueReceive+0x40>
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <xQueueReceive+0x44>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <xQueueReceive+0x46>
 80027d0:	2300      	movs	r3, #0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10b      	bne.n	80027ee <xQueueReceive+0x62>
	__asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	61fb      	str	r3, [r7, #28]
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	e7fd      	b.n	80027ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ee:	f001 f8c9 	bl	8003984 <xTaskGetSchedulerState>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <xQueueReceive+0x72>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <xQueueReceive+0x76>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <xQueueReceive+0x78>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10b      	bne.n	8002820 <xQueueReceive+0x94>
	__asm volatile
 8002808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	61bb      	str	r3, [r7, #24]
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002820:	f001 fe1a 	bl	8004458 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01f      	beq.n	8002870 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002834:	f000 f978 	bl	8002b28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	1e5a      	subs	r2, r3, #1
 800283c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00f      	beq.n	8002868 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284a:	3310      	adds	r3, #16
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fed9 	bl	8003604 <xTaskRemoveFromEventList>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002858:	4b3c      	ldr	r3, [pc, #240]	@ (800294c <xQueueReceive+0x1c0>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002868:	f001 fe28 	bl	80044bc <vPortExitCritical>
				return pdPASS;
 800286c:	2301      	movs	r3, #1
 800286e:	e069      	b.n	8002944 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002876:	f001 fe21 	bl	80044bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800287a:	2300      	movs	r3, #0
 800287c:	e062      	b.n	8002944 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800287e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	4618      	mov	r0, r3
 800288a:	f000 ff1f 	bl	80036cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800288e:	2301      	movs	r3, #1
 8002890:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002892:	f001 fe13 	bl	80044bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002896:	f000 fc8f 	bl	80031b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800289a:	f001 fddd 	bl	8004458 <vPortEnterCritical>
 800289e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d103      	bne.n	80028b4 <xQueueReceive+0x128>
 80028ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d103      	bne.n	80028ca <xQueueReceive+0x13e>
 80028c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028ca:	f001 fdf7 	bl	80044bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028ce:	1d3a      	adds	r2, r7, #4
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 ff0e 	bl	80036f8 <xTaskCheckForTimeOut>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d123      	bne.n	800292a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028e4:	f000 f998 	bl	8002c18 <prvIsQueueEmpty>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d017      	beq.n	800291e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f0:	3324      	adds	r3, #36	@ 0x24
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fe32 	bl	8003560 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028fe:	f000 f939 	bl	8002b74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002902:	f000 fc67 	bl	80031d4 <xTaskResumeAll>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d189      	bne.n	8002820 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800290c:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <xQueueReceive+0x1c0>)
 800290e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	e780      	b.n	8002820 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800291e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002920:	f000 f928 	bl	8002b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002924:	f000 fc56 	bl	80031d4 <xTaskResumeAll>
 8002928:	e77a      	b.n	8002820 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800292a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800292c:	f000 f922 	bl	8002b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002930:	f000 fc50 	bl	80031d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002934:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002936:	f000 f96f 	bl	8002c18 <prvIsQueueEmpty>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	f43f af6f 	beq.w	8002820 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002942:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002944:	4618      	mov	r0, r3
 8002946:	3730      	adds	r7, #48	@ 0x30
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	e000ed04 	.word	0xe000ed04

08002950 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08e      	sub	sp, #56	@ 0x38
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10b      	bne.n	800297e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800296a:	f383 8811 	msr	BASEPRI, r3
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	623b      	str	r3, [r7, #32]
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	e7fd      	b.n	800297a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d103      	bne.n	800298c <xQueueReceiveFromISR+0x3c>
 8002984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <xQueueReceiveFromISR+0x40>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <xQueueReceiveFromISR+0x42>
 8002990:	2300      	movs	r3, #0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299a:	f383 8811 	msr	BASEPRI, r3
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	61fb      	str	r3, [r7, #28]
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	e7fd      	b.n	80029aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029ae:	f001 fe33 	bl	8004618 <vPortValidateInterruptPriority>
	__asm volatile
 80029b2:	f3ef 8211 	mrs	r2, BASEPRI
 80029b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	61ba      	str	r2, [r7, #24]
 80029c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80029ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d02f      	beq.n	8002a3a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80029da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029e8:	f000 f89e 	bl	8002b28 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ee:	1e5a      	subs	r2, r3, #1
 80029f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80029f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d112      	bne.n	8002a24 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a08:	3310      	adds	r3, #16
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fdfa 	bl	8003604 <xTaskRemoveFromEventList>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e007      	b.n	8002a34 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a28:	3301      	adds	r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	b25a      	sxtb	r2, r3
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002a34:	2301      	movs	r3, #1
 8002a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a38:	e001      	b.n	8002a3e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f383 8811 	msr	BASEPRI, r3
}
 8002a48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3738      	adds	r7, #56	@ 0x38
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10d      	bne.n	8002a8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d14d      	bne.n	8002b16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 ff9e 	bl	80039c0 <xTaskPriorityDisinherit>
 8002a84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	e043      	b.n	8002b16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d119      	bne.n	8002ac8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6858      	ldr	r0, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	f002 f97d 	bl	8004d9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	441a      	add	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d32b      	bcc.n	8002b16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	e026      	b.n	8002b16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	68d8      	ldr	r0, [r3, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	f002 f963 	bl	8004d9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	441a      	add	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d207      	bcs.n	8002b04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	425b      	negs	r3, r3
 8002afe:	441a      	add	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d105      	bne.n	8002b16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002b1e:	697b      	ldr	r3, [r7, #20]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d018      	beq.n	8002b6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d303      	bcc.n	8002b5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68d9      	ldr	r1, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	461a      	mov	r2, r3
 8002b66:	6838      	ldr	r0, [r7, #0]
 8002b68:	f002 f919 	bl	8004d9e <memcpy>
	}
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b7c:	f001 fc6c 	bl	8004458 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b88:	e011      	b.n	8002bae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d012      	beq.n	8002bb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3324      	adds	r3, #36	@ 0x24
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fd34 	bl	8003604 <xTaskRemoveFromEventList>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ba2:	f000 fe0d 	bl	80037c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	dce9      	bgt.n	8002b8a <prvUnlockQueue+0x16>
 8002bb6:	e000      	b.n	8002bba <prvUnlockQueue+0x46>
					break;
 8002bb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	22ff      	movs	r2, #255	@ 0xff
 8002bbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002bc2:	f001 fc7b 	bl	80044bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002bc6:	f001 fc47 	bl	8004458 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bd2:	e011      	b.n	8002bf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d012      	beq.n	8002c02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3310      	adds	r3, #16
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fd0f 	bl	8003604 <xTaskRemoveFromEventList>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002bec:	f000 fde8 	bl	80037c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002bf0:	7bbb      	ldrb	r3, [r7, #14]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	dce9      	bgt.n	8002bd4 <prvUnlockQueue+0x60>
 8002c00:	e000      	b.n	8002c04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002c0c:	f001 fc56 	bl	80044bc <vPortExitCritical>
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c20:	f001 fc1a 	bl	8004458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e001      	b.n	8002c36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c36:	f001 fc41 	bl	80044bc <vPortExitCritical>

	return xReturn;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c4c:	f001 fc04 	bl	8004458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d102      	bne.n	8002c62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e001      	b.n	8002c66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c66:	f001 fc29 	bl	80044bc <vPortExitCritical>

	return xReturn;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e014      	b.n	8002cae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c84:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc4 <vQueueAddToRegistry+0x50>)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10b      	bne.n	8002ca8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c90:	490c      	ldr	r1, [pc, #48]	@ (8002cc4 <vQueueAddToRegistry+0x50>)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc4 <vQueueAddToRegistry+0x50>)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ca6:	e006      	b.n	8002cb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b07      	cmp	r3, #7
 8002cb2:	d9e7      	bls.n	8002c84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	200007a0 	.word	0x200007a0

08002cc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002cd8:	f001 fbbe 	bl	8004458 <vPortEnterCritical>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d103      	bne.n	8002cf2 <vQueueWaitForMessageRestricted+0x2a>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cf8:	b25b      	sxtb	r3, r3
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d103      	bne.n	8002d08 <vQueueWaitForMessageRestricted+0x40>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d08:	f001 fbd8 	bl	80044bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3324      	adds	r3, #36	@ 0x24
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fc45 	bl	80035ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7ff ff26 	bl	8002b74 <prvUnlockQueue>
	}
 8002d28:	bf00      	nop
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08e      	sub	sp, #56	@ 0x38
 8002d34:	af04      	add	r7, sp, #16
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	623b      	str	r3, [r7, #32]
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10b      	bne.n	8002d7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	61fb      	str	r3, [r7, #28]
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	e7fd      	b.n	8002d76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d7a:	235c      	movs	r3, #92	@ 0x5c
 8002d7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b5c      	cmp	r3, #92	@ 0x5c
 8002d82:	d00b      	beq.n	8002d9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	61bb      	str	r3, [r7, #24]
}
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01e      	beq.n	8002de2 <xTaskCreateStatic+0xb2>
 8002da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01b      	beq.n	8002de2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002db2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9303      	str	r3, [sp, #12]
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	9302      	str	r3, [sp, #8]
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f850 	bl	8002e7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ddc:	f000 f8de 	bl	8002f9c <prvAddNewTaskToReadyList>
 8002de0:	e001      	b.n	8002de6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002de6:	697b      	ldr	r3, [r7, #20]
	}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3728      	adds	r7, #40	@ 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	@ 0x30
 8002df4:	af04      	add	r7, sp, #16
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 fc49 	bl	800469c <pvPortMalloc>
 8002e0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00e      	beq.n	8002e30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e12:	205c      	movs	r0, #92	@ 0x5c
 8002e14:	f001 fc42 	bl	800469c <pvPortMalloc>
 8002e18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e26:	e005      	b.n	8002e34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e28:	6978      	ldr	r0, [r7, #20]
 8002e2a:	f001 fd05 	bl	8004838 <vPortFree>
 8002e2e:	e001      	b.n	8002e34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e42:	88fa      	ldrh	r2, [r7, #6]
 8002e44:	2300      	movs	r3, #0
 8002e46:	9303      	str	r3, [sp, #12]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	9302      	str	r3, [sp, #8]
 8002e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f80e 	bl	8002e7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e5e:	69f8      	ldr	r0, [r7, #28]
 8002e60:	f000 f89c 	bl	8002f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e64:	2301      	movs	r3, #1
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	e002      	b.n	8002e70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e70:	69bb      	ldr	r3, [r7, #24]
	}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b088      	sub	sp, #32
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	461a      	mov	r2, r3
 8002e92:	21a5      	movs	r1, #165	@ 0xa5
 8002e94:	f001 ff07 	bl	8004ca6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f023 0307 	bic.w	r3, r3, #7
 8002eb0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	617b      	str	r3, [r7, #20]
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01f      	beq.n	8002f1a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e012      	b.n	8002f06 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	7819      	ldrb	r1, [r3, #0]
 8002ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	3334      	adds	r3, #52	@ 0x34
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	3301      	adds	r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2b0f      	cmp	r3, #15
 8002f0a:	d9e9      	bls.n	8002ee0 <prvInitialiseNewTask+0x66>
 8002f0c:	e000      	b.n	8002f10 <prvInitialiseNewTask+0x96>
			{
				break;
 8002f0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f18:	e003      	b.n	8002f22 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f24:	2b37      	cmp	r3, #55	@ 0x37
 8002f26:	d901      	bls.n	8002f2c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f28:	2337      	movs	r3, #55	@ 0x37
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f30:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f36:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	3304      	adds	r3, #4
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff f8a8 	bl	8002098 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f8a3 	bl	8002098 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	69b8      	ldr	r0, [r7, #24]
 8002f7c:	f001 f93e 	bl	80041fc <pxPortInitialiseStack>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f92:	bf00      	nop
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fa4:	f001 fa58 	bl	8004458 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8003060 <prvAddNewTaskToReadyList+0xc4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	4a2c      	ldr	r2, [pc, #176]	@ (8003060 <prvAddNewTaskToReadyList+0xc4>)
 8002fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003064 <prvAddNewTaskToReadyList+0xc8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fba:	4a2a      	ldr	r2, [pc, #168]	@ (8003064 <prvAddNewTaskToReadyList+0xc8>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fc0:	4b27      	ldr	r3, [pc, #156]	@ (8003060 <prvAddNewTaskToReadyList+0xc4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d110      	bne.n	8002fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fc8:	f000 fc1e 	bl	8003808 <prvInitialiseTaskLists>
 8002fcc:	e00d      	b.n	8002fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fce:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <prvAddNewTaskToReadyList+0xcc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fd6:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <prvAddNewTaskToReadyList+0xc8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d802      	bhi.n	8002fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <prvAddNewTaskToReadyList+0xc8>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fea:	4b20      	ldr	r3, [pc, #128]	@ (800306c <prvAddNewTaskToReadyList+0xd0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800306c <prvAddNewTaskToReadyList+0xd0>)
 8002ff2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800306c <prvAddNewTaskToReadyList+0xd0>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003000:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <prvAddNewTaskToReadyList+0xd4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d903      	bls.n	8003010 <prvAddNewTaskToReadyList+0x74>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	4a18      	ldr	r2, [pc, #96]	@ (8003070 <prvAddNewTaskToReadyList+0xd4>)
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4a15      	ldr	r2, [pc, #84]	@ (8003074 <prvAddNewTaskToReadyList+0xd8>)
 800301e:	441a      	add	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f7ff f843 	bl	80020b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800302c:	f001 fa46 	bl	80044bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003030:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <prvAddNewTaskToReadyList+0xcc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00e      	beq.n	8003056 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003038:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <prvAddNewTaskToReadyList+0xc8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003042:	429a      	cmp	r2, r3
 8003044:	d207      	bcs.n	8003056 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003046:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <prvAddNewTaskToReadyList+0xdc>)
 8003048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000cb4 	.word	0x20000cb4
 8003064:	200007e0 	.word	0x200007e0
 8003068:	20000cc0 	.word	0x20000cc0
 800306c:	20000cd0 	.word	0x20000cd0
 8003070:	20000cbc 	.word	0x20000cbc
 8003074:	200007e4 	.word	0x200007e4
 8003078:	e000ed04 	.word	0xe000ed04

0800307c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d018      	beq.n	80030c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800308e:	4b14      	ldr	r3, [pc, #80]	@ (80030e0 <vTaskDelay+0x64>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <vTaskDelay+0x32>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	60bb      	str	r3, [r7, #8]
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	e7fd      	b.n	80030aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030ae:	f000 f883 	bl	80031b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030b2:	2100      	movs	r1, #0
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 fcf3 	bl	8003aa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030ba:	f000 f88b 	bl	80031d4 <xTaskResumeAll>
 80030be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80030c6:	4b07      	ldr	r3, [pc, #28]	@ (80030e4 <vTaskDelay+0x68>)
 80030c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000cdc 	.word	0x20000cdc
 80030e4:	e000ed04 	.word	0xe000ed04

080030e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	@ 0x28
 80030ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030f6:	463a      	mov	r2, r7
 80030f8:	1d39      	adds	r1, r7, #4
 80030fa:	f107 0308 	add.w	r3, r7, #8
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe ff76 	bl	8001ff0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	9202      	str	r2, [sp, #8]
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	2300      	movs	r3, #0
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	2300      	movs	r3, #0
 8003114:	460a      	mov	r2, r1
 8003116:	4922      	ldr	r1, [pc, #136]	@ (80031a0 <vTaskStartScheduler+0xb8>)
 8003118:	4822      	ldr	r0, [pc, #136]	@ (80031a4 <vTaskStartScheduler+0xbc>)
 800311a:	f7ff fe09 	bl	8002d30 <xTaskCreateStatic>
 800311e:	4603      	mov	r3, r0
 8003120:	4a21      	ldr	r2, [pc, #132]	@ (80031a8 <vTaskStartScheduler+0xc0>)
 8003122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003124:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <vTaskStartScheduler+0xc0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800312c:	2301      	movs	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	e001      	b.n	8003136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d102      	bne.n	8003142 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800313c:	f000 fd04 	bl	8003b48 <xTimerCreateTimerTask>
 8003140:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d116      	bne.n	8003176 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	613b      	str	r3, [r7, #16]
}
 800315a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800315c:	4b13      	ldr	r3, [pc, #76]	@ (80031ac <vTaskStartScheduler+0xc4>)
 800315e:	f04f 32ff 	mov.w	r2, #4294967295
 8003162:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003164:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <vTaskStartScheduler+0xc8>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800316a:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <vTaskStartScheduler+0xcc>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003170:	f001 f8ce 	bl	8004310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003174:	e00f      	b.n	8003196 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d10b      	bne.n	8003196 <vTaskStartScheduler+0xae>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	60fb      	str	r3, [r7, #12]
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	e7fd      	b.n	8003192 <vTaskStartScheduler+0xaa>
}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	080059cc 	.word	0x080059cc
 80031a4:	080037d9 	.word	0x080037d9
 80031a8:	20000cd8 	.word	0x20000cd8
 80031ac:	20000cd4 	.word	0x20000cd4
 80031b0:	20000cc0 	.word	0x20000cc0
 80031b4:	20000cb8 	.word	0x20000cb8

080031b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80031bc:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <vTaskSuspendAll+0x18>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	4a03      	ldr	r2, [pc, #12]	@ (80031d0 <vTaskSuspendAll+0x18>)
 80031c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	20000cdc 	.word	0x20000cdc

080031d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031e2:	4b42      	ldr	r3, [pc, #264]	@ (80032ec <xTaskResumeAll+0x118>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <xTaskResumeAll+0x2e>
	__asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	603b      	str	r3, [r7, #0]
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	e7fd      	b.n	80031fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003202:	f001 f929 	bl	8004458 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003206:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <xTaskResumeAll+0x118>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3b01      	subs	r3, #1
 800320c:	4a37      	ldr	r2, [pc, #220]	@ (80032ec <xTaskResumeAll+0x118>)
 800320e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003210:	4b36      	ldr	r3, [pc, #216]	@ (80032ec <xTaskResumeAll+0x118>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d162      	bne.n	80032de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003218:	4b35      	ldr	r3, [pc, #212]	@ (80032f0 <xTaskResumeAll+0x11c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d05e      	beq.n	80032de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003220:	e02f      	b.n	8003282 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003222:	4b34      	ldr	r3, [pc, #208]	@ (80032f4 <xTaskResumeAll+0x120>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3318      	adds	r3, #24
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe ff9c 	bl	800216c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3304      	adds	r3, #4
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe ff97 	bl	800216c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003242:	4b2d      	ldr	r3, [pc, #180]	@ (80032f8 <xTaskResumeAll+0x124>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d903      	bls.n	8003252 <xTaskResumeAll+0x7e>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	4a2a      	ldr	r2, [pc, #168]	@ (80032f8 <xTaskResumeAll+0x124>)
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4a27      	ldr	r2, [pc, #156]	@ (80032fc <xTaskResumeAll+0x128>)
 8003260:	441a      	add	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3304      	adds	r3, #4
 8003266:	4619      	mov	r1, r3
 8003268:	4610      	mov	r0, r2
 800326a:	f7fe ff22 	bl	80020b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003272:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <xTaskResumeAll+0x12c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	429a      	cmp	r2, r3
 800327a:	d302      	bcc.n	8003282 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800327c:	4b21      	ldr	r3, [pc, #132]	@ (8003304 <xTaskResumeAll+0x130>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003282:	4b1c      	ldr	r3, [pc, #112]	@ (80032f4 <xTaskResumeAll+0x120>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1cb      	bne.n	8003222 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003290:	f000 fb58 	bl	8003944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003294:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <xTaskResumeAll+0x134>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d010      	beq.n	80032c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032a0:	f000 f846 	bl	8003330 <xTaskIncrementTick>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80032aa:	4b16      	ldr	r3, [pc, #88]	@ (8003304 <xTaskResumeAll+0x130>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f1      	bne.n	80032a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80032bc:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <xTaskResumeAll+0x134>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032c2:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <xTaskResumeAll+0x130>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032ce:	4b0f      	ldr	r3, [pc, #60]	@ (800330c <xTaskResumeAll+0x138>)
 80032d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032de:	f001 f8ed 	bl	80044bc <vPortExitCritical>

	return xAlreadyYielded;
 80032e2:	68bb      	ldr	r3, [r7, #8]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000cdc 	.word	0x20000cdc
 80032f0:	20000cb4 	.word	0x20000cb4
 80032f4:	20000c74 	.word	0x20000c74
 80032f8:	20000cbc 	.word	0x20000cbc
 80032fc:	200007e4 	.word	0x200007e4
 8003300:	200007e0 	.word	0x200007e0
 8003304:	20000cc8 	.word	0x20000cc8
 8003308:	20000cc4 	.word	0x20000cc4
 800330c:	e000ed04 	.word	0xe000ed04

08003310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003316:	4b05      	ldr	r3, [pc, #20]	@ (800332c <xTaskGetTickCount+0x1c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800331c:	687b      	ldr	r3, [r7, #4]
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000cb8 	.word	0x20000cb8

08003330 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800333a:	4b4f      	ldr	r3, [pc, #316]	@ (8003478 <xTaskIncrementTick+0x148>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 8090 	bne.w	8003464 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003344:	4b4d      	ldr	r3, [pc, #308]	@ (800347c <xTaskIncrementTick+0x14c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800334c:	4a4b      	ldr	r2, [pc, #300]	@ (800347c <xTaskIncrementTick+0x14c>)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d121      	bne.n	800339c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003358:	4b49      	ldr	r3, [pc, #292]	@ (8003480 <xTaskIncrementTick+0x150>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	603b      	str	r3, [r7, #0]
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	e7fd      	b.n	8003376 <xTaskIncrementTick+0x46>
 800337a:	4b41      	ldr	r3, [pc, #260]	@ (8003480 <xTaskIncrementTick+0x150>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	4b40      	ldr	r3, [pc, #256]	@ (8003484 <xTaskIncrementTick+0x154>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a3e      	ldr	r2, [pc, #248]	@ (8003480 <xTaskIncrementTick+0x150>)
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4a3e      	ldr	r2, [pc, #248]	@ (8003484 <xTaskIncrementTick+0x154>)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b3e      	ldr	r3, [pc, #248]	@ (8003488 <xTaskIncrementTick+0x158>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	4a3c      	ldr	r2, [pc, #240]	@ (8003488 <xTaskIncrementTick+0x158>)
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	f000 fad4 	bl	8003944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800339c:	4b3b      	ldr	r3, [pc, #236]	@ (800348c <xTaskIncrementTick+0x15c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d349      	bcc.n	800343a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033a6:	4b36      	ldr	r3, [pc, #216]	@ (8003480 <xTaskIncrementTick+0x150>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d104      	bne.n	80033ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033b0:	4b36      	ldr	r3, [pc, #216]	@ (800348c <xTaskIncrementTick+0x15c>)
 80033b2:	f04f 32ff 	mov.w	r2, #4294967295
 80033b6:	601a      	str	r2, [r3, #0]
					break;
 80033b8:	e03f      	b.n	800343a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ba:	4b31      	ldr	r3, [pc, #196]	@ (8003480 <xTaskIncrementTick+0x150>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d203      	bcs.n	80033da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033d2:	4a2e      	ldr	r2, [pc, #184]	@ (800348c <xTaskIncrementTick+0x15c>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033d8:	e02f      	b.n	800343a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3304      	adds	r3, #4
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fec4 	bl	800216c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3318      	adds	r3, #24
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe febb 	bl	800216c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033fa:	4b25      	ldr	r3, [pc, #148]	@ (8003490 <xTaskIncrementTick+0x160>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d903      	bls.n	800340a <xTaskIncrementTick+0xda>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	4a22      	ldr	r2, [pc, #136]	@ (8003490 <xTaskIncrementTick+0x160>)
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4a1f      	ldr	r2, [pc, #124]	@ (8003494 <xTaskIncrementTick+0x164>)
 8003418:	441a      	add	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3304      	adds	r3, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f7fe fe46 	bl	80020b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800342a:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <xTaskIncrementTick+0x168>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	429a      	cmp	r2, r3
 8003432:	d3b8      	bcc.n	80033a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003434:	2301      	movs	r3, #1
 8003436:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003438:	e7b5      	b.n	80033a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800343a:	4b17      	ldr	r3, [pc, #92]	@ (8003498 <xTaskIncrementTick+0x168>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003440:	4914      	ldr	r1, [pc, #80]	@ (8003494 <xTaskIncrementTick+0x164>)
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d901      	bls.n	8003456 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003452:	2301      	movs	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003456:	4b11      	ldr	r3, [pc, #68]	@ (800349c <xTaskIncrementTick+0x16c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800345e:	2301      	movs	r3, #1
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e004      	b.n	800346e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003464:	4b0e      	ldr	r3, [pc, #56]	@ (80034a0 <xTaskIncrementTick+0x170>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	4a0d      	ldr	r2, [pc, #52]	@ (80034a0 <xTaskIncrementTick+0x170>)
 800346c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800346e:	697b      	ldr	r3, [r7, #20]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000cdc 	.word	0x20000cdc
 800347c:	20000cb8 	.word	0x20000cb8
 8003480:	20000c6c 	.word	0x20000c6c
 8003484:	20000c70 	.word	0x20000c70
 8003488:	20000ccc 	.word	0x20000ccc
 800348c:	20000cd4 	.word	0x20000cd4
 8003490:	20000cbc 	.word	0x20000cbc
 8003494:	200007e4 	.word	0x200007e4
 8003498:	200007e0 	.word	0x200007e0
 800349c:	20000cc8 	.word	0x20000cc8
 80034a0:	20000cc4 	.word	0x20000cc4

080034a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034aa:	4b28      	ldr	r3, [pc, #160]	@ (800354c <vTaskSwitchContext+0xa8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034b2:	4b27      	ldr	r3, [pc, #156]	@ (8003550 <vTaskSwitchContext+0xac>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034b8:	e042      	b.n	8003540 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80034ba:	4b25      	ldr	r3, [pc, #148]	@ (8003550 <vTaskSwitchContext+0xac>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c0:	4b24      	ldr	r3, [pc, #144]	@ (8003554 <vTaskSwitchContext+0xb0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e011      	b.n	80034ec <vTaskSwitchContext+0x48>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	607b      	str	r3, [r7, #4]
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	e7fd      	b.n	80034e2 <vTaskSwitchContext+0x3e>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	491a      	ldr	r1, [pc, #104]	@ (8003558 <vTaskSwitchContext+0xb4>)
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0e3      	beq.n	80034c8 <vTaskSwitchContext+0x24>
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <vTaskSwitchContext+0xb4>)
 800350c:	4413      	add	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3308      	adds	r3, #8
 8003522:	429a      	cmp	r2, r3
 8003524:	d104      	bne.n	8003530 <vTaskSwitchContext+0x8c>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	4a09      	ldr	r2, [pc, #36]	@ (800355c <vTaskSwitchContext+0xb8>)
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4a06      	ldr	r2, [pc, #24]	@ (8003554 <vTaskSwitchContext+0xb0>)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	20000cdc 	.word	0x20000cdc
 8003550:	20000cc8 	.word	0x20000cc8
 8003554:	20000cbc 	.word	0x20000cbc
 8003558:	200007e4 	.word	0x200007e4
 800355c:	200007e0 	.word	0x200007e0

08003560 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	60fb      	str	r3, [r7, #12]
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003588:	4b07      	ldr	r3, [pc, #28]	@ (80035a8 <vTaskPlaceOnEventList+0x48>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3318      	adds	r3, #24
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7fe fdb2 	bl	80020fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003596:	2101      	movs	r1, #1
 8003598:	6838      	ldr	r0, [r7, #0]
 800359a:	f000 fa81 	bl	8003aa0 <prvAddCurrentTaskToDelayedList>
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200007e0 	.word	0x200007e0

080035ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10b      	bne.n	80035d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	617b      	str	r3, [r7, #20]
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	e7fd      	b.n	80035d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <vTaskPlaceOnEventListRestricted+0x54>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3318      	adds	r3, #24
 80035dc:	4619      	mov	r1, r3
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7fe fd67 	bl	80020b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	68b8      	ldr	r0, [r7, #8]
 80035f4:	f000 fa54 	bl	8003aa0 <prvAddCurrentTaskToDelayedList>
	}
 80035f8:	bf00      	nop
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	200007e0 	.word	0x200007e0

08003604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	60fb      	str	r3, [r7, #12]
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	e7fd      	b.n	800362e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	3318      	adds	r3, #24
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fd98 	bl	800216c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800363c:	4b1d      	ldr	r3, [pc, #116]	@ (80036b4 <xTaskRemoveFromEventList+0xb0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11d      	bne.n	8003680 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	3304      	adds	r3, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe fd8f 	bl	800216c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003652:	4b19      	ldr	r3, [pc, #100]	@ (80036b8 <xTaskRemoveFromEventList+0xb4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d903      	bls.n	8003662 <xTaskRemoveFromEventList+0x5e>
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	4a16      	ldr	r2, [pc, #88]	@ (80036b8 <xTaskRemoveFromEventList+0xb4>)
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4a13      	ldr	r2, [pc, #76]	@ (80036bc <xTaskRemoveFromEventList+0xb8>)
 8003670:	441a      	add	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f7fe fd1a 	bl	80020b2 <vListInsertEnd>
 800367e:	e005      	b.n	800368c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	3318      	adds	r3, #24
 8003684:	4619      	mov	r1, r3
 8003686:	480e      	ldr	r0, [pc, #56]	@ (80036c0 <xTaskRemoveFromEventList+0xbc>)
 8003688:	f7fe fd13 	bl	80020b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003690:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <xTaskRemoveFromEventList+0xc0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003696:	429a      	cmp	r2, r3
 8003698:	d905      	bls.n	80036a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800369a:	2301      	movs	r3, #1
 800369c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800369e:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <xTaskRemoveFromEventList+0xc4>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e001      	b.n	80036aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80036aa:	697b      	ldr	r3, [r7, #20]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000cdc 	.word	0x20000cdc
 80036b8:	20000cbc 	.word	0x20000cbc
 80036bc:	200007e4 	.word	0x200007e4
 80036c0:	20000c74 	.word	0x20000c74
 80036c4:	200007e0 	.word	0x200007e0
 80036c8:	20000cc8 	.word	0x20000cc8

080036cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <vTaskInternalSetTimeOutState+0x24>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <vTaskInternalSetTimeOutState+0x28>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	605a      	str	r2, [r3, #4]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	20000ccc 	.word	0x20000ccc
 80036f4:	20000cb8 	.word	0x20000cb8

080036f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	613b      	str	r3, [r7, #16]
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	60fb      	str	r3, [r7, #12]
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	e7fd      	b.n	800373a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800373e:	f000 fe8b 	bl	8004458 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003742:	4b1d      	ldr	r3, [pc, #116]	@ (80037b8 <xTaskCheckForTimeOut+0xc0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d102      	bne.n	8003762 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	e023      	b.n	80037aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <xTaskCheckForTimeOut+0xc4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d007      	beq.n	800377e <xTaskCheckForTimeOut+0x86>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	d302      	bcc.n	800377e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003778:	2301      	movs	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	e015      	b.n	80037aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	429a      	cmp	r2, r3
 8003786:	d20b      	bcs.n	80037a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	1ad2      	subs	r2, r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff99 	bl	80036cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	e004      	b.n	80037aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037aa:	f000 fe87 	bl	80044bc <vPortExitCritical>

	return xReturn;
 80037ae:	69fb      	ldr	r3, [r7, #28]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000cb8 	.word	0x20000cb8
 80037bc:	20000ccc 	.word	0x20000ccc

080037c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <vTaskMissedYield+0x14>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	20000cc8 	.word	0x20000cc8

080037d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037e0:	f000 f852 	bl	8003888 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <prvIdleTask+0x28>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d9f9      	bls.n	80037e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037ec:	4b05      	ldr	r3, [pc, #20]	@ (8003804 <prvIdleTask+0x2c>)
 80037ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037fc:	e7f0      	b.n	80037e0 <prvIdleTask+0x8>
 80037fe:	bf00      	nop
 8003800:	200007e4 	.word	0x200007e4
 8003804:	e000ed04 	.word	0xe000ed04

08003808 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	e00c      	b.n	800382e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4a12      	ldr	r2, [pc, #72]	@ (8003868 <prvInitialiseTaskLists+0x60>)
 8003820:	4413      	add	r3, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fc18 	bl	8002058 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3301      	adds	r3, #1
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b37      	cmp	r3, #55	@ 0x37
 8003832:	d9ef      	bls.n	8003814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003834:	480d      	ldr	r0, [pc, #52]	@ (800386c <prvInitialiseTaskLists+0x64>)
 8003836:	f7fe fc0f 	bl	8002058 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800383a:	480d      	ldr	r0, [pc, #52]	@ (8003870 <prvInitialiseTaskLists+0x68>)
 800383c:	f7fe fc0c 	bl	8002058 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003840:	480c      	ldr	r0, [pc, #48]	@ (8003874 <prvInitialiseTaskLists+0x6c>)
 8003842:	f7fe fc09 	bl	8002058 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003846:	480c      	ldr	r0, [pc, #48]	@ (8003878 <prvInitialiseTaskLists+0x70>)
 8003848:	f7fe fc06 	bl	8002058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800384c:	480b      	ldr	r0, [pc, #44]	@ (800387c <prvInitialiseTaskLists+0x74>)
 800384e:	f7fe fc03 	bl	8002058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003852:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <prvInitialiseTaskLists+0x78>)
 8003854:	4a05      	ldr	r2, [pc, #20]	@ (800386c <prvInitialiseTaskLists+0x64>)
 8003856:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003858:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <prvInitialiseTaskLists+0x7c>)
 800385a:	4a05      	ldr	r2, [pc, #20]	@ (8003870 <prvInitialiseTaskLists+0x68>)
 800385c:	601a      	str	r2, [r3, #0]
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200007e4 	.word	0x200007e4
 800386c:	20000c44 	.word	0x20000c44
 8003870:	20000c58 	.word	0x20000c58
 8003874:	20000c74 	.word	0x20000c74
 8003878:	20000c88 	.word	0x20000c88
 800387c:	20000ca0 	.word	0x20000ca0
 8003880:	20000c6c 	.word	0x20000c6c
 8003884:	20000c70 	.word	0x20000c70

08003888 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800388e:	e019      	b.n	80038c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003890:	f000 fde2 	bl	8004458 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003894:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <prvCheckTasksWaitingTermination+0x50>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe fc63 	bl	800216c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038a6:	4b0d      	ldr	r3, [pc, #52]	@ (80038dc <prvCheckTasksWaitingTermination+0x54>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	4a0b      	ldr	r2, [pc, #44]	@ (80038dc <prvCheckTasksWaitingTermination+0x54>)
 80038ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <prvCheckTasksWaitingTermination+0x58>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	4a0a      	ldr	r2, [pc, #40]	@ (80038e0 <prvCheckTasksWaitingTermination+0x58>)
 80038b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038ba:	f000 fdff 	bl	80044bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f810 	bl	80038e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <prvCheckTasksWaitingTermination+0x58>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e1      	bne.n	8003890 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000c88 	.word	0x20000c88
 80038dc:	20000cb4 	.word	0x20000cb4
 80038e0:	20000c9c 	.word	0x20000c9c

080038e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d108      	bne.n	8003908 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 ff9c 	bl	8004838 <vPortFree>
				vPortFree( pxTCB );
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 ff99 	bl	8004838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003906:	e019      	b.n	800393c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800390e:	2b01      	cmp	r3, #1
 8003910:	d103      	bne.n	800391a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 ff90 	bl	8004838 <vPortFree>
	}
 8003918:	e010      	b.n	800393c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003920:	2b02      	cmp	r3, #2
 8003922:	d00b      	beq.n	800393c <prvDeleteTCB+0x58>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	60fb      	str	r3, [r7, #12]
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <prvDeleteTCB+0x54>
	}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800394a:	4b0c      	ldr	r3, [pc, #48]	@ (800397c <prvResetNextTaskUnblockTime+0x38>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d104      	bne.n	800395e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003954:	4b0a      	ldr	r3, [pc, #40]	@ (8003980 <prvResetNextTaskUnblockTime+0x3c>)
 8003956:	f04f 32ff 	mov.w	r2, #4294967295
 800395a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800395c:	e008      	b.n	8003970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800395e:	4b07      	ldr	r3, [pc, #28]	@ (800397c <prvResetNextTaskUnblockTime+0x38>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a04      	ldr	r2, [pc, #16]	@ (8003980 <prvResetNextTaskUnblockTime+0x3c>)
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	20000c6c 	.word	0x20000c6c
 8003980:	20000cd4 	.word	0x20000cd4

08003984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <xTaskGetSchedulerState+0x34>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003992:	2301      	movs	r3, #1
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	e008      	b.n	80039aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003998:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <xTaskGetSchedulerState+0x38>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80039a0:	2302      	movs	r3, #2
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	e001      	b.n	80039aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039aa:	687b      	ldr	r3, [r7, #4]
	}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	20000cc0 	.word	0x20000cc0
 80039bc:	20000cdc 	.word	0x20000cdc

080039c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d058      	beq.n	8003a88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a94 <xTaskPriorityDisinherit+0xd4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d00b      	beq.n	80039f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	60fb      	str	r3, [r7, #12]
}
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
 80039f6:	e7fd      	b.n	80039f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10b      	bne.n	8003a18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	60bb      	str	r3, [r7, #8]
}
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
 8003a16:	e7fd      	b.n	8003a14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1c:	1e5a      	subs	r2, r3, #1
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d02c      	beq.n	8003a88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d128      	bne.n	8003a88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fb96 	bl	800216c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a58:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <xTaskPriorityDisinherit+0xd8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d903      	bls.n	8003a68 <xTaskPriorityDisinherit+0xa8>
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	4a0c      	ldr	r2, [pc, #48]	@ (8003a98 <xTaskPriorityDisinherit+0xd8>)
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4a09      	ldr	r2, [pc, #36]	@ (8003a9c <xTaskPriorityDisinherit+0xdc>)
 8003a76:	441a      	add	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f7fe fb17 	bl	80020b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a88:	697b      	ldr	r3, [r7, #20]
	}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	200007e0 	.word	0x200007e0
 8003a98:	20000cbc 	.word	0x20000cbc
 8003a9c:	200007e4 	.word	0x200007e4

08003aa0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003aaa:	4b21      	ldr	r3, [pc, #132]	@ (8003b30 <prvAddCurrentTaskToDelayedList+0x90>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ab0:	4b20      	ldr	r3, [pc, #128]	@ (8003b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fb58 	bl	800216c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d10a      	bne.n	8003ada <prvAddCurrentTaskToDelayedList+0x3a>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aca:	4b1a      	ldr	r3, [pc, #104]	@ (8003b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4819      	ldr	r0, [pc, #100]	@ (8003b38 <prvAddCurrentTaskToDelayedList+0x98>)
 8003ad4:	f7fe faed 	bl	80020b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ad8:	e026      	b.n	8003b28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ae2:	4b14      	ldr	r3, [pc, #80]	@ (8003b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d209      	bcs.n	8003b06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003af2:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f7fe fafb 	bl	80020fa <vListInsert>
}
 8003b04:	e010      	b.n	8003b28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b06:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f7fe faf1 	bl	80020fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b18:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d202      	bcs.n	8003b28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b22:	4a08      	ldr	r2, [pc, #32]	@ (8003b44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6013      	str	r3, [r2, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000cb8 	.word	0x20000cb8
 8003b34:	200007e0 	.word	0x200007e0
 8003b38:	20000ca0 	.word	0x20000ca0
 8003b3c:	20000c70 	.word	0x20000c70
 8003b40:	20000c6c 	.word	0x20000c6c
 8003b44:	20000cd4 	.word	0x20000cd4

08003b48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	@ 0x28
 8003b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b52:	f000 fb13 	bl	800417c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b56:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <xTimerCreateTimerTask+0x84>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d021      	beq.n	8003ba2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b66:	1d3a      	adds	r2, r7, #4
 8003b68:	f107 0108 	add.w	r1, r7, #8
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe fa57 	bl	8002024 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	9202      	str	r2, [sp, #8]
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	2302      	movs	r3, #2
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	2300      	movs	r3, #0
 8003b86:	460a      	mov	r2, r1
 8003b88:	4911      	ldr	r1, [pc, #68]	@ (8003bd0 <xTimerCreateTimerTask+0x88>)
 8003b8a:	4812      	ldr	r0, [pc, #72]	@ (8003bd4 <xTimerCreateTimerTask+0x8c>)
 8003b8c:	f7ff f8d0 	bl	8002d30 <xTaskCreateStatic>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4a11      	ldr	r2, [pc, #68]	@ (8003bd8 <xTimerCreateTimerTask+0x90>)
 8003b94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b96:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <xTimerCreateTimerTask+0x90>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	613b      	str	r3, [r7, #16]
}
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	e7fd      	b.n	8003bbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003bc0:	697b      	ldr	r3, [r7, #20]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000d10 	.word	0x20000d10
 8003bd0:	080059d4 	.word	0x080059d4
 8003bd4:	08003d15 	.word	0x08003d15
 8003bd8:	20000d14 	.word	0x20000d14

08003bdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	@ 0x28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <xTimerGenericCommand+0x30>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	623b      	str	r3, [r7, #32]
}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	e7fd      	b.n	8003c08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c0c:	4b19      	ldr	r3, [pc, #100]	@ (8003c74 <xTimerGenericCommand+0x98>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d02a      	beq.n	8003c6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	dc18      	bgt.n	8003c58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c26:	f7ff fead 	bl	8003984 <xTaskGetSchedulerState>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d109      	bne.n	8003c44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c30:	4b10      	ldr	r3, [pc, #64]	@ (8003c74 <xTimerGenericCommand+0x98>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	f107 0110 	add.w	r1, r7, #16
 8003c38:	2300      	movs	r3, #0
 8003c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c3c:	f7fe fc06 	bl	800244c <xQueueGenericSend>
 8003c40:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c42:	e012      	b.n	8003c6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c44:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <xTimerGenericCommand+0x98>)
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	f107 0110 	add.w	r1, r7, #16
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f7fe fbfc 	bl	800244c <xQueueGenericSend>
 8003c54:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c56:	e008      	b.n	8003c6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c58:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <xTimerGenericCommand+0x98>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	f107 0110 	add.w	r1, r7, #16
 8003c60:	2300      	movs	r3, #0
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	f7fe fcf4 	bl	8002650 <xQueueGenericSendFromISR>
 8003c68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3728      	adds	r7, #40	@ 0x28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000d10 	.word	0x20000d10

08003c78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c82:	4b23      	ldr	r3, [pc, #140]	@ (8003d10 <prvProcessExpiredTimer+0x98>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe fa6b 	bl	800216c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d023      	beq.n	8003cec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	18d1      	adds	r1, r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	6978      	ldr	r0, [r7, #20]
 8003cb2:	f000 f8d5 	bl	8003e60 <prvInsertTimerInActiveList>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d020      	beq.n	8003cfe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	6978      	ldr	r0, [r7, #20]
 8003cc8:	f7ff ff88 	bl	8003bdc <xTimerGenericCommand>
 8003ccc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d114      	bne.n	8003cfe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	60fb      	str	r3, [r7, #12]
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	6978      	ldr	r0, [r7, #20]
 8003d04:	4798      	blx	r3
}
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000d08 	.word	0x20000d08

08003d14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d1c:	f107 0308 	add.w	r3, r7, #8
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 f859 	bl	8003dd8 <prvGetNextExpireTime>
 8003d26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f805 	bl	8003d3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d32:	f000 f8d7 	bl	8003ee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d36:	bf00      	nop
 8003d38:	e7f0      	b.n	8003d1c <prvTimerTask+0x8>
	...

08003d3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d46:	f7ff fa37 	bl	80031b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d4a:	f107 0308 	add.w	r3, r7, #8
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f866 	bl	8003e20 <prvSampleTimeNow>
 8003d54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d130      	bne.n	8003dbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <prvProcessTimerOrBlockTask+0x3c>
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d806      	bhi.n	8003d78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d6a:	f7ff fa33 	bl	80031d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff81 	bl	8003c78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d76:	e024      	b.n	8003dc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d7e:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <prvProcessTimerOrBlockTask+0x90>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <prvProcessTimerOrBlockTask+0x50>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <prvProcessTimerOrBlockTask+0x52>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <prvProcessTimerOrBlockTask+0x94>)
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f7fe ff93 	bl	8002cc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003da2:	f7ff fa17 	bl	80031d4 <xTaskResumeAll>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003dac:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <prvProcessTimerOrBlockTask+0x98>)
 8003dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	f3bf 8f6f 	isb	sy
}
 8003dbc:	e001      	b.n	8003dc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003dbe:	f7ff fa09 	bl	80031d4 <xTaskResumeAll>
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000d0c 	.word	0x20000d0c
 8003dd0:	20000d10 	.word	0x20000d10
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003de0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e1c <prvGetNextExpireTime+0x44>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <prvGetNextExpireTime+0x16>
 8003dea:	2201      	movs	r2, #1
 8003dec:	e000      	b.n	8003df0 <prvGetNextExpireTime+0x18>
 8003dee:	2200      	movs	r2, #0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dfc:	4b07      	ldr	r3, [pc, #28]	@ (8003e1c <prvGetNextExpireTime+0x44>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e001      	b.n	8003e0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000d08 	.word	0x20000d08

08003e20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e28:	f7ff fa72 	bl	8003310 <xTaskGetTickCount>
 8003e2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <prvSampleTimeNow+0x3c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d205      	bcs.n	8003e44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e38:	f000 f93a 	bl	80040b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e002      	b.n	8003e4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e4a:	4a04      	ldr	r2, [pc, #16]	@ (8003e5c <prvSampleTimeNow+0x3c>)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e50:	68fb      	ldr	r3, [r7, #12]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000d18 	.word	0x20000d18

08003e60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d812      	bhi.n	8003eac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	1ad2      	subs	r2, r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d302      	bcc.n	8003e9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e01b      	b.n	8003ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e9a:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <prvInsertTimerInActiveList+0x7c>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7fe f928 	bl	80020fa <vListInsert>
 8003eaa:	e012      	b.n	8003ed2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d206      	bcs.n	8003ec2 <prvInsertTimerInActiveList+0x62>
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e007      	b.n	8003ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ec2:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <prvInsertTimerInActiveList+0x80>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f7fe f914 	bl	80020fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003ed2:	697b      	ldr	r3, [r7, #20]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000d0c 	.word	0x20000d0c
 8003ee0:	20000d08 	.word	0x20000d08

08003ee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08e      	sub	sp, #56	@ 0x38
 8003ee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eea:	e0ce      	b.n	800408a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da19      	bge.n	8003f26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003ef2:	1d3b      	adds	r3, r7, #4
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	61fb      	str	r3, [r7, #28]
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	e7fd      	b.n	8003f12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f1c:	6850      	ldr	r0, [r2, #4]
 8003f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f20:	6892      	ldr	r2, [r2, #8]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f2c0 80ae 	blt.w	800408a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe f914 	bl	800216c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f44:	463b      	mov	r3, r7
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ff6a 	bl	8003e20 <prvSampleTimeNow>
 8003f4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b09      	cmp	r3, #9
 8003f52:	f200 8097 	bhi.w	8004084 <prvProcessReceivedCommands+0x1a0>
 8003f56:	a201      	add	r2, pc, #4	@ (adr r2, 8003f5c <prvProcessReceivedCommands+0x78>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08003f85 	.word	0x08003f85
 8003f68:	08003ffb 	.word	0x08003ffb
 8003f6c:	0800400f 	.word	0x0800400f
 8003f70:	0800405b 	.word	0x0800405b
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f85 	.word	0x08003f85
 8003f7c:	08003ffb 	.word	0x08003ffb
 8003f80:	0800400f 	.word	0x0800400f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	18d1      	adds	r1, r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fa4:	f7ff ff5c 	bl	8003e60 <prvInsertTimerInActiveList>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d06c      	beq.n	8004088 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d061      	beq.n	8004088 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	441a      	add	r2, r3
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fd6:	f7ff fe01 	bl	8003bdc <xTimerGenericCommand>
 8003fda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d152      	bne.n	8004088 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	61bb      	str	r3, [r7, #24]
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	e7fd      	b.n	8003ff6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800400c:	e03d      	b.n	800408a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800400e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	b2da      	uxtb	r2, r3
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	617b      	str	r3, [r7, #20]
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	e7fd      	b.n	8004042 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	18d1      	adds	r1, r2, r3
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004054:	f7ff ff04 	bl	8003e60 <prvInsertTimerInActiveList>
					break;
 8004058:	e017      	b.n	800408a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004068:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800406a:	f000 fbe5 	bl	8004838 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800406e:	e00c      	b.n	800408a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004072:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	b2da      	uxtb	r2, r3
 800407c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004082:	e002      	b.n	800408a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004084:	bf00      	nop
 8004086:	e000      	b.n	800408a <prvProcessReceivedCommands+0x1a6>
					break;
 8004088:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800408a:	4b08      	ldr	r3, [pc, #32]	@ (80040ac <prvProcessReceivedCommands+0x1c8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	1d39      	adds	r1, r7, #4
 8004090:	2200      	movs	r2, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fb7a 	bl	800278c <xQueueReceive>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	f47f af26 	bne.w	8003eec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3730      	adds	r7, #48	@ 0x30
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000d10 	.word	0x20000d10

080040b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040b6:	e049      	b.n	800414c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004174 <prvSwitchTimerLists+0xc4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004174 <prvSwitchTimerLists+0xc4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe f84b 	bl	800216c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d02f      	beq.n	800414c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d90e      	bls.n	800411c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800410a:	4b1a      	ldr	r3, [pc, #104]	@ (8004174 <prvSwitchTimerLists+0xc4>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3304      	adds	r3, #4
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f7fd fff0 	bl	80020fa <vListInsert>
 800411a:	e017      	b.n	800414c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800411c:	2300      	movs	r3, #0
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2300      	movs	r3, #0
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	2100      	movs	r1, #0
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff fd58 	bl	8003bdc <xTimerGenericCommand>
 800412c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	603b      	str	r3, [r7, #0]
}
 8004146:	bf00      	nop
 8004148:	bf00      	nop
 800414a:	e7fd      	b.n	8004148 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800414c:	4b09      	ldr	r3, [pc, #36]	@ (8004174 <prvSwitchTimerLists+0xc4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1b0      	bne.n	80040b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004156:	4b07      	ldr	r3, [pc, #28]	@ (8004174 <prvSwitchTimerLists+0xc4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <prvSwitchTimerLists+0xc8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <prvSwitchTimerLists+0xc4>)
 8004162:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004164:	4a04      	ldr	r2, [pc, #16]	@ (8004178 <prvSwitchTimerLists+0xc8>)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	6013      	str	r3, [r2, #0]
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000d08 	.word	0x20000d08
 8004178:	20000d0c 	.word	0x20000d0c

0800417c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004182:	f000 f969 	bl	8004458 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004186:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <prvCheckForValidListAndQueue+0x60>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d120      	bne.n	80041d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800418e:	4814      	ldr	r0, [pc, #80]	@ (80041e0 <prvCheckForValidListAndQueue+0x64>)
 8004190:	f7fd ff62 	bl	8002058 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004194:	4813      	ldr	r0, [pc, #76]	@ (80041e4 <prvCheckForValidListAndQueue+0x68>)
 8004196:	f7fd ff5f 	bl	8002058 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800419a:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <prvCheckForValidListAndQueue+0x6c>)
 800419c:	4a10      	ldr	r2, [pc, #64]	@ (80041e0 <prvCheckForValidListAndQueue+0x64>)
 800419e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041a0:	4b12      	ldr	r3, [pc, #72]	@ (80041ec <prvCheckForValidListAndQueue+0x70>)
 80041a2:	4a10      	ldr	r2, [pc, #64]	@ (80041e4 <prvCheckForValidListAndQueue+0x68>)
 80041a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041a6:	2300      	movs	r3, #0
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	4b11      	ldr	r3, [pc, #68]	@ (80041f0 <prvCheckForValidListAndQueue+0x74>)
 80041ac:	4a11      	ldr	r2, [pc, #68]	@ (80041f4 <prvCheckForValidListAndQueue+0x78>)
 80041ae:	2110      	movs	r1, #16
 80041b0:	200a      	movs	r0, #10
 80041b2:	f7fe f86f 	bl	8002294 <xQueueGenericCreateStatic>
 80041b6:	4603      	mov	r3, r0
 80041b8:	4a08      	ldr	r2, [pc, #32]	@ (80041dc <prvCheckForValidListAndQueue+0x60>)
 80041ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041bc:	4b07      	ldr	r3, [pc, #28]	@ (80041dc <prvCheckForValidListAndQueue+0x60>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041c4:	4b05      	ldr	r3, [pc, #20]	@ (80041dc <prvCheckForValidListAndQueue+0x60>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	490b      	ldr	r1, [pc, #44]	@ (80041f8 <prvCheckForValidListAndQueue+0x7c>)
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fd52 	bl	8002c74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041d0:	f000 f974 	bl	80044bc <vPortExitCritical>
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000d10 	.word	0x20000d10
 80041e0:	20000ce0 	.word	0x20000ce0
 80041e4:	20000cf4 	.word	0x20000cf4
 80041e8:	20000d08 	.word	0x20000d08
 80041ec:	20000d0c 	.word	0x20000d0c
 80041f0:	20000dbc 	.word	0x20000dbc
 80041f4:	20000d1c 	.word	0x20000d1c
 80041f8:	080059dc 	.word	0x080059dc

080041fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3b04      	subs	r3, #4
 800420c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3b04      	subs	r3, #4
 800421a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f023 0201 	bic.w	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b04      	subs	r3, #4
 800422a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800422c:	4a0c      	ldr	r2, [pc, #48]	@ (8004260 <pxPortInitialiseStack+0x64>)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3b14      	subs	r3, #20
 8004236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3b04      	subs	r3, #4
 8004242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f06f 0202 	mvn.w	r2, #2
 800424a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3b20      	subs	r3, #32
 8004250:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004252:	68fb      	ldr	r3, [r7, #12]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	08004265 	.word	0x08004265

08004264 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800426e:	4b13      	ldr	r3, [pc, #76]	@ (80042bc <prvTaskExitError+0x58>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d00b      	beq.n	8004290 <prvTaskExitError+0x2c>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	60fb      	str	r3, [r7, #12]
}
 800428a:	bf00      	nop
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <prvTaskExitError+0x28>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	60bb      	str	r3, [r7, #8]
}
 80042a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042a4:	bf00      	nop
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0fc      	beq.n	80042a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	2000000c 	.word	0x2000000c

080042c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042c0:	4b07      	ldr	r3, [pc, #28]	@ (80042e0 <pxCurrentTCBConst2>)
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	6808      	ldr	r0, [r1, #0]
 80042c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ca:	f380 8809 	msr	PSP, r0
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8811 	msr	BASEPRI, r0
 80042da:	4770      	bx	lr
 80042dc:	f3af 8000 	nop.w

080042e0 <pxCurrentTCBConst2>:
 80042e0:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042e8:	4808      	ldr	r0, [pc, #32]	@ (800430c <prvPortStartFirstTask+0x24>)
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	6800      	ldr	r0, [r0, #0]
 80042ee:	f380 8808 	msr	MSP, r0
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f380 8814 	msr	CONTROL, r0
 80042fa:	b662      	cpsie	i
 80042fc:	b661      	cpsie	f
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	df00      	svc	0
 8004308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800430a:	bf00      	nop
 800430c:	e000ed08 	.word	0xe000ed08

08004310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004316:	4b47      	ldr	r3, [pc, #284]	@ (8004434 <xPortStartScheduler+0x124>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a47      	ldr	r2, [pc, #284]	@ (8004438 <xPortStartScheduler+0x128>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10b      	bne.n	8004338 <xPortStartScheduler+0x28>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	613b      	str	r3, [r7, #16]
}
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	e7fd      	b.n	8004334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004338:	4b3e      	ldr	r3, [pc, #248]	@ (8004434 <xPortStartScheduler+0x124>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a3f      	ldr	r2, [pc, #252]	@ (800443c <xPortStartScheduler+0x12c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10b      	bne.n	800435a <xPortStartScheduler+0x4a>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60fb      	str	r3, [r7, #12]
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800435a:	4b39      	ldr	r3, [pc, #228]	@ (8004440 <xPortStartScheduler+0x130>)
 800435c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	22ff      	movs	r2, #255	@ 0xff
 800436a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4b31      	ldr	r3, [pc, #196]	@ (8004444 <xPortStartScheduler+0x134>)
 8004380:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004382:	4b31      	ldr	r3, [pc, #196]	@ (8004448 <xPortStartScheduler+0x138>)
 8004384:	2207      	movs	r2, #7
 8004386:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004388:	e009      	b.n	800439e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800438a:	4b2f      	ldr	r3, [pc, #188]	@ (8004448 <xPortStartScheduler+0x138>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	4a2d      	ldr	r2, [pc, #180]	@ (8004448 <xPortStartScheduler+0x138>)
 8004392:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a6:	2b80      	cmp	r3, #128	@ 0x80
 80043a8:	d0ef      	beq.n	800438a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043aa:	4b27      	ldr	r3, [pc, #156]	@ (8004448 <xPortStartScheduler+0x138>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f1c3 0307 	rsb	r3, r3, #7
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d00b      	beq.n	80043ce <xPortStartScheduler+0xbe>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	60bb      	str	r3, [r7, #8]
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	e7fd      	b.n	80043ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004448 <xPortStartScheduler+0x138>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004448 <xPortStartScheduler+0x138>)
 80043d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <xPortStartScheduler+0x138>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043e0:	4a19      	ldr	r2, [pc, #100]	@ (8004448 <xPortStartScheduler+0x138>)
 80043e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043ec:	4b17      	ldr	r3, [pc, #92]	@ (800444c <xPortStartScheduler+0x13c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a16      	ldr	r2, [pc, #88]	@ (800444c <xPortStartScheduler+0x13c>)
 80043f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043f8:	4b14      	ldr	r3, [pc, #80]	@ (800444c <xPortStartScheduler+0x13c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a13      	ldr	r2, [pc, #76]	@ (800444c <xPortStartScheduler+0x13c>)
 80043fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004402:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004404:	f000 f8da 	bl	80045bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004408:	4b11      	ldr	r3, [pc, #68]	@ (8004450 <xPortStartScheduler+0x140>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800440e:	f000 f8f9 	bl	8004604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004412:	4b10      	ldr	r3, [pc, #64]	@ (8004454 <xPortStartScheduler+0x144>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a0f      	ldr	r2, [pc, #60]	@ (8004454 <xPortStartScheduler+0x144>)
 8004418:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800441c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800441e:	f7ff ff63 	bl	80042e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004422:	f7ff f83f 	bl	80034a4 <vTaskSwitchContext>
	prvTaskExitError();
 8004426:	f7ff ff1d 	bl	8004264 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	e000ed00 	.word	0xe000ed00
 8004438:	410fc271 	.word	0x410fc271
 800443c:	410fc270 	.word	0x410fc270
 8004440:	e000e400 	.word	0xe000e400
 8004444:	20000e0c 	.word	0x20000e0c
 8004448:	20000e10 	.word	0x20000e10
 800444c:	e000ed20 	.word	0xe000ed20
 8004450:	2000000c 	.word	0x2000000c
 8004454:	e000ef34 	.word	0xe000ef34

08004458 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	607b      	str	r3, [r7, #4]
}
 8004470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004472:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <vPortEnterCritical+0x5c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3301      	adds	r3, #1
 8004478:	4a0e      	ldr	r2, [pc, #56]	@ (80044b4 <vPortEnterCritical+0x5c>)
 800447a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800447c:	4b0d      	ldr	r3, [pc, #52]	@ (80044b4 <vPortEnterCritical+0x5c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d110      	bne.n	80044a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004484:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <vPortEnterCritical+0x60>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	603b      	str	r3, [r7, #0]
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	e7fd      	b.n	80044a2 <vPortEnterCritical+0x4a>
	}
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	2000000c 	.word	0x2000000c
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044c2:	4b12      	ldr	r3, [pc, #72]	@ (800450c <vPortExitCritical+0x50>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <vPortExitCritical+0x26>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	607b      	str	r3, [r7, #4]
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	e7fd      	b.n	80044de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044e2:	4b0a      	ldr	r3, [pc, #40]	@ (800450c <vPortExitCritical+0x50>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	4a08      	ldr	r2, [pc, #32]	@ (800450c <vPortExitCritical+0x50>)
 80044ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044ec:	4b07      	ldr	r3, [pc, #28]	@ (800450c <vPortExitCritical+0x50>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d105      	bne.n	8004500 <vPortExitCritical+0x44>
 80044f4:	2300      	movs	r3, #0
 80044f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f383 8811 	msr	BASEPRI, r3
}
 80044fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	2000000c 	.word	0x2000000c

08004510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004510:	f3ef 8009 	mrs	r0, PSP
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <pxCurrentTCBConst>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f01e 0f10 	tst.w	lr, #16
 8004520:	bf08      	it	eq
 8004522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452a:	6010      	str	r0, [r2, #0]
 800452c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004534:	f380 8811 	msr	BASEPRI, r0
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f7fe ffb0 	bl	80034a4 <vTaskSwitchContext>
 8004544:	f04f 0000 	mov.w	r0, #0
 8004548:	f380 8811 	msr	BASEPRI, r0
 800454c:	bc09      	pop	{r0, r3}
 800454e:	6819      	ldr	r1, [r3, #0]
 8004550:	6808      	ldr	r0, [r1, #0]
 8004552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004556:	f01e 0f10 	tst.w	lr, #16
 800455a:	bf08      	it	eq
 800455c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004560:	f380 8809 	msr	PSP, r0
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	f3af 8000 	nop.w

08004570 <pxCurrentTCBConst>:
 8004570:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop

08004578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004592:	f7fe fecd 	bl	8003330 <xTaskIncrementTick>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800459c:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <xPortSysTickHandler+0x40>)
 800459e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f383 8811 	msr	BASEPRI, r3
}
 80045ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045c0:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045c6:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <vPortSetupTimerInterrupt+0x38>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045cc:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <vPortSetupTimerInterrupt+0x3c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0a      	ldr	r2, [pc, #40]	@ (80045fc <vPortSetupTimerInterrupt+0x40>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <vPortSetupTimerInterrupt+0x44>)
 80045da:	3b01      	subs	r3, #1
 80045dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045de:	4b04      	ldr	r3, [pc, #16]	@ (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	e000e010 	.word	0xe000e010
 80045f4:	e000e018 	.word	0xe000e018
 80045f8:	20000000 	.word	0x20000000
 80045fc:	10624dd3 	.word	0x10624dd3
 8004600:	e000e014 	.word	0xe000e014

08004604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004614 <vPortEnableVFP+0x10>
 8004608:	6801      	ldr	r1, [r0, #0]
 800460a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800460e:	6001      	str	r1, [r0, #0]
 8004610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004612:	bf00      	nop
 8004614:	e000ed88 	.word	0xe000ed88

08004618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800461e:	f3ef 8305 	mrs	r3, IPSR
 8004622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	d915      	bls.n	8004656 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800462a:	4a18      	ldr	r2, [pc, #96]	@ (800468c <vPortValidateInterruptPriority+0x74>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004634:	4b16      	ldr	r3, [pc, #88]	@ (8004690 <vPortValidateInterruptPriority+0x78>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	7afa      	ldrb	r2, [r7, #11]
 800463a:	429a      	cmp	r2, r3
 800463c:	d20b      	bcs.n	8004656 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004656:	4b0f      	ldr	r3, [pc, #60]	@ (8004694 <vPortValidateInterruptPriority+0x7c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800465e:	4b0e      	ldr	r3, [pc, #56]	@ (8004698 <vPortValidateInterruptPriority+0x80>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d90b      	bls.n	800467e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	603b      	str	r3, [r7, #0]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <vPortValidateInterruptPriority+0x62>
	}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000e3f0 	.word	0xe000e3f0
 8004690:	20000e0c 	.word	0x20000e0c
 8004694:	e000ed0c 	.word	0xe000ed0c
 8004698:	20000e10 	.word	0x20000e10

0800469c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	@ 0x28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046a8:	f7fe fd86 	bl	80031b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046ac:	4b5c      	ldr	r3, [pc, #368]	@ (8004820 <pvPortMalloc+0x184>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046b4:	f000 f924 	bl	8004900 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004824 <pvPortMalloc+0x188>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f040 8095 	bne.w	80047f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01e      	beq.n	800470a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80046cc:	2208      	movs	r2, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d015      	beq.n	800470a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f023 0307 	bic.w	r3, r3, #7
 80046e4:	3308      	adds	r3, #8
 80046e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <pvPortMalloc+0x6e>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	617b      	str	r3, [r7, #20]
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	e7fd      	b.n	8004706 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d06f      	beq.n	80047f0 <pvPortMalloc+0x154>
 8004710:	4b45      	ldr	r3, [pc, #276]	@ (8004828 <pvPortMalloc+0x18c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	429a      	cmp	r2, r3
 8004718:	d86a      	bhi.n	80047f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800471a:	4b44      	ldr	r3, [pc, #272]	@ (800482c <pvPortMalloc+0x190>)
 800471c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800471e:	4b43      	ldr	r3, [pc, #268]	@ (800482c <pvPortMalloc+0x190>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004724:	e004      	b.n	8004730 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	429a      	cmp	r2, r3
 8004738:	d903      	bls.n	8004742 <pvPortMalloc+0xa6>
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f1      	bne.n	8004726 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004742:	4b37      	ldr	r3, [pc, #220]	@ (8004820 <pvPortMalloc+0x184>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004748:	429a      	cmp	r2, r3
 800474a:	d051      	beq.n	80047f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2208      	movs	r2, #8
 8004752:	4413      	add	r3, r2
 8004754:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	1ad2      	subs	r2, r2, r3
 8004766:	2308      	movs	r3, #8
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	429a      	cmp	r2, r3
 800476c:	d920      	bls.n	80047b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800476e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <pvPortMalloc+0xfc>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	613b      	str	r3, [r7, #16]
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	1ad2      	subs	r2, r2, r3
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047aa:	69b8      	ldr	r0, [r7, #24]
 80047ac:	f000 f90a 	bl	80049c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004828 <pvPortMalloc+0x18c>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004828 <pvPortMalloc+0x18c>)
 80047bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047be:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <pvPortMalloc+0x18c>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004830 <pvPortMalloc+0x194>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d203      	bcs.n	80047d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047ca:	4b17      	ldr	r3, [pc, #92]	@ (8004828 <pvPortMalloc+0x18c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a18      	ldr	r2, [pc, #96]	@ (8004830 <pvPortMalloc+0x194>)
 80047d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	4b13      	ldr	r3, [pc, #76]	@ (8004824 <pvPortMalloc+0x188>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	431a      	orrs	r2, r3
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047e6:	4b13      	ldr	r3, [pc, #76]	@ (8004834 <pvPortMalloc+0x198>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3301      	adds	r3, #1
 80047ec:	4a11      	ldr	r2, [pc, #68]	@ (8004834 <pvPortMalloc+0x198>)
 80047ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047f0:	f7fe fcf0 	bl	80031d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <pvPortMalloc+0x17a>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60fb      	str	r3, [r7, #12]
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	e7fd      	b.n	8004812 <pvPortMalloc+0x176>
	return pvReturn;
 8004816:	69fb      	ldr	r3, [r7, #28]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	@ 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20004a1c 	.word	0x20004a1c
 8004824:	20004a30 	.word	0x20004a30
 8004828:	20004a20 	.word	0x20004a20
 800482c:	20004a14 	.word	0x20004a14
 8004830:	20004a24 	.word	0x20004a24
 8004834:	20004a28 	.word	0x20004a28

08004838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04f      	beq.n	80048ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800484a:	2308      	movs	r3, #8
 800484c:	425b      	negs	r3, r3
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4413      	add	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	4b25      	ldr	r3, [pc, #148]	@ (80048f4 <vPortFree+0xbc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10b      	bne.n	800487e <vPortFree+0x46>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	60fb      	str	r3, [r7, #12]
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	e7fd      	b.n	800487a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00b      	beq.n	800489e <vPortFree+0x66>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	60bb      	str	r3, [r7, #8]
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop
 800489c:	e7fd      	b.n	800489a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	4b14      	ldr	r3, [pc, #80]	@ (80048f4 <vPortFree+0xbc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01e      	beq.n	80048ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11a      	bne.n	80048ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	4b0e      	ldr	r3, [pc, #56]	@ (80048f4 <vPortFree+0xbc>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	43db      	mvns	r3, r3
 80048be:	401a      	ands	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048c4:	f7fe fc78 	bl	80031b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	4b0a      	ldr	r3, [pc, #40]	@ (80048f8 <vPortFree+0xc0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	4a09      	ldr	r2, [pc, #36]	@ (80048f8 <vPortFree+0xc0>)
 80048d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048d6:	6938      	ldr	r0, [r7, #16]
 80048d8:	f000 f874 	bl	80049c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80048dc:	4b07      	ldr	r3, [pc, #28]	@ (80048fc <vPortFree+0xc4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	4a06      	ldr	r2, [pc, #24]	@ (80048fc <vPortFree+0xc4>)
 80048e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80048e6:	f7fe fc75 	bl	80031d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048ea:	bf00      	nop
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20004a30 	.word	0x20004a30
 80048f8:	20004a20 	.word	0x20004a20
 80048fc:	20004a2c 	.word	0x20004a2c

08004900 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004906:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800490a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800490c:	4b27      	ldr	r3, [pc, #156]	@ (80049ac <prvHeapInit+0xac>)
 800490e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3307      	adds	r3, #7
 800491e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0307 	bic.w	r3, r3, #7
 8004926:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	4a1f      	ldr	r2, [pc, #124]	@ (80049ac <prvHeapInit+0xac>)
 8004930:	4413      	add	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004938:	4a1d      	ldr	r2, [pc, #116]	@ (80049b0 <prvHeapInit+0xb0>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800493e:	4b1c      	ldr	r3, [pc, #112]	@ (80049b0 <prvHeapInit+0xb0>)
 8004940:	2200      	movs	r2, #0
 8004942:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	4413      	add	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800494c:	2208      	movs	r2, #8
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0307 	bic.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a15      	ldr	r2, [pc, #84]	@ (80049b4 <prvHeapInit+0xb4>)
 8004960:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004962:	4b14      	ldr	r3, [pc, #80]	@ (80049b4 <prvHeapInit+0xb4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2200      	movs	r2, #0
 8004968:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800496a:	4b12      	ldr	r3, [pc, #72]	@ (80049b4 <prvHeapInit+0xb4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	1ad2      	subs	r2, r2, r3
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004980:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <prvHeapInit+0xb4>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a0a      	ldr	r2, [pc, #40]	@ (80049b8 <prvHeapInit+0xb8>)
 800498e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <prvHeapInit+0xbc>)
 8004996:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004998:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <prvHeapInit+0xc0>)
 800499a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800499e:	601a      	str	r2, [r3, #0]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	20000e14 	.word	0x20000e14
 80049b0:	20004a14 	.word	0x20004a14
 80049b4:	20004a1c 	.word	0x20004a1c
 80049b8:	20004a24 	.word	0x20004a24
 80049bc:	20004a20 	.word	0x20004a20
 80049c0:	20004a30 	.word	0x20004a30

080049c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049cc:	4b28      	ldr	r3, [pc, #160]	@ (8004a70 <prvInsertBlockIntoFreeList+0xac>)
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e002      	b.n	80049d8 <prvInsertBlockIntoFreeList+0x14>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d8f7      	bhi.n	80049d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4413      	add	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d108      	bne.n	8004a06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	441a      	add	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	441a      	add	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d118      	bne.n	8004a4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <prvInsertBlockIntoFreeList+0xb0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d00d      	beq.n	8004a42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e008      	b.n	8004a54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a42:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <prvInsertBlockIntoFreeList+0xb0>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e003      	b.n	8004a54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d002      	beq.n	8004a62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20004a14 	.word	0x20004a14
 8004a74:	20004a1c 	.word	0x20004a1c

08004a78 <std>:
 8004a78:	2300      	movs	r3, #0
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a86:	6083      	str	r3, [r0, #8]
 8004a88:	8181      	strh	r1, [r0, #12]
 8004a8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a8c:	81c2      	strh	r2, [r0, #14]
 8004a8e:	6183      	str	r3, [r0, #24]
 8004a90:	4619      	mov	r1, r3
 8004a92:	2208      	movs	r2, #8
 8004a94:	305c      	adds	r0, #92	@ 0x5c
 8004a96:	f000 f906 	bl	8004ca6 <memset>
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <std+0x58>)
 8004a9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <std+0x5c>)
 8004aa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad8 <std+0x60>)
 8004aa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <std+0x64>)
 8004aa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae0 <std+0x68>)
 8004aac:	6224      	str	r4, [r4, #32]
 8004aae:	429c      	cmp	r4, r3
 8004ab0:	d006      	beq.n	8004ac0 <std+0x48>
 8004ab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ab6:	4294      	cmp	r4, r2
 8004ab8:	d002      	beq.n	8004ac0 <std+0x48>
 8004aba:	33d0      	adds	r3, #208	@ 0xd0
 8004abc:	429c      	cmp	r4, r3
 8004abe:	d105      	bne.n	8004acc <std+0x54>
 8004ac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac8:	f000 b966 	b.w	8004d98 <__retarget_lock_init_recursive>
 8004acc:	bd10      	pop	{r4, pc}
 8004ace:	bf00      	nop
 8004ad0:	08004c21 	.word	0x08004c21
 8004ad4:	08004c43 	.word	0x08004c43
 8004ad8:	08004c7b 	.word	0x08004c7b
 8004adc:	08004c9f 	.word	0x08004c9f
 8004ae0:	20004a34 	.word	0x20004a34

08004ae4 <stdio_exit_handler>:
 8004ae4:	4a02      	ldr	r2, [pc, #8]	@ (8004af0 <stdio_exit_handler+0xc>)
 8004ae6:	4903      	ldr	r1, [pc, #12]	@ (8004af4 <stdio_exit_handler+0x10>)
 8004ae8:	4803      	ldr	r0, [pc, #12]	@ (8004af8 <stdio_exit_handler+0x14>)
 8004aea:	f000 b869 	b.w	8004bc0 <_fwalk_sglue>
 8004aee:	bf00      	nop
 8004af0:	20000010 	.word	0x20000010
 8004af4:	08005655 	.word	0x08005655
 8004af8:	20000020 	.word	0x20000020

08004afc <cleanup_stdio>:
 8004afc:	6841      	ldr	r1, [r0, #4]
 8004afe:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <cleanup_stdio+0x34>)
 8004b00:	4299      	cmp	r1, r3
 8004b02:	b510      	push	{r4, lr}
 8004b04:	4604      	mov	r4, r0
 8004b06:	d001      	beq.n	8004b0c <cleanup_stdio+0x10>
 8004b08:	f000 fda4 	bl	8005654 <_fflush_r>
 8004b0c:	68a1      	ldr	r1, [r4, #8]
 8004b0e:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <cleanup_stdio+0x38>)
 8004b10:	4299      	cmp	r1, r3
 8004b12:	d002      	beq.n	8004b1a <cleanup_stdio+0x1e>
 8004b14:	4620      	mov	r0, r4
 8004b16:	f000 fd9d 	bl	8005654 <_fflush_r>
 8004b1a:	68e1      	ldr	r1, [r4, #12]
 8004b1c:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <cleanup_stdio+0x3c>)
 8004b1e:	4299      	cmp	r1, r3
 8004b20:	d004      	beq.n	8004b2c <cleanup_stdio+0x30>
 8004b22:	4620      	mov	r0, r4
 8004b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b28:	f000 bd94 	b.w	8005654 <_fflush_r>
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	bf00      	nop
 8004b30:	20004a34 	.word	0x20004a34
 8004b34:	20004a9c 	.word	0x20004a9c
 8004b38:	20004b04 	.word	0x20004b04

08004b3c <global_stdio_init.part.0>:
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <global_stdio_init.part.0+0x30>)
 8004b40:	4c0b      	ldr	r4, [pc, #44]	@ (8004b70 <global_stdio_init.part.0+0x34>)
 8004b42:	4a0c      	ldr	r2, [pc, #48]	@ (8004b74 <global_stdio_init.part.0+0x38>)
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	4620      	mov	r0, r4
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2104      	movs	r1, #4
 8004b4c:	f7ff ff94 	bl	8004a78 <std>
 8004b50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b54:	2201      	movs	r2, #1
 8004b56:	2109      	movs	r1, #9
 8004b58:	f7ff ff8e 	bl	8004a78 <std>
 8004b5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b60:	2202      	movs	r2, #2
 8004b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b66:	2112      	movs	r1, #18
 8004b68:	f7ff bf86 	b.w	8004a78 <std>
 8004b6c:	20004b6c 	.word	0x20004b6c
 8004b70:	20004a34 	.word	0x20004a34
 8004b74:	08004ae5 	.word	0x08004ae5

08004b78 <__sfp_lock_acquire>:
 8004b78:	4801      	ldr	r0, [pc, #4]	@ (8004b80 <__sfp_lock_acquire+0x8>)
 8004b7a:	f000 b90e 	b.w	8004d9a <__retarget_lock_acquire_recursive>
 8004b7e:	bf00      	nop
 8004b80:	20004b75 	.word	0x20004b75

08004b84 <__sfp_lock_release>:
 8004b84:	4801      	ldr	r0, [pc, #4]	@ (8004b8c <__sfp_lock_release+0x8>)
 8004b86:	f000 b909 	b.w	8004d9c <__retarget_lock_release_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	20004b75 	.word	0x20004b75

08004b90 <__sinit>:
 8004b90:	b510      	push	{r4, lr}
 8004b92:	4604      	mov	r4, r0
 8004b94:	f7ff fff0 	bl	8004b78 <__sfp_lock_acquire>
 8004b98:	6a23      	ldr	r3, [r4, #32]
 8004b9a:	b11b      	cbz	r3, 8004ba4 <__sinit+0x14>
 8004b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba0:	f7ff bff0 	b.w	8004b84 <__sfp_lock_release>
 8004ba4:	4b04      	ldr	r3, [pc, #16]	@ (8004bb8 <__sinit+0x28>)
 8004ba6:	6223      	str	r3, [r4, #32]
 8004ba8:	4b04      	ldr	r3, [pc, #16]	@ (8004bbc <__sinit+0x2c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f5      	bne.n	8004b9c <__sinit+0xc>
 8004bb0:	f7ff ffc4 	bl	8004b3c <global_stdio_init.part.0>
 8004bb4:	e7f2      	b.n	8004b9c <__sinit+0xc>
 8004bb6:	bf00      	nop
 8004bb8:	08004afd 	.word	0x08004afd
 8004bbc:	20004b6c 	.word	0x20004b6c

08004bc0 <_fwalk_sglue>:
 8004bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc4:	4607      	mov	r7, r0
 8004bc6:	4688      	mov	r8, r1
 8004bc8:	4614      	mov	r4, r2
 8004bca:	2600      	movs	r6, #0
 8004bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8004bd4:	d505      	bpl.n	8004be2 <_fwalk_sglue+0x22>
 8004bd6:	6824      	ldr	r4, [r4, #0]
 8004bd8:	2c00      	cmp	r4, #0
 8004bda:	d1f7      	bne.n	8004bcc <_fwalk_sglue+0xc>
 8004bdc:	4630      	mov	r0, r6
 8004bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004be2:	89ab      	ldrh	r3, [r5, #12]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d907      	bls.n	8004bf8 <_fwalk_sglue+0x38>
 8004be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bec:	3301      	adds	r3, #1
 8004bee:	d003      	beq.n	8004bf8 <_fwalk_sglue+0x38>
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	47c0      	blx	r8
 8004bf6:	4306      	orrs	r6, r0
 8004bf8:	3568      	adds	r5, #104	@ 0x68
 8004bfa:	e7e9      	b.n	8004bd0 <_fwalk_sglue+0x10>

08004bfc <iprintf>:
 8004bfc:	b40f      	push	{r0, r1, r2, r3}
 8004bfe:	b507      	push	{r0, r1, r2, lr}
 8004c00:	4906      	ldr	r1, [pc, #24]	@ (8004c1c <iprintf+0x20>)
 8004c02:	ab04      	add	r3, sp, #16
 8004c04:	6808      	ldr	r0, [r1, #0]
 8004c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c0a:	6881      	ldr	r1, [r0, #8]
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	f000 f9f7 	bl	8005000 <_vfiprintf_r>
 8004c12:	b003      	add	sp, #12
 8004c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c18:	b004      	add	sp, #16
 8004c1a:	4770      	bx	lr
 8004c1c:	2000001c 	.word	0x2000001c

08004c20 <__sread>:
 8004c20:	b510      	push	{r4, lr}
 8004c22:	460c      	mov	r4, r1
 8004c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c28:	f000 f868 	bl	8004cfc <_read_r>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	bfab      	itete	ge
 8004c30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c32:	89a3      	ldrhlt	r3, [r4, #12]
 8004c34:	181b      	addge	r3, r3, r0
 8004c36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c3a:	bfac      	ite	ge
 8004c3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c3e:	81a3      	strhlt	r3, [r4, #12]
 8004c40:	bd10      	pop	{r4, pc}

08004c42 <__swrite>:
 8004c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c46:	461f      	mov	r7, r3
 8004c48:	898b      	ldrh	r3, [r1, #12]
 8004c4a:	05db      	lsls	r3, r3, #23
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	460c      	mov	r4, r1
 8004c50:	4616      	mov	r6, r2
 8004c52:	d505      	bpl.n	8004c60 <__swrite+0x1e>
 8004c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c58:	2302      	movs	r3, #2
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f000 f83c 	bl	8004cd8 <_lseek_r>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	463b      	mov	r3, r7
 8004c70:	4628      	mov	r0, r5
 8004c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c76:	f000 b853 	b.w	8004d20 <_write_r>

08004c7a <__sseek>:
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c82:	f000 f829 	bl	8004cd8 <_lseek_r>
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	bf15      	itete	ne
 8004c8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c96:	81a3      	strheq	r3, [r4, #12]
 8004c98:	bf18      	it	ne
 8004c9a:	81a3      	strhne	r3, [r4, #12]
 8004c9c:	bd10      	pop	{r4, pc}

08004c9e <__sclose>:
 8004c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca2:	f000 b809 	b.w	8004cb8 <_close_r>

08004ca6 <memset>:
 8004ca6:	4402      	add	r2, r0
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d100      	bne.n	8004cb0 <memset+0xa>
 8004cae:	4770      	bx	lr
 8004cb0:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb4:	e7f9      	b.n	8004caa <memset+0x4>
	...

08004cb8 <_close_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4d06      	ldr	r5, [pc, #24]	@ (8004cd4 <_close_r+0x1c>)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	f7fb fe67 	bl	8000996 <_close>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_close_r+0x1a>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_close_r+0x1a>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	20004b70 	.word	0x20004b70

08004cd8 <_lseek_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d07      	ldr	r5, [pc, #28]	@ (8004cf8 <_lseek_r+0x20>)
 8004cdc:	4604      	mov	r4, r0
 8004cde:	4608      	mov	r0, r1
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	602a      	str	r2, [r5, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7fb fe7c 	bl	80009e4 <_lseek>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_lseek_r+0x1e>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_lseek_r+0x1e>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	20004b70 	.word	0x20004b70

08004cfc <_read_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d07      	ldr	r5, [pc, #28]	@ (8004d1c <_read_r+0x20>)
 8004d00:	4604      	mov	r4, r0
 8004d02:	4608      	mov	r0, r1
 8004d04:	4611      	mov	r1, r2
 8004d06:	2200      	movs	r2, #0
 8004d08:	602a      	str	r2, [r5, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f7fb fe0a 	bl	8000924 <_read>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_read_r+0x1e>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_read_r+0x1e>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	20004b70 	.word	0x20004b70

08004d20 <_write_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4d07      	ldr	r5, [pc, #28]	@ (8004d40 <_write_r+0x20>)
 8004d24:	4604      	mov	r4, r0
 8004d26:	4608      	mov	r0, r1
 8004d28:	4611      	mov	r1, r2
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	602a      	str	r2, [r5, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f7fb fe15 	bl	800095e <_write>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d102      	bne.n	8004d3e <_write_r+0x1e>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	b103      	cbz	r3, 8004d3e <_write_r+0x1e>
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	20004b70 	.word	0x20004b70

08004d44 <__errno>:
 8004d44:	4b01      	ldr	r3, [pc, #4]	@ (8004d4c <__errno+0x8>)
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	2000001c 	.word	0x2000001c

08004d50 <__libc_init_array>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	4d0d      	ldr	r5, [pc, #52]	@ (8004d88 <__libc_init_array+0x38>)
 8004d54:	4c0d      	ldr	r4, [pc, #52]	@ (8004d8c <__libc_init_array+0x3c>)
 8004d56:	1b64      	subs	r4, r4, r5
 8004d58:	10a4      	asrs	r4, r4, #2
 8004d5a:	2600      	movs	r6, #0
 8004d5c:	42a6      	cmp	r6, r4
 8004d5e:	d109      	bne.n	8004d74 <__libc_init_array+0x24>
 8004d60:	4d0b      	ldr	r5, [pc, #44]	@ (8004d90 <__libc_init_array+0x40>)
 8004d62:	4c0c      	ldr	r4, [pc, #48]	@ (8004d94 <__libc_init_array+0x44>)
 8004d64:	f000 fdc6 	bl	80058f4 <_init>
 8004d68:	1b64      	subs	r4, r4, r5
 8004d6a:	10a4      	asrs	r4, r4, #2
 8004d6c:	2600      	movs	r6, #0
 8004d6e:	42a6      	cmp	r6, r4
 8004d70:	d105      	bne.n	8004d7e <__libc_init_array+0x2e>
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d78:	4798      	blx	r3
 8004d7a:	3601      	adds	r6, #1
 8004d7c:	e7ee      	b.n	8004d5c <__libc_init_array+0xc>
 8004d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d82:	4798      	blx	r3
 8004d84:	3601      	adds	r6, #1
 8004d86:	e7f2      	b.n	8004d6e <__libc_init_array+0x1e>
 8004d88:	08005a98 	.word	0x08005a98
 8004d8c:	08005a98 	.word	0x08005a98
 8004d90:	08005a98 	.word	0x08005a98
 8004d94:	08005a9c 	.word	0x08005a9c

08004d98 <__retarget_lock_init_recursive>:
 8004d98:	4770      	bx	lr

08004d9a <__retarget_lock_acquire_recursive>:
 8004d9a:	4770      	bx	lr

08004d9c <__retarget_lock_release_recursive>:
 8004d9c:	4770      	bx	lr

08004d9e <memcpy>:
 8004d9e:	440a      	add	r2, r1
 8004da0:	4291      	cmp	r1, r2
 8004da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8004da6:	d100      	bne.n	8004daa <memcpy+0xc>
 8004da8:	4770      	bx	lr
 8004daa:	b510      	push	{r4, lr}
 8004dac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004db4:	4291      	cmp	r1, r2
 8004db6:	d1f9      	bne.n	8004dac <memcpy+0xe>
 8004db8:	bd10      	pop	{r4, pc}
	...

08004dbc <_free_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	2900      	cmp	r1, #0
 8004dc2:	d041      	beq.n	8004e48 <_free_r+0x8c>
 8004dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc8:	1f0c      	subs	r4, r1, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bfb8      	it	lt
 8004dce:	18e4      	addlt	r4, r4, r3
 8004dd0:	f000 f8e0 	bl	8004f94 <__malloc_lock>
 8004dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e4c <_free_r+0x90>)
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	b933      	cbnz	r3, 8004de8 <_free_r+0x2c>
 8004dda:	6063      	str	r3, [r4, #4]
 8004ddc:	6014      	str	r4, [r2, #0]
 8004dde:	4628      	mov	r0, r5
 8004de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de4:	f000 b8dc 	b.w	8004fa0 <__malloc_unlock>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d908      	bls.n	8004dfe <_free_r+0x42>
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	1821      	adds	r1, r4, r0
 8004df0:	428b      	cmp	r3, r1
 8004df2:	bf01      	itttt	eq
 8004df4:	6819      	ldreq	r1, [r3, #0]
 8004df6:	685b      	ldreq	r3, [r3, #4]
 8004df8:	1809      	addeq	r1, r1, r0
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	e7ed      	b.n	8004dda <_free_r+0x1e>
 8004dfe:	461a      	mov	r2, r3
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	b10b      	cbz	r3, 8004e08 <_free_r+0x4c>
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	d9fa      	bls.n	8004dfe <_free_r+0x42>
 8004e08:	6811      	ldr	r1, [r2, #0]
 8004e0a:	1850      	adds	r0, r2, r1
 8004e0c:	42a0      	cmp	r0, r4
 8004e0e:	d10b      	bne.n	8004e28 <_free_r+0x6c>
 8004e10:	6820      	ldr	r0, [r4, #0]
 8004e12:	4401      	add	r1, r0
 8004e14:	1850      	adds	r0, r2, r1
 8004e16:	4283      	cmp	r3, r0
 8004e18:	6011      	str	r1, [r2, #0]
 8004e1a:	d1e0      	bne.n	8004dde <_free_r+0x22>
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	6053      	str	r3, [r2, #4]
 8004e22:	4408      	add	r0, r1
 8004e24:	6010      	str	r0, [r2, #0]
 8004e26:	e7da      	b.n	8004dde <_free_r+0x22>
 8004e28:	d902      	bls.n	8004e30 <_free_r+0x74>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	602b      	str	r3, [r5, #0]
 8004e2e:	e7d6      	b.n	8004dde <_free_r+0x22>
 8004e30:	6820      	ldr	r0, [r4, #0]
 8004e32:	1821      	adds	r1, r4, r0
 8004e34:	428b      	cmp	r3, r1
 8004e36:	bf04      	itt	eq
 8004e38:	6819      	ldreq	r1, [r3, #0]
 8004e3a:	685b      	ldreq	r3, [r3, #4]
 8004e3c:	6063      	str	r3, [r4, #4]
 8004e3e:	bf04      	itt	eq
 8004e40:	1809      	addeq	r1, r1, r0
 8004e42:	6021      	streq	r1, [r4, #0]
 8004e44:	6054      	str	r4, [r2, #4]
 8004e46:	e7ca      	b.n	8004dde <_free_r+0x22>
 8004e48:	bd38      	pop	{r3, r4, r5, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20004b7c 	.word	0x20004b7c

08004e50 <sbrk_aligned>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	4e0f      	ldr	r6, [pc, #60]	@ (8004e90 <sbrk_aligned+0x40>)
 8004e54:	460c      	mov	r4, r1
 8004e56:	6831      	ldr	r1, [r6, #0]
 8004e58:	4605      	mov	r5, r0
 8004e5a:	b911      	cbnz	r1, 8004e62 <sbrk_aligned+0x12>
 8004e5c:	f000 fcb6 	bl	80057cc <_sbrk_r>
 8004e60:	6030      	str	r0, [r6, #0]
 8004e62:	4621      	mov	r1, r4
 8004e64:	4628      	mov	r0, r5
 8004e66:	f000 fcb1 	bl	80057cc <_sbrk_r>
 8004e6a:	1c43      	adds	r3, r0, #1
 8004e6c:	d103      	bne.n	8004e76 <sbrk_aligned+0x26>
 8004e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8004e72:	4620      	mov	r0, r4
 8004e74:	bd70      	pop	{r4, r5, r6, pc}
 8004e76:	1cc4      	adds	r4, r0, #3
 8004e78:	f024 0403 	bic.w	r4, r4, #3
 8004e7c:	42a0      	cmp	r0, r4
 8004e7e:	d0f8      	beq.n	8004e72 <sbrk_aligned+0x22>
 8004e80:	1a21      	subs	r1, r4, r0
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 fca2 	bl	80057cc <_sbrk_r>
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d1f2      	bne.n	8004e72 <sbrk_aligned+0x22>
 8004e8c:	e7ef      	b.n	8004e6e <sbrk_aligned+0x1e>
 8004e8e:	bf00      	nop
 8004e90:	20004b78 	.word	0x20004b78

08004e94 <_malloc_r>:
 8004e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e98:	1ccd      	adds	r5, r1, #3
 8004e9a:	f025 0503 	bic.w	r5, r5, #3
 8004e9e:	3508      	adds	r5, #8
 8004ea0:	2d0c      	cmp	r5, #12
 8004ea2:	bf38      	it	cc
 8004ea4:	250c      	movcc	r5, #12
 8004ea6:	2d00      	cmp	r5, #0
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	db01      	blt.n	8004eb0 <_malloc_r+0x1c>
 8004eac:	42a9      	cmp	r1, r5
 8004eae:	d904      	bls.n	8004eba <_malloc_r+0x26>
 8004eb0:	230c      	movs	r3, #12
 8004eb2:	6033      	str	r3, [r6, #0]
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f90 <_malloc_r+0xfc>
 8004ebe:	f000 f869 	bl	8004f94 <__malloc_lock>
 8004ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec6:	461c      	mov	r4, r3
 8004ec8:	bb44      	cbnz	r4, 8004f1c <_malloc_r+0x88>
 8004eca:	4629      	mov	r1, r5
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f7ff ffbf 	bl	8004e50 <sbrk_aligned>
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	d158      	bne.n	8004f8a <_malloc_r+0xf6>
 8004ed8:	f8d8 4000 	ldr.w	r4, [r8]
 8004edc:	4627      	mov	r7, r4
 8004ede:	2f00      	cmp	r7, #0
 8004ee0:	d143      	bne.n	8004f6a <_malloc_r+0xd6>
 8004ee2:	2c00      	cmp	r4, #0
 8004ee4:	d04b      	beq.n	8004f7e <_malloc_r+0xea>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	4639      	mov	r1, r7
 8004eea:	4630      	mov	r0, r6
 8004eec:	eb04 0903 	add.w	r9, r4, r3
 8004ef0:	f000 fc6c 	bl	80057cc <_sbrk_r>
 8004ef4:	4581      	cmp	r9, r0
 8004ef6:	d142      	bne.n	8004f7e <_malloc_r+0xea>
 8004ef8:	6821      	ldr	r1, [r4, #0]
 8004efa:	1a6d      	subs	r5, r5, r1
 8004efc:	4629      	mov	r1, r5
 8004efe:	4630      	mov	r0, r6
 8004f00:	f7ff ffa6 	bl	8004e50 <sbrk_aligned>
 8004f04:	3001      	adds	r0, #1
 8004f06:	d03a      	beq.n	8004f7e <_malloc_r+0xea>
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	442b      	add	r3, r5
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	bb62      	cbnz	r2, 8004f70 <_malloc_r+0xdc>
 8004f16:	f8c8 7000 	str.w	r7, [r8]
 8004f1a:	e00f      	b.n	8004f3c <_malloc_r+0xa8>
 8004f1c:	6822      	ldr	r2, [r4, #0]
 8004f1e:	1b52      	subs	r2, r2, r5
 8004f20:	d420      	bmi.n	8004f64 <_malloc_r+0xd0>
 8004f22:	2a0b      	cmp	r2, #11
 8004f24:	d917      	bls.n	8004f56 <_malloc_r+0xc2>
 8004f26:	1961      	adds	r1, r4, r5
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	6025      	str	r5, [r4, #0]
 8004f2c:	bf18      	it	ne
 8004f2e:	6059      	strne	r1, [r3, #4]
 8004f30:	6863      	ldr	r3, [r4, #4]
 8004f32:	bf08      	it	eq
 8004f34:	f8c8 1000 	streq.w	r1, [r8]
 8004f38:	5162      	str	r2, [r4, r5]
 8004f3a:	604b      	str	r3, [r1, #4]
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f000 f82f 	bl	8004fa0 <__malloc_unlock>
 8004f42:	f104 000b 	add.w	r0, r4, #11
 8004f46:	1d23      	adds	r3, r4, #4
 8004f48:	f020 0007 	bic.w	r0, r0, #7
 8004f4c:	1ac2      	subs	r2, r0, r3
 8004f4e:	bf1c      	itt	ne
 8004f50:	1a1b      	subne	r3, r3, r0
 8004f52:	50a3      	strne	r3, [r4, r2]
 8004f54:	e7af      	b.n	8004eb6 <_malloc_r+0x22>
 8004f56:	6862      	ldr	r2, [r4, #4]
 8004f58:	42a3      	cmp	r3, r4
 8004f5a:	bf0c      	ite	eq
 8004f5c:	f8c8 2000 	streq.w	r2, [r8]
 8004f60:	605a      	strne	r2, [r3, #4]
 8004f62:	e7eb      	b.n	8004f3c <_malloc_r+0xa8>
 8004f64:	4623      	mov	r3, r4
 8004f66:	6864      	ldr	r4, [r4, #4]
 8004f68:	e7ae      	b.n	8004ec8 <_malloc_r+0x34>
 8004f6a:	463c      	mov	r4, r7
 8004f6c:	687f      	ldr	r7, [r7, #4]
 8004f6e:	e7b6      	b.n	8004ede <_malloc_r+0x4a>
 8004f70:	461a      	mov	r2, r3
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	d1fb      	bne.n	8004f70 <_malloc_r+0xdc>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	6053      	str	r3, [r2, #4]
 8004f7c:	e7de      	b.n	8004f3c <_malloc_r+0xa8>
 8004f7e:	230c      	movs	r3, #12
 8004f80:	6033      	str	r3, [r6, #0]
 8004f82:	4630      	mov	r0, r6
 8004f84:	f000 f80c 	bl	8004fa0 <__malloc_unlock>
 8004f88:	e794      	b.n	8004eb4 <_malloc_r+0x20>
 8004f8a:	6005      	str	r5, [r0, #0]
 8004f8c:	e7d6      	b.n	8004f3c <_malloc_r+0xa8>
 8004f8e:	bf00      	nop
 8004f90:	20004b7c 	.word	0x20004b7c

08004f94 <__malloc_lock>:
 8004f94:	4801      	ldr	r0, [pc, #4]	@ (8004f9c <__malloc_lock+0x8>)
 8004f96:	f7ff bf00 	b.w	8004d9a <__retarget_lock_acquire_recursive>
 8004f9a:	bf00      	nop
 8004f9c:	20004b74 	.word	0x20004b74

08004fa0 <__malloc_unlock>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	@ (8004fa8 <__malloc_unlock+0x8>)
 8004fa2:	f7ff befb 	b.w	8004d9c <__retarget_lock_release_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	20004b74 	.word	0x20004b74

08004fac <__sfputc_r>:
 8004fac:	6893      	ldr	r3, [r2, #8]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	b410      	push	{r4}
 8004fb4:	6093      	str	r3, [r2, #8]
 8004fb6:	da08      	bge.n	8004fca <__sfputc_r+0x1e>
 8004fb8:	6994      	ldr	r4, [r2, #24]
 8004fba:	42a3      	cmp	r3, r4
 8004fbc:	db01      	blt.n	8004fc2 <__sfputc_r+0x16>
 8004fbe:	290a      	cmp	r1, #10
 8004fc0:	d103      	bne.n	8004fca <__sfputc_r+0x1e>
 8004fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fc6:	f000 bb6d 	b.w	80056a4 <__swbuf_r>
 8004fca:	6813      	ldr	r3, [r2, #0]
 8004fcc:	1c58      	adds	r0, r3, #1
 8004fce:	6010      	str	r0, [r2, #0]
 8004fd0:	7019      	strb	r1, [r3, #0]
 8004fd2:	4608      	mov	r0, r1
 8004fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <__sfputs_r>:
 8004fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fdc:	4606      	mov	r6, r0
 8004fde:	460f      	mov	r7, r1
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	18d5      	adds	r5, r2, r3
 8004fe4:	42ac      	cmp	r4, r5
 8004fe6:	d101      	bne.n	8004fec <__sfputs_r+0x12>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	e007      	b.n	8004ffc <__sfputs_r+0x22>
 8004fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff0:	463a      	mov	r2, r7
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f7ff ffda 	bl	8004fac <__sfputc_r>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d1f3      	bne.n	8004fe4 <__sfputs_r+0xa>
 8004ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005000 <_vfiprintf_r>:
 8005000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005004:	460d      	mov	r5, r1
 8005006:	b09d      	sub	sp, #116	@ 0x74
 8005008:	4614      	mov	r4, r2
 800500a:	4698      	mov	r8, r3
 800500c:	4606      	mov	r6, r0
 800500e:	b118      	cbz	r0, 8005018 <_vfiprintf_r+0x18>
 8005010:	6a03      	ldr	r3, [r0, #32]
 8005012:	b90b      	cbnz	r3, 8005018 <_vfiprintf_r+0x18>
 8005014:	f7ff fdbc 	bl	8004b90 <__sinit>
 8005018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800501a:	07d9      	lsls	r1, r3, #31
 800501c:	d405      	bmi.n	800502a <_vfiprintf_r+0x2a>
 800501e:	89ab      	ldrh	r3, [r5, #12]
 8005020:	059a      	lsls	r2, r3, #22
 8005022:	d402      	bmi.n	800502a <_vfiprintf_r+0x2a>
 8005024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005026:	f7ff feb8 	bl	8004d9a <__retarget_lock_acquire_recursive>
 800502a:	89ab      	ldrh	r3, [r5, #12]
 800502c:	071b      	lsls	r3, r3, #28
 800502e:	d501      	bpl.n	8005034 <_vfiprintf_r+0x34>
 8005030:	692b      	ldr	r3, [r5, #16]
 8005032:	b99b      	cbnz	r3, 800505c <_vfiprintf_r+0x5c>
 8005034:	4629      	mov	r1, r5
 8005036:	4630      	mov	r0, r6
 8005038:	f000 fb72 	bl	8005720 <__swsetup_r>
 800503c:	b170      	cbz	r0, 800505c <_vfiprintf_r+0x5c>
 800503e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005040:	07dc      	lsls	r4, r3, #31
 8005042:	d504      	bpl.n	800504e <_vfiprintf_r+0x4e>
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	b01d      	add	sp, #116	@ 0x74
 800504a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504e:	89ab      	ldrh	r3, [r5, #12]
 8005050:	0598      	lsls	r0, r3, #22
 8005052:	d4f7      	bmi.n	8005044 <_vfiprintf_r+0x44>
 8005054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005056:	f7ff fea1 	bl	8004d9c <__retarget_lock_release_recursive>
 800505a:	e7f3      	b.n	8005044 <_vfiprintf_r+0x44>
 800505c:	2300      	movs	r3, #0
 800505e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005060:	2320      	movs	r3, #32
 8005062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005066:	f8cd 800c 	str.w	r8, [sp, #12]
 800506a:	2330      	movs	r3, #48	@ 0x30
 800506c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800521c <_vfiprintf_r+0x21c>
 8005070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005074:	f04f 0901 	mov.w	r9, #1
 8005078:	4623      	mov	r3, r4
 800507a:	469a      	mov	sl, r3
 800507c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005080:	b10a      	cbz	r2, 8005086 <_vfiprintf_r+0x86>
 8005082:	2a25      	cmp	r2, #37	@ 0x25
 8005084:	d1f9      	bne.n	800507a <_vfiprintf_r+0x7a>
 8005086:	ebba 0b04 	subs.w	fp, sl, r4
 800508a:	d00b      	beq.n	80050a4 <_vfiprintf_r+0xa4>
 800508c:	465b      	mov	r3, fp
 800508e:	4622      	mov	r2, r4
 8005090:	4629      	mov	r1, r5
 8005092:	4630      	mov	r0, r6
 8005094:	f7ff ffa1 	bl	8004fda <__sfputs_r>
 8005098:	3001      	adds	r0, #1
 800509a:	f000 80a7 	beq.w	80051ec <_vfiprintf_r+0x1ec>
 800509e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050a0:	445a      	add	r2, fp
 80050a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80050a4:	f89a 3000 	ldrb.w	r3, [sl]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 809f 	beq.w	80051ec <_vfiprintf_r+0x1ec>
 80050ae:	2300      	movs	r3, #0
 80050b0:	f04f 32ff 	mov.w	r2, #4294967295
 80050b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b8:	f10a 0a01 	add.w	sl, sl, #1
 80050bc:	9304      	str	r3, [sp, #16]
 80050be:	9307      	str	r3, [sp, #28]
 80050c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80050c6:	4654      	mov	r4, sl
 80050c8:	2205      	movs	r2, #5
 80050ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ce:	4853      	ldr	r0, [pc, #332]	@ (800521c <_vfiprintf_r+0x21c>)
 80050d0:	f7fb f886 	bl	80001e0 <memchr>
 80050d4:	9a04      	ldr	r2, [sp, #16]
 80050d6:	b9d8      	cbnz	r0, 8005110 <_vfiprintf_r+0x110>
 80050d8:	06d1      	lsls	r1, r2, #27
 80050da:	bf44      	itt	mi
 80050dc:	2320      	movmi	r3, #32
 80050de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050e2:	0713      	lsls	r3, r2, #28
 80050e4:	bf44      	itt	mi
 80050e6:	232b      	movmi	r3, #43	@ 0x2b
 80050e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050ec:	f89a 3000 	ldrb.w	r3, [sl]
 80050f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80050f2:	d015      	beq.n	8005120 <_vfiprintf_r+0x120>
 80050f4:	9a07      	ldr	r2, [sp, #28]
 80050f6:	4654      	mov	r4, sl
 80050f8:	2000      	movs	r0, #0
 80050fa:	f04f 0c0a 	mov.w	ip, #10
 80050fe:	4621      	mov	r1, r4
 8005100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005104:	3b30      	subs	r3, #48	@ 0x30
 8005106:	2b09      	cmp	r3, #9
 8005108:	d94b      	bls.n	80051a2 <_vfiprintf_r+0x1a2>
 800510a:	b1b0      	cbz	r0, 800513a <_vfiprintf_r+0x13a>
 800510c:	9207      	str	r2, [sp, #28]
 800510e:	e014      	b.n	800513a <_vfiprintf_r+0x13a>
 8005110:	eba0 0308 	sub.w	r3, r0, r8
 8005114:	fa09 f303 	lsl.w	r3, r9, r3
 8005118:	4313      	orrs	r3, r2
 800511a:	9304      	str	r3, [sp, #16]
 800511c:	46a2      	mov	sl, r4
 800511e:	e7d2      	b.n	80050c6 <_vfiprintf_r+0xc6>
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	1d19      	adds	r1, r3, #4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	9103      	str	r1, [sp, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	bfbb      	ittet	lt
 800512c:	425b      	neglt	r3, r3
 800512e:	f042 0202 	orrlt.w	r2, r2, #2
 8005132:	9307      	strge	r3, [sp, #28]
 8005134:	9307      	strlt	r3, [sp, #28]
 8005136:	bfb8      	it	lt
 8005138:	9204      	strlt	r2, [sp, #16]
 800513a:	7823      	ldrb	r3, [r4, #0]
 800513c:	2b2e      	cmp	r3, #46	@ 0x2e
 800513e:	d10a      	bne.n	8005156 <_vfiprintf_r+0x156>
 8005140:	7863      	ldrb	r3, [r4, #1]
 8005142:	2b2a      	cmp	r3, #42	@ 0x2a
 8005144:	d132      	bne.n	80051ac <_vfiprintf_r+0x1ac>
 8005146:	9b03      	ldr	r3, [sp, #12]
 8005148:	1d1a      	adds	r2, r3, #4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	9203      	str	r2, [sp, #12]
 800514e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005152:	3402      	adds	r4, #2
 8005154:	9305      	str	r3, [sp, #20]
 8005156:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800522c <_vfiprintf_r+0x22c>
 800515a:	7821      	ldrb	r1, [r4, #0]
 800515c:	2203      	movs	r2, #3
 800515e:	4650      	mov	r0, sl
 8005160:	f7fb f83e 	bl	80001e0 <memchr>
 8005164:	b138      	cbz	r0, 8005176 <_vfiprintf_r+0x176>
 8005166:	9b04      	ldr	r3, [sp, #16]
 8005168:	eba0 000a 	sub.w	r0, r0, sl
 800516c:	2240      	movs	r2, #64	@ 0x40
 800516e:	4082      	lsls	r2, r0
 8005170:	4313      	orrs	r3, r2
 8005172:	3401      	adds	r4, #1
 8005174:	9304      	str	r3, [sp, #16]
 8005176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800517a:	4829      	ldr	r0, [pc, #164]	@ (8005220 <_vfiprintf_r+0x220>)
 800517c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005180:	2206      	movs	r2, #6
 8005182:	f7fb f82d 	bl	80001e0 <memchr>
 8005186:	2800      	cmp	r0, #0
 8005188:	d03f      	beq.n	800520a <_vfiprintf_r+0x20a>
 800518a:	4b26      	ldr	r3, [pc, #152]	@ (8005224 <_vfiprintf_r+0x224>)
 800518c:	bb1b      	cbnz	r3, 80051d6 <_vfiprintf_r+0x1d6>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	3307      	adds	r3, #7
 8005192:	f023 0307 	bic.w	r3, r3, #7
 8005196:	3308      	adds	r3, #8
 8005198:	9303      	str	r3, [sp, #12]
 800519a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800519c:	443b      	add	r3, r7
 800519e:	9309      	str	r3, [sp, #36]	@ 0x24
 80051a0:	e76a      	b.n	8005078 <_vfiprintf_r+0x78>
 80051a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80051a6:	460c      	mov	r4, r1
 80051a8:	2001      	movs	r0, #1
 80051aa:	e7a8      	b.n	80050fe <_vfiprintf_r+0xfe>
 80051ac:	2300      	movs	r3, #0
 80051ae:	3401      	adds	r4, #1
 80051b0:	9305      	str	r3, [sp, #20]
 80051b2:	4619      	mov	r1, r3
 80051b4:	f04f 0c0a 	mov.w	ip, #10
 80051b8:	4620      	mov	r0, r4
 80051ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051be:	3a30      	subs	r2, #48	@ 0x30
 80051c0:	2a09      	cmp	r2, #9
 80051c2:	d903      	bls.n	80051cc <_vfiprintf_r+0x1cc>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0c6      	beq.n	8005156 <_vfiprintf_r+0x156>
 80051c8:	9105      	str	r1, [sp, #20]
 80051ca:	e7c4      	b.n	8005156 <_vfiprintf_r+0x156>
 80051cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d0:	4604      	mov	r4, r0
 80051d2:	2301      	movs	r3, #1
 80051d4:	e7f0      	b.n	80051b8 <_vfiprintf_r+0x1b8>
 80051d6:	ab03      	add	r3, sp, #12
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	462a      	mov	r2, r5
 80051dc:	4b12      	ldr	r3, [pc, #72]	@ (8005228 <_vfiprintf_r+0x228>)
 80051de:	a904      	add	r1, sp, #16
 80051e0:	4630      	mov	r0, r6
 80051e2:	f3af 8000 	nop.w
 80051e6:	4607      	mov	r7, r0
 80051e8:	1c78      	adds	r0, r7, #1
 80051ea:	d1d6      	bne.n	800519a <_vfiprintf_r+0x19a>
 80051ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051ee:	07d9      	lsls	r1, r3, #31
 80051f0:	d405      	bmi.n	80051fe <_vfiprintf_r+0x1fe>
 80051f2:	89ab      	ldrh	r3, [r5, #12]
 80051f4:	059a      	lsls	r2, r3, #22
 80051f6:	d402      	bmi.n	80051fe <_vfiprintf_r+0x1fe>
 80051f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051fa:	f7ff fdcf 	bl	8004d9c <__retarget_lock_release_recursive>
 80051fe:	89ab      	ldrh	r3, [r5, #12]
 8005200:	065b      	lsls	r3, r3, #25
 8005202:	f53f af1f 	bmi.w	8005044 <_vfiprintf_r+0x44>
 8005206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005208:	e71e      	b.n	8005048 <_vfiprintf_r+0x48>
 800520a:	ab03      	add	r3, sp, #12
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	462a      	mov	r2, r5
 8005210:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <_vfiprintf_r+0x228>)
 8005212:	a904      	add	r1, sp, #16
 8005214:	4630      	mov	r0, r6
 8005216:	f000 f879 	bl	800530c <_printf_i>
 800521a:	e7e4      	b.n	80051e6 <_vfiprintf_r+0x1e6>
 800521c:	08005a5c 	.word	0x08005a5c
 8005220:	08005a66 	.word	0x08005a66
 8005224:	00000000 	.word	0x00000000
 8005228:	08004fdb 	.word	0x08004fdb
 800522c:	08005a62 	.word	0x08005a62

08005230 <_printf_common>:
 8005230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005234:	4616      	mov	r6, r2
 8005236:	4698      	mov	r8, r3
 8005238:	688a      	ldr	r2, [r1, #8]
 800523a:	690b      	ldr	r3, [r1, #16]
 800523c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005240:	4293      	cmp	r3, r2
 8005242:	bfb8      	it	lt
 8005244:	4613      	movlt	r3, r2
 8005246:	6033      	str	r3, [r6, #0]
 8005248:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800524c:	4607      	mov	r7, r0
 800524e:	460c      	mov	r4, r1
 8005250:	b10a      	cbz	r2, 8005256 <_printf_common+0x26>
 8005252:	3301      	adds	r3, #1
 8005254:	6033      	str	r3, [r6, #0]
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	0699      	lsls	r1, r3, #26
 800525a:	bf42      	ittt	mi
 800525c:	6833      	ldrmi	r3, [r6, #0]
 800525e:	3302      	addmi	r3, #2
 8005260:	6033      	strmi	r3, [r6, #0]
 8005262:	6825      	ldr	r5, [r4, #0]
 8005264:	f015 0506 	ands.w	r5, r5, #6
 8005268:	d106      	bne.n	8005278 <_printf_common+0x48>
 800526a:	f104 0a19 	add.w	sl, r4, #25
 800526e:	68e3      	ldr	r3, [r4, #12]
 8005270:	6832      	ldr	r2, [r6, #0]
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	42ab      	cmp	r3, r5
 8005276:	dc26      	bgt.n	80052c6 <_printf_common+0x96>
 8005278:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800527c:	6822      	ldr	r2, [r4, #0]
 800527e:	3b00      	subs	r3, #0
 8005280:	bf18      	it	ne
 8005282:	2301      	movne	r3, #1
 8005284:	0692      	lsls	r2, r2, #26
 8005286:	d42b      	bmi.n	80052e0 <_printf_common+0xb0>
 8005288:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800528c:	4641      	mov	r1, r8
 800528e:	4638      	mov	r0, r7
 8005290:	47c8      	blx	r9
 8005292:	3001      	adds	r0, #1
 8005294:	d01e      	beq.n	80052d4 <_printf_common+0xa4>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	6922      	ldr	r2, [r4, #16]
 800529a:	f003 0306 	and.w	r3, r3, #6
 800529e:	2b04      	cmp	r3, #4
 80052a0:	bf02      	ittt	eq
 80052a2:	68e5      	ldreq	r5, [r4, #12]
 80052a4:	6833      	ldreq	r3, [r6, #0]
 80052a6:	1aed      	subeq	r5, r5, r3
 80052a8:	68a3      	ldr	r3, [r4, #8]
 80052aa:	bf0c      	ite	eq
 80052ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b0:	2500      	movne	r5, #0
 80052b2:	4293      	cmp	r3, r2
 80052b4:	bfc4      	itt	gt
 80052b6:	1a9b      	subgt	r3, r3, r2
 80052b8:	18ed      	addgt	r5, r5, r3
 80052ba:	2600      	movs	r6, #0
 80052bc:	341a      	adds	r4, #26
 80052be:	42b5      	cmp	r5, r6
 80052c0:	d11a      	bne.n	80052f8 <_printf_common+0xc8>
 80052c2:	2000      	movs	r0, #0
 80052c4:	e008      	b.n	80052d8 <_printf_common+0xa8>
 80052c6:	2301      	movs	r3, #1
 80052c8:	4652      	mov	r2, sl
 80052ca:	4641      	mov	r1, r8
 80052cc:	4638      	mov	r0, r7
 80052ce:	47c8      	blx	r9
 80052d0:	3001      	adds	r0, #1
 80052d2:	d103      	bne.n	80052dc <_printf_common+0xac>
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052dc:	3501      	adds	r5, #1
 80052de:	e7c6      	b.n	800526e <_printf_common+0x3e>
 80052e0:	18e1      	adds	r1, r4, r3
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	2030      	movs	r0, #48	@ 0x30
 80052e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052ea:	4422      	add	r2, r4
 80052ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052f4:	3302      	adds	r3, #2
 80052f6:	e7c7      	b.n	8005288 <_printf_common+0x58>
 80052f8:	2301      	movs	r3, #1
 80052fa:	4622      	mov	r2, r4
 80052fc:	4641      	mov	r1, r8
 80052fe:	4638      	mov	r0, r7
 8005300:	47c8      	blx	r9
 8005302:	3001      	adds	r0, #1
 8005304:	d0e6      	beq.n	80052d4 <_printf_common+0xa4>
 8005306:	3601      	adds	r6, #1
 8005308:	e7d9      	b.n	80052be <_printf_common+0x8e>
	...

0800530c <_printf_i>:
 800530c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	7e0f      	ldrb	r7, [r1, #24]
 8005312:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005314:	2f78      	cmp	r7, #120	@ 0x78
 8005316:	4691      	mov	r9, r2
 8005318:	4680      	mov	r8, r0
 800531a:	460c      	mov	r4, r1
 800531c:	469a      	mov	sl, r3
 800531e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005322:	d807      	bhi.n	8005334 <_printf_i+0x28>
 8005324:	2f62      	cmp	r7, #98	@ 0x62
 8005326:	d80a      	bhi.n	800533e <_printf_i+0x32>
 8005328:	2f00      	cmp	r7, #0
 800532a:	f000 80d2 	beq.w	80054d2 <_printf_i+0x1c6>
 800532e:	2f58      	cmp	r7, #88	@ 0x58
 8005330:	f000 80b9 	beq.w	80054a6 <_printf_i+0x19a>
 8005334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005338:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800533c:	e03a      	b.n	80053b4 <_printf_i+0xa8>
 800533e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005342:	2b15      	cmp	r3, #21
 8005344:	d8f6      	bhi.n	8005334 <_printf_i+0x28>
 8005346:	a101      	add	r1, pc, #4	@ (adr r1, 800534c <_printf_i+0x40>)
 8005348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800534c:	080053a5 	.word	0x080053a5
 8005350:	080053b9 	.word	0x080053b9
 8005354:	08005335 	.word	0x08005335
 8005358:	08005335 	.word	0x08005335
 800535c:	08005335 	.word	0x08005335
 8005360:	08005335 	.word	0x08005335
 8005364:	080053b9 	.word	0x080053b9
 8005368:	08005335 	.word	0x08005335
 800536c:	08005335 	.word	0x08005335
 8005370:	08005335 	.word	0x08005335
 8005374:	08005335 	.word	0x08005335
 8005378:	080054b9 	.word	0x080054b9
 800537c:	080053e3 	.word	0x080053e3
 8005380:	08005473 	.word	0x08005473
 8005384:	08005335 	.word	0x08005335
 8005388:	08005335 	.word	0x08005335
 800538c:	080054db 	.word	0x080054db
 8005390:	08005335 	.word	0x08005335
 8005394:	080053e3 	.word	0x080053e3
 8005398:	08005335 	.word	0x08005335
 800539c:	08005335 	.word	0x08005335
 80053a0:	0800547b 	.word	0x0800547b
 80053a4:	6833      	ldr	r3, [r6, #0]
 80053a6:	1d1a      	adds	r2, r3, #4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6032      	str	r2, [r6, #0]
 80053ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053b4:	2301      	movs	r3, #1
 80053b6:	e09d      	b.n	80054f4 <_printf_i+0x1e8>
 80053b8:	6833      	ldr	r3, [r6, #0]
 80053ba:	6820      	ldr	r0, [r4, #0]
 80053bc:	1d19      	adds	r1, r3, #4
 80053be:	6031      	str	r1, [r6, #0]
 80053c0:	0606      	lsls	r6, r0, #24
 80053c2:	d501      	bpl.n	80053c8 <_printf_i+0xbc>
 80053c4:	681d      	ldr	r5, [r3, #0]
 80053c6:	e003      	b.n	80053d0 <_printf_i+0xc4>
 80053c8:	0645      	lsls	r5, r0, #25
 80053ca:	d5fb      	bpl.n	80053c4 <_printf_i+0xb8>
 80053cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	da03      	bge.n	80053dc <_printf_i+0xd0>
 80053d4:	232d      	movs	r3, #45	@ 0x2d
 80053d6:	426d      	negs	r5, r5
 80053d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053dc:	4859      	ldr	r0, [pc, #356]	@ (8005544 <_printf_i+0x238>)
 80053de:	230a      	movs	r3, #10
 80053e0:	e011      	b.n	8005406 <_printf_i+0xfa>
 80053e2:	6821      	ldr	r1, [r4, #0]
 80053e4:	6833      	ldr	r3, [r6, #0]
 80053e6:	0608      	lsls	r0, r1, #24
 80053e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053ec:	d402      	bmi.n	80053f4 <_printf_i+0xe8>
 80053ee:	0649      	lsls	r1, r1, #25
 80053f0:	bf48      	it	mi
 80053f2:	b2ad      	uxthmi	r5, r5
 80053f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80053f6:	4853      	ldr	r0, [pc, #332]	@ (8005544 <_printf_i+0x238>)
 80053f8:	6033      	str	r3, [r6, #0]
 80053fa:	bf14      	ite	ne
 80053fc:	230a      	movne	r3, #10
 80053fe:	2308      	moveq	r3, #8
 8005400:	2100      	movs	r1, #0
 8005402:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005406:	6866      	ldr	r6, [r4, #4]
 8005408:	60a6      	str	r6, [r4, #8]
 800540a:	2e00      	cmp	r6, #0
 800540c:	bfa2      	ittt	ge
 800540e:	6821      	ldrge	r1, [r4, #0]
 8005410:	f021 0104 	bicge.w	r1, r1, #4
 8005414:	6021      	strge	r1, [r4, #0]
 8005416:	b90d      	cbnz	r5, 800541c <_printf_i+0x110>
 8005418:	2e00      	cmp	r6, #0
 800541a:	d04b      	beq.n	80054b4 <_printf_i+0x1a8>
 800541c:	4616      	mov	r6, r2
 800541e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005422:	fb03 5711 	mls	r7, r3, r1, r5
 8005426:	5dc7      	ldrb	r7, [r0, r7]
 8005428:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800542c:	462f      	mov	r7, r5
 800542e:	42bb      	cmp	r3, r7
 8005430:	460d      	mov	r5, r1
 8005432:	d9f4      	bls.n	800541e <_printf_i+0x112>
 8005434:	2b08      	cmp	r3, #8
 8005436:	d10b      	bne.n	8005450 <_printf_i+0x144>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	07df      	lsls	r7, r3, #31
 800543c:	d508      	bpl.n	8005450 <_printf_i+0x144>
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	6861      	ldr	r1, [r4, #4]
 8005442:	4299      	cmp	r1, r3
 8005444:	bfde      	ittt	le
 8005446:	2330      	movle	r3, #48	@ 0x30
 8005448:	f806 3c01 	strble.w	r3, [r6, #-1]
 800544c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005450:	1b92      	subs	r2, r2, r6
 8005452:	6122      	str	r2, [r4, #16]
 8005454:	f8cd a000 	str.w	sl, [sp]
 8005458:	464b      	mov	r3, r9
 800545a:	aa03      	add	r2, sp, #12
 800545c:	4621      	mov	r1, r4
 800545e:	4640      	mov	r0, r8
 8005460:	f7ff fee6 	bl	8005230 <_printf_common>
 8005464:	3001      	adds	r0, #1
 8005466:	d14a      	bne.n	80054fe <_printf_i+0x1f2>
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	b004      	add	sp, #16
 800546e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	f043 0320 	orr.w	r3, r3, #32
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	4833      	ldr	r0, [pc, #204]	@ (8005548 <_printf_i+0x23c>)
 800547c:	2778      	movs	r7, #120	@ 0x78
 800547e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	6831      	ldr	r1, [r6, #0]
 8005486:	061f      	lsls	r7, r3, #24
 8005488:	f851 5b04 	ldr.w	r5, [r1], #4
 800548c:	d402      	bmi.n	8005494 <_printf_i+0x188>
 800548e:	065f      	lsls	r7, r3, #25
 8005490:	bf48      	it	mi
 8005492:	b2ad      	uxthmi	r5, r5
 8005494:	6031      	str	r1, [r6, #0]
 8005496:	07d9      	lsls	r1, r3, #31
 8005498:	bf44      	itt	mi
 800549a:	f043 0320 	orrmi.w	r3, r3, #32
 800549e:	6023      	strmi	r3, [r4, #0]
 80054a0:	b11d      	cbz	r5, 80054aa <_printf_i+0x19e>
 80054a2:	2310      	movs	r3, #16
 80054a4:	e7ac      	b.n	8005400 <_printf_i+0xf4>
 80054a6:	4827      	ldr	r0, [pc, #156]	@ (8005544 <_printf_i+0x238>)
 80054a8:	e7e9      	b.n	800547e <_printf_i+0x172>
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	f023 0320 	bic.w	r3, r3, #32
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	e7f6      	b.n	80054a2 <_printf_i+0x196>
 80054b4:	4616      	mov	r6, r2
 80054b6:	e7bd      	b.n	8005434 <_printf_i+0x128>
 80054b8:	6833      	ldr	r3, [r6, #0]
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	6961      	ldr	r1, [r4, #20]
 80054be:	1d18      	adds	r0, r3, #4
 80054c0:	6030      	str	r0, [r6, #0]
 80054c2:	062e      	lsls	r6, r5, #24
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	d501      	bpl.n	80054cc <_printf_i+0x1c0>
 80054c8:	6019      	str	r1, [r3, #0]
 80054ca:	e002      	b.n	80054d2 <_printf_i+0x1c6>
 80054cc:	0668      	lsls	r0, r5, #25
 80054ce:	d5fb      	bpl.n	80054c8 <_printf_i+0x1bc>
 80054d0:	8019      	strh	r1, [r3, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	6123      	str	r3, [r4, #16]
 80054d6:	4616      	mov	r6, r2
 80054d8:	e7bc      	b.n	8005454 <_printf_i+0x148>
 80054da:	6833      	ldr	r3, [r6, #0]
 80054dc:	1d1a      	adds	r2, r3, #4
 80054de:	6032      	str	r2, [r6, #0]
 80054e0:	681e      	ldr	r6, [r3, #0]
 80054e2:	6862      	ldr	r2, [r4, #4]
 80054e4:	2100      	movs	r1, #0
 80054e6:	4630      	mov	r0, r6
 80054e8:	f7fa fe7a 	bl	80001e0 <memchr>
 80054ec:	b108      	cbz	r0, 80054f2 <_printf_i+0x1e6>
 80054ee:	1b80      	subs	r0, r0, r6
 80054f0:	6060      	str	r0, [r4, #4]
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	2300      	movs	r3, #0
 80054f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054fc:	e7aa      	b.n	8005454 <_printf_i+0x148>
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	4632      	mov	r2, r6
 8005502:	4649      	mov	r1, r9
 8005504:	4640      	mov	r0, r8
 8005506:	47d0      	blx	sl
 8005508:	3001      	adds	r0, #1
 800550a:	d0ad      	beq.n	8005468 <_printf_i+0x15c>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	079b      	lsls	r3, r3, #30
 8005510:	d413      	bmi.n	800553a <_printf_i+0x22e>
 8005512:	68e0      	ldr	r0, [r4, #12]
 8005514:	9b03      	ldr	r3, [sp, #12]
 8005516:	4298      	cmp	r0, r3
 8005518:	bfb8      	it	lt
 800551a:	4618      	movlt	r0, r3
 800551c:	e7a6      	b.n	800546c <_printf_i+0x160>
 800551e:	2301      	movs	r3, #1
 8005520:	4632      	mov	r2, r6
 8005522:	4649      	mov	r1, r9
 8005524:	4640      	mov	r0, r8
 8005526:	47d0      	blx	sl
 8005528:	3001      	adds	r0, #1
 800552a:	d09d      	beq.n	8005468 <_printf_i+0x15c>
 800552c:	3501      	adds	r5, #1
 800552e:	68e3      	ldr	r3, [r4, #12]
 8005530:	9903      	ldr	r1, [sp, #12]
 8005532:	1a5b      	subs	r3, r3, r1
 8005534:	42ab      	cmp	r3, r5
 8005536:	dcf2      	bgt.n	800551e <_printf_i+0x212>
 8005538:	e7eb      	b.n	8005512 <_printf_i+0x206>
 800553a:	2500      	movs	r5, #0
 800553c:	f104 0619 	add.w	r6, r4, #25
 8005540:	e7f5      	b.n	800552e <_printf_i+0x222>
 8005542:	bf00      	nop
 8005544:	08005a6d 	.word	0x08005a6d
 8005548:	08005a7e 	.word	0x08005a7e

0800554c <__sflush_r>:
 800554c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005554:	0716      	lsls	r6, r2, #28
 8005556:	4605      	mov	r5, r0
 8005558:	460c      	mov	r4, r1
 800555a:	d454      	bmi.n	8005606 <__sflush_r+0xba>
 800555c:	684b      	ldr	r3, [r1, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	dc02      	bgt.n	8005568 <__sflush_r+0x1c>
 8005562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	dd48      	ble.n	80055fa <__sflush_r+0xae>
 8005568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800556a:	2e00      	cmp	r6, #0
 800556c:	d045      	beq.n	80055fa <__sflush_r+0xae>
 800556e:	2300      	movs	r3, #0
 8005570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005574:	682f      	ldr	r7, [r5, #0]
 8005576:	6a21      	ldr	r1, [r4, #32]
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	d030      	beq.n	80055de <__sflush_r+0x92>
 800557c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	0759      	lsls	r1, r3, #29
 8005582:	d505      	bpl.n	8005590 <__sflush_r+0x44>
 8005584:	6863      	ldr	r3, [r4, #4]
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800558a:	b10b      	cbz	r3, 8005590 <__sflush_r+0x44>
 800558c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005594:	6a21      	ldr	r1, [r4, #32]
 8005596:	4628      	mov	r0, r5
 8005598:	47b0      	blx	r6
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	d106      	bne.n	80055ae <__sflush_r+0x62>
 80055a0:	6829      	ldr	r1, [r5, #0]
 80055a2:	291d      	cmp	r1, #29
 80055a4:	d82b      	bhi.n	80055fe <__sflush_r+0xb2>
 80055a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005650 <__sflush_r+0x104>)
 80055a8:	410a      	asrs	r2, r1
 80055aa:	07d6      	lsls	r6, r2, #31
 80055ac:	d427      	bmi.n	80055fe <__sflush_r+0xb2>
 80055ae:	2200      	movs	r2, #0
 80055b0:	6062      	str	r2, [r4, #4]
 80055b2:	04d9      	lsls	r1, r3, #19
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	6022      	str	r2, [r4, #0]
 80055b8:	d504      	bpl.n	80055c4 <__sflush_r+0x78>
 80055ba:	1c42      	adds	r2, r0, #1
 80055bc:	d101      	bne.n	80055c2 <__sflush_r+0x76>
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	b903      	cbnz	r3, 80055c4 <__sflush_r+0x78>
 80055c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80055c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055c6:	602f      	str	r7, [r5, #0]
 80055c8:	b1b9      	cbz	r1, 80055fa <__sflush_r+0xae>
 80055ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055ce:	4299      	cmp	r1, r3
 80055d0:	d002      	beq.n	80055d8 <__sflush_r+0x8c>
 80055d2:	4628      	mov	r0, r5
 80055d4:	f7ff fbf2 	bl	8004dbc <_free_r>
 80055d8:	2300      	movs	r3, #0
 80055da:	6363      	str	r3, [r4, #52]	@ 0x34
 80055dc:	e00d      	b.n	80055fa <__sflush_r+0xae>
 80055de:	2301      	movs	r3, #1
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b0      	blx	r6
 80055e4:	4602      	mov	r2, r0
 80055e6:	1c50      	adds	r0, r2, #1
 80055e8:	d1c9      	bne.n	800557e <__sflush_r+0x32>
 80055ea:	682b      	ldr	r3, [r5, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0c6      	beq.n	800557e <__sflush_r+0x32>
 80055f0:	2b1d      	cmp	r3, #29
 80055f2:	d001      	beq.n	80055f8 <__sflush_r+0xac>
 80055f4:	2b16      	cmp	r3, #22
 80055f6:	d11e      	bne.n	8005636 <__sflush_r+0xea>
 80055f8:	602f      	str	r7, [r5, #0]
 80055fa:	2000      	movs	r0, #0
 80055fc:	e022      	b.n	8005644 <__sflush_r+0xf8>
 80055fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005602:	b21b      	sxth	r3, r3
 8005604:	e01b      	b.n	800563e <__sflush_r+0xf2>
 8005606:	690f      	ldr	r7, [r1, #16]
 8005608:	2f00      	cmp	r7, #0
 800560a:	d0f6      	beq.n	80055fa <__sflush_r+0xae>
 800560c:	0793      	lsls	r3, r2, #30
 800560e:	680e      	ldr	r6, [r1, #0]
 8005610:	bf08      	it	eq
 8005612:	694b      	ldreq	r3, [r1, #20]
 8005614:	600f      	str	r7, [r1, #0]
 8005616:	bf18      	it	ne
 8005618:	2300      	movne	r3, #0
 800561a:	eba6 0807 	sub.w	r8, r6, r7
 800561e:	608b      	str	r3, [r1, #8]
 8005620:	f1b8 0f00 	cmp.w	r8, #0
 8005624:	dde9      	ble.n	80055fa <__sflush_r+0xae>
 8005626:	6a21      	ldr	r1, [r4, #32]
 8005628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800562a:	4643      	mov	r3, r8
 800562c:	463a      	mov	r2, r7
 800562e:	4628      	mov	r0, r5
 8005630:	47b0      	blx	r6
 8005632:	2800      	cmp	r0, #0
 8005634:	dc08      	bgt.n	8005648 <__sflush_r+0xfc>
 8005636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005648:	4407      	add	r7, r0
 800564a:	eba8 0800 	sub.w	r8, r8, r0
 800564e:	e7e7      	b.n	8005620 <__sflush_r+0xd4>
 8005650:	dfbffffe 	.word	0xdfbffffe

08005654 <_fflush_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	690b      	ldr	r3, [r1, #16]
 8005658:	4605      	mov	r5, r0
 800565a:	460c      	mov	r4, r1
 800565c:	b913      	cbnz	r3, 8005664 <_fflush_r+0x10>
 800565e:	2500      	movs	r5, #0
 8005660:	4628      	mov	r0, r5
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	b118      	cbz	r0, 800566e <_fflush_r+0x1a>
 8005666:	6a03      	ldr	r3, [r0, #32]
 8005668:	b90b      	cbnz	r3, 800566e <_fflush_r+0x1a>
 800566a:	f7ff fa91 	bl	8004b90 <__sinit>
 800566e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f3      	beq.n	800565e <_fflush_r+0xa>
 8005676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005678:	07d0      	lsls	r0, r2, #31
 800567a:	d404      	bmi.n	8005686 <_fflush_r+0x32>
 800567c:	0599      	lsls	r1, r3, #22
 800567e:	d402      	bmi.n	8005686 <_fflush_r+0x32>
 8005680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005682:	f7ff fb8a 	bl	8004d9a <__retarget_lock_acquire_recursive>
 8005686:	4628      	mov	r0, r5
 8005688:	4621      	mov	r1, r4
 800568a:	f7ff ff5f 	bl	800554c <__sflush_r>
 800568e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005690:	07da      	lsls	r2, r3, #31
 8005692:	4605      	mov	r5, r0
 8005694:	d4e4      	bmi.n	8005660 <_fflush_r+0xc>
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	059b      	lsls	r3, r3, #22
 800569a:	d4e1      	bmi.n	8005660 <_fflush_r+0xc>
 800569c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800569e:	f7ff fb7d 	bl	8004d9c <__retarget_lock_release_recursive>
 80056a2:	e7dd      	b.n	8005660 <_fflush_r+0xc>

080056a4 <__swbuf_r>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	460e      	mov	r6, r1
 80056a8:	4614      	mov	r4, r2
 80056aa:	4605      	mov	r5, r0
 80056ac:	b118      	cbz	r0, 80056b6 <__swbuf_r+0x12>
 80056ae:	6a03      	ldr	r3, [r0, #32]
 80056b0:	b90b      	cbnz	r3, 80056b6 <__swbuf_r+0x12>
 80056b2:	f7ff fa6d 	bl	8004b90 <__sinit>
 80056b6:	69a3      	ldr	r3, [r4, #24]
 80056b8:	60a3      	str	r3, [r4, #8]
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	071a      	lsls	r2, r3, #28
 80056be:	d501      	bpl.n	80056c4 <__swbuf_r+0x20>
 80056c0:	6923      	ldr	r3, [r4, #16]
 80056c2:	b943      	cbnz	r3, 80056d6 <__swbuf_r+0x32>
 80056c4:	4621      	mov	r1, r4
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 f82a 	bl	8005720 <__swsetup_r>
 80056cc:	b118      	cbz	r0, 80056d6 <__swbuf_r+0x32>
 80056ce:	f04f 37ff 	mov.w	r7, #4294967295
 80056d2:	4638      	mov	r0, r7
 80056d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	6922      	ldr	r2, [r4, #16]
 80056da:	1a98      	subs	r0, r3, r2
 80056dc:	6963      	ldr	r3, [r4, #20]
 80056de:	b2f6      	uxtb	r6, r6
 80056e0:	4283      	cmp	r3, r0
 80056e2:	4637      	mov	r7, r6
 80056e4:	dc05      	bgt.n	80056f2 <__swbuf_r+0x4e>
 80056e6:	4621      	mov	r1, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	f7ff ffb3 	bl	8005654 <_fflush_r>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d1ed      	bne.n	80056ce <__swbuf_r+0x2a>
 80056f2:	68a3      	ldr	r3, [r4, #8]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	60a3      	str	r3, [r4, #8]
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	6022      	str	r2, [r4, #0]
 80056fe:	701e      	strb	r6, [r3, #0]
 8005700:	6962      	ldr	r2, [r4, #20]
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	429a      	cmp	r2, r3
 8005706:	d004      	beq.n	8005712 <__swbuf_r+0x6e>
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	07db      	lsls	r3, r3, #31
 800570c:	d5e1      	bpl.n	80056d2 <__swbuf_r+0x2e>
 800570e:	2e0a      	cmp	r6, #10
 8005710:	d1df      	bne.n	80056d2 <__swbuf_r+0x2e>
 8005712:	4621      	mov	r1, r4
 8005714:	4628      	mov	r0, r5
 8005716:	f7ff ff9d 	bl	8005654 <_fflush_r>
 800571a:	2800      	cmp	r0, #0
 800571c:	d0d9      	beq.n	80056d2 <__swbuf_r+0x2e>
 800571e:	e7d6      	b.n	80056ce <__swbuf_r+0x2a>

08005720 <__swsetup_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4b29      	ldr	r3, [pc, #164]	@ (80057c8 <__swsetup_r+0xa8>)
 8005724:	4605      	mov	r5, r0
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	460c      	mov	r4, r1
 800572a:	b118      	cbz	r0, 8005734 <__swsetup_r+0x14>
 800572c:	6a03      	ldr	r3, [r0, #32]
 800572e:	b90b      	cbnz	r3, 8005734 <__swsetup_r+0x14>
 8005730:	f7ff fa2e 	bl	8004b90 <__sinit>
 8005734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005738:	0719      	lsls	r1, r3, #28
 800573a:	d422      	bmi.n	8005782 <__swsetup_r+0x62>
 800573c:	06da      	lsls	r2, r3, #27
 800573e:	d407      	bmi.n	8005750 <__swsetup_r+0x30>
 8005740:	2209      	movs	r2, #9
 8005742:	602a      	str	r2, [r5, #0]
 8005744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	f04f 30ff 	mov.w	r0, #4294967295
 800574e:	e033      	b.n	80057b8 <__swsetup_r+0x98>
 8005750:	0758      	lsls	r0, r3, #29
 8005752:	d512      	bpl.n	800577a <__swsetup_r+0x5a>
 8005754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005756:	b141      	cbz	r1, 800576a <__swsetup_r+0x4a>
 8005758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800575c:	4299      	cmp	r1, r3
 800575e:	d002      	beq.n	8005766 <__swsetup_r+0x46>
 8005760:	4628      	mov	r0, r5
 8005762:	f7ff fb2b 	bl	8004dbc <_free_r>
 8005766:	2300      	movs	r3, #0
 8005768:	6363      	str	r3, [r4, #52]	@ 0x34
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	2300      	movs	r3, #0
 8005774:	6063      	str	r3, [r4, #4]
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	f043 0308 	orr.w	r3, r3, #8
 8005780:	81a3      	strh	r3, [r4, #12]
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	b94b      	cbnz	r3, 800579a <__swsetup_r+0x7a>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800578c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005790:	d003      	beq.n	800579a <__swsetup_r+0x7a>
 8005792:	4621      	mov	r1, r4
 8005794:	4628      	mov	r0, r5
 8005796:	f000 f84f 	bl	8005838 <__smakebuf_r>
 800579a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800579e:	f013 0201 	ands.w	r2, r3, #1
 80057a2:	d00a      	beq.n	80057ba <__swsetup_r+0x9a>
 80057a4:	2200      	movs	r2, #0
 80057a6:	60a2      	str	r2, [r4, #8]
 80057a8:	6962      	ldr	r2, [r4, #20]
 80057aa:	4252      	negs	r2, r2
 80057ac:	61a2      	str	r2, [r4, #24]
 80057ae:	6922      	ldr	r2, [r4, #16]
 80057b0:	b942      	cbnz	r2, 80057c4 <__swsetup_r+0xa4>
 80057b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057b6:	d1c5      	bne.n	8005744 <__swsetup_r+0x24>
 80057b8:	bd38      	pop	{r3, r4, r5, pc}
 80057ba:	0799      	lsls	r1, r3, #30
 80057bc:	bf58      	it	pl
 80057be:	6962      	ldrpl	r2, [r4, #20]
 80057c0:	60a2      	str	r2, [r4, #8]
 80057c2:	e7f4      	b.n	80057ae <__swsetup_r+0x8e>
 80057c4:	2000      	movs	r0, #0
 80057c6:	e7f7      	b.n	80057b8 <__swsetup_r+0x98>
 80057c8:	2000001c 	.word	0x2000001c

080057cc <_sbrk_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	4d06      	ldr	r5, [pc, #24]	@ (80057e8 <_sbrk_r+0x1c>)
 80057d0:	2300      	movs	r3, #0
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	f7fb f912 	bl	8000a00 <_sbrk>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d102      	bne.n	80057e6 <_sbrk_r+0x1a>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	b103      	cbz	r3, 80057e6 <_sbrk_r+0x1a>
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	20004b70 	.word	0x20004b70

080057ec <__swhatbuf_r>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	460c      	mov	r4, r1
 80057f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f4:	2900      	cmp	r1, #0
 80057f6:	b096      	sub	sp, #88	@ 0x58
 80057f8:	4615      	mov	r5, r2
 80057fa:	461e      	mov	r6, r3
 80057fc:	da0d      	bge.n	800581a <__swhatbuf_r+0x2e>
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005804:	f04f 0100 	mov.w	r1, #0
 8005808:	bf14      	ite	ne
 800580a:	2340      	movne	r3, #64	@ 0x40
 800580c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005810:	2000      	movs	r0, #0
 8005812:	6031      	str	r1, [r6, #0]
 8005814:	602b      	str	r3, [r5, #0]
 8005816:	b016      	add	sp, #88	@ 0x58
 8005818:	bd70      	pop	{r4, r5, r6, pc}
 800581a:	466a      	mov	r2, sp
 800581c:	f000 f848 	bl	80058b0 <_fstat_r>
 8005820:	2800      	cmp	r0, #0
 8005822:	dbec      	blt.n	80057fe <__swhatbuf_r+0x12>
 8005824:	9901      	ldr	r1, [sp, #4]
 8005826:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800582a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800582e:	4259      	negs	r1, r3
 8005830:	4159      	adcs	r1, r3
 8005832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005836:	e7eb      	b.n	8005810 <__swhatbuf_r+0x24>

08005838 <__smakebuf_r>:
 8005838:	898b      	ldrh	r3, [r1, #12]
 800583a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800583c:	079d      	lsls	r5, r3, #30
 800583e:	4606      	mov	r6, r0
 8005840:	460c      	mov	r4, r1
 8005842:	d507      	bpl.n	8005854 <__smakebuf_r+0x1c>
 8005844:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	6123      	str	r3, [r4, #16]
 800584c:	2301      	movs	r3, #1
 800584e:	6163      	str	r3, [r4, #20]
 8005850:	b003      	add	sp, #12
 8005852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005854:	ab01      	add	r3, sp, #4
 8005856:	466a      	mov	r2, sp
 8005858:	f7ff ffc8 	bl	80057ec <__swhatbuf_r>
 800585c:	9f00      	ldr	r7, [sp, #0]
 800585e:	4605      	mov	r5, r0
 8005860:	4639      	mov	r1, r7
 8005862:	4630      	mov	r0, r6
 8005864:	f7ff fb16 	bl	8004e94 <_malloc_r>
 8005868:	b948      	cbnz	r0, 800587e <__smakebuf_r+0x46>
 800586a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800586e:	059a      	lsls	r2, r3, #22
 8005870:	d4ee      	bmi.n	8005850 <__smakebuf_r+0x18>
 8005872:	f023 0303 	bic.w	r3, r3, #3
 8005876:	f043 0302 	orr.w	r3, r3, #2
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	e7e2      	b.n	8005844 <__smakebuf_r+0xc>
 800587e:	89a3      	ldrh	r3, [r4, #12]
 8005880:	6020      	str	r0, [r4, #0]
 8005882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	9b01      	ldr	r3, [sp, #4]
 800588a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800588e:	b15b      	cbz	r3, 80058a8 <__smakebuf_r+0x70>
 8005890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005894:	4630      	mov	r0, r6
 8005896:	f000 f81d 	bl	80058d4 <_isatty_r>
 800589a:	b128      	cbz	r0, 80058a8 <__smakebuf_r+0x70>
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	81a3      	strh	r3, [r4, #12]
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	431d      	orrs	r5, r3
 80058ac:	81a5      	strh	r5, [r4, #12]
 80058ae:	e7cf      	b.n	8005850 <__smakebuf_r+0x18>

080058b0 <_fstat_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4d07      	ldr	r5, [pc, #28]	@ (80058d0 <_fstat_r+0x20>)
 80058b4:	2300      	movs	r3, #0
 80058b6:	4604      	mov	r4, r0
 80058b8:	4608      	mov	r0, r1
 80058ba:	4611      	mov	r1, r2
 80058bc:	602b      	str	r3, [r5, #0]
 80058be:	f7fb f876 	bl	80009ae <_fstat>
 80058c2:	1c43      	adds	r3, r0, #1
 80058c4:	d102      	bne.n	80058cc <_fstat_r+0x1c>
 80058c6:	682b      	ldr	r3, [r5, #0]
 80058c8:	b103      	cbz	r3, 80058cc <_fstat_r+0x1c>
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	bd38      	pop	{r3, r4, r5, pc}
 80058ce:	bf00      	nop
 80058d0:	20004b70 	.word	0x20004b70

080058d4 <_isatty_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4d06      	ldr	r5, [pc, #24]	@ (80058f0 <_isatty_r+0x1c>)
 80058d8:	2300      	movs	r3, #0
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7fb f875 	bl	80009ce <_isatty>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_isatty_r+0x1a>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_isatty_r+0x1a>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	20004b70 	.word	0x20004b70

080058f4 <_init>:
 80058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f6:	bf00      	nop
 80058f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fa:	bc08      	pop	{r3}
 80058fc:	469e      	mov	lr, r3
 80058fe:	4770      	bx	lr

08005900 <_fini>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	bf00      	nop
 8005904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005906:	bc08      	pop	{r3}
 8005908:	469e      	mov	lr, r3
 800590a:	4770      	bx	lr
